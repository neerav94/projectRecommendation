Anomaly Detection in Bitcoin Network Using

Unsupervised Learning Methods

Phillip Thai Pham
Steven Lee

thaipham@stanford.edu
slee2010@stanford.edu

Abstract

The problem of anomaly detection has been
studied for a long time.
In short, anoma-
lies are abnormal or unlikely things.
In ﬁ-
nancial networks, thieves and illegal activities
are often anomalous in nature. Members of a
network want to detect anomalies as soon as
possible to prevent them from harming the
network’s community and integrity. Many
Machine Learning techniques have been pro-
posed to deal with this problem; some re-
sults appear to be quite promising but there
is no obvious superior method.
In this pa-
per, we consider anomaly detection particu-
lar to the Bitcoin transaction network. Our
goal is to detect which users and transac-
tions are the most suspicious; in this case,
anomalous behavior is a proxy for suspicious
behavior. To this end, we use three unsu-
pervised learning methods including k-means
clustering, Mahalanobis distance, and Unsu-
pervised Support Vector Machine (SVM) on
two graphs generated by the Bitcoin transac-
tion network: one graph has users as nodes,
and the other has transactions as nodes.

1. Introduction

Network structures have appeared for a long time, and
along with them are those who behave abnormally
within the system. We refer to these people or their il-
legal activities as anomalies. With respect to ﬁnancial
transactional networks, anomalies can include those
who execute fraudulent transactions.
In these net-
works, a common goal is to detect those anomalies
to prevent future illegal actions.

Bitcoin is a special type of transaction system; more
information about it can be found in [1]. We seek

This project is accomplished for CS 229 - Machine Learning
at Stanford University in Fall 2014.

to detect anomalies or suspicious activities in this
anonymous network, where nodes (i.e. users, trans-
actions) are unlabeled and there is no conﬁrmation as
to whether or not a given node is actually conducting
illicit activities.

In this project, we focus particularly on the problem
of detecting anomalies in the Bitcoin transaction net-
work, which is related to the study of fraud detection
in all types of ﬁnancial transaction systems. Since this
problem can be generalized to those in other network
settings, which may or may not involve ﬁnancial trans-
actions, we are examining the more general problem of
anomaly detection in networks.

In this paper, we use three unsupervised learning
methods including k-means clustering, Mahalanobis
distance based method, and Unsupervised Support
Vector Machines (SVM) on two graphs generated by
the Bitcoin transaction network: one graph has users
as nodes, and the other has transactions as nodes.

The rest of the paper is organized as follows. Sec-
tion 2 describes everything related to methods,
in-
cluding data collection and parsing, feature extraction,
and mathematical descriptions of the machine learn-
ing techniques. Section 3 discusses evaluation meth-
ods for our proposed algorithms. Section 4 presents
the results we obtained by running these techniques
on the network-type data set we generated. Section 5
evaluates our methods and results. Section 6 describes
future work. Section 7 concludes our study.

2. Methods

In this section, we describe data collection and pars-
ing. Then, we describe feature extraction, and ﬁnally
we provide mathematical explanations for the unsu-
pervised learning techniques we use.

2.1. Data Collection and Parsing

We use the Bitcoin transaction data set obtained from
the University of Illinois Urbana- Champaign. All Bit-
coin transactions are documented in a public ledger

Anomaly Detection in Bitcoin Network Using

Unsupervised Learning Methods

Phillip Thai Pham
Steven Lee

thaipham@stanford.edu
slee2010@stanford.edu

Abstract

The problem of anomaly detection has been
studied for a long time.
In short, anoma-
lies are abnormal or unlikely things.
In ﬁ-
nancial networks, thieves and illegal activities
are often anomalous in nature. Members of a
network want to detect anomalies as soon as
possible to prevent them from harming the
network’s community and integrity. Many
Machine Learning techniques have been pro-
posed to deal with this problem; some re-
sults appear to be quite promising but there
is no obvious superior method.
In this pa-
per, we consider anomaly detection particu-
lar to the Bitcoin transaction network. Our
goal is to detect which users and transac-
tions are the most suspicious; in this case,
anomalous behavior is a proxy for suspicious
behavior. To this end, we use three unsu-
pervised learning methods including k-means
clustering, Mahalanobis distance, and Unsu-
pervised Support Vector Machine (SVM) on
two graphs generated by the Bitcoin transac-
tion network: one graph has users as nodes,
and the other has transactions as nodes.

1. Introduction

Network structures have appeared for a long time, and
along with them are those who behave abnormally
within the system. We refer to these people or their il-
legal activities as anomalies. With respect to ﬁnancial
transactional networks, anomalies can include those
who execute fraudulent transactions.
In these net-
works, a common goal is to detect those anomalies
to prevent future illegal actions.

Bitcoin is a special type of transaction system; more
information about it can be found in [1]. We seek

This project is accomplished for CS 229 - Machine Learning
at Stanford University in Fall 2014.

to detect anomalies or suspicious activities in this
anonymous network, where nodes (i.e. users, trans-
actions) are unlabeled and there is no conﬁrmation as
to whether or not a given node is actually conducting
illicit activities.

In this project, we focus particularly on the problem
of detecting anomalies in the Bitcoin transaction net-
work, which is related to the study of fraud detection
in all types of ﬁnancial transaction systems. Since this
problem can be generalized to those in other network
settings, which may or may not involve ﬁnancial trans-
actions, we are examining the more general problem of
anomaly detection in networks.

In this paper, we use three unsupervised learning
methods including k-means clustering, Mahalanobis
distance based method, and Unsupervised Support
Vector Machines (SVM) on two graphs generated by
the Bitcoin transaction network: one graph has users
as nodes, and the other has transactions as nodes.

The rest of the paper is organized as follows. Sec-
tion 2 describes everything related to methods,
in-
cluding data collection and parsing, feature extraction,
and mathematical descriptions of the machine learn-
ing techniques. Section 3 discusses evaluation meth-
ods for our proposed algorithms. Section 4 presents
the results we obtained by running these techniques
on the network-type data set we generated. Section 5
evaluates our methods and results. Section 6 describes
future work. Section 7 concludes our study.

2. Methods

In this section, we describe data collection and pars-
ing. Then, we describe feature extraction, and ﬁnally
we provide mathematical explanations for the unsu-
pervised learning techniques we use.

2.1. Data Collection and Parsing

We use the Bitcoin transaction data set obtained from
the University of Illinois Urbana- Champaign. All Bit-
coin transactions are documented in a public ledger

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

and are in the currency unit called the Bitcoin (BTC).
The data set contains all Bitcoin transactions begin-
ning from the network’s creation until April 7th, 2013.
For each transaction, there can be multiple sender and
receiver addresses. Furthermore, multiple addresses
can belong to a single user. Finally, users are also
anonymous in that there are no names or personal in-
formation associated with a given user.

The data set is quite large: there are 6, 336, 769 users
with 37, 450, 461 transactions. We parse the data in
two ways. The ﬁrst way, which we will call the user
graph, is quite intuitive: users (where each user owns a
list of addresses) are nodes and transactions between
users are edges. The second way, which we will call
the transaction graph, models transactions as nodes
and Bitcoin ﬂow between transactions as edges.

In our analysis, we will use both graph types to in-
vestigate the Bitcoin network. The user graph will
help us detect suspicious users, while the transaction
graph will help us detect suspicious transactions. Us-
ing these two graph representations, we can not only
ﬁnd out both abnormal users and abnormal activi-
ties, but also check if our methods are consistent in
the sense that suspicious transactions should belong
to suspicious users.

2.2. Feature Extraction

In order to use k-means as a baseline, calculate the
Mahalanobis distance, use an Unsupervised SVM, for
each node in the graph we extract a set of features.
In each of the graph representations of the data (men-
tioned above), we extract the following 12 features.
Keep in mind that even with the same names, the fea-
tures mean diﬀerent things for the two representations.
• In-degree, out-degree, unique in-degree, unique

out-degree, clustering coeﬃcient

• Average in-transaction, average out-transaction
• Average time interval between in-transactions, av-

erage time interval between out-transactions,

• Balance, creation date, active duration

2.3. Unsupervised Learning Techniques

2.3.1. k-means Clustering

The purpose of the k-means clustering method is to
partition m points (i.e. m nodes in the graph) into k
groups of similar characteristics. Technically speaking,
k-means clustering itself is not a method for anomaly
detection; however, it can be useful. Because we ex-
pect outliers to stay far away from the centroids found

by k-means, k-means can be used to assess our true
methods.

For this method to work, we ﬁrst represent each node
as a multi-dimensional vector in the Euclidean space;
each dimension of a node is a feature that we choose
from the list described in part 2.2. For runtime pur-
poses, we select only a subset of features. For the user
graph, we use six features: in-degree, out-degree, mean
incoming transaction value, mean outgoing transac-
tion value, mean time interval, and clustering coeﬃ-
cient. For transaction graph, we use three features:
in-degree, out-degree, total amount of each transac-
tion.

This method produces a set of m points (x1, ..., xm)
in which xi ∈ Rn (where n = 6 or 3 depending on
graphs) for each i = 1, ..., m. We seek to partition
these m points into k clusters S = (S1, ..., Sk) to solve

k(cid:88)

(cid:88)

i=1

x∈Si

min

S

||x − µi||2,

where µi is the mean of the points in Si for each i =
1, ..., k. We use the k-means clustering algorithm as a
heuristic method to solve this problem. The algorithm
in details can be found in [2]. Our ﬁnal note in this part
is that we use the normalized log of feature values to
account for diﬀerent value scales of diﬀerent features.

2.3.2. Mahalanobis Distance Based Method

This method is based on the Multivariate Gaussian
Distribution assumption.

Speciﬁcally, we assume the training set (x1, ..., xm)
where xi ∈ Rn (again, n = 6 for user graph and n = 3
for transaction graph) drawn from multivariate normal
distribution

p(x; µ, Σ) =

1
2 |Σ| 1
(2π) n

2

exp

− 1
2

(x − µ)T Σ−1(x − µ)

.

(cid:18)

(cid:19)

1
m

m(cid:88)

i=1

xi and (cid:98)Σ =

The normal parameter ﬁtting method (MLE) implies
that µ and σ can be estimated by

(cid:98)µ =
Then, we will ﬂag x as an anomaly if p(x,(cid:98)µ,(cid:98)Σ) < 

(xi − µ)(xi − µ)T .

m(cid:88)

i=1

for some chosen threshold . Note that our data are
unlabelled, so we will train and detect on the same
data set.

1
m

2.3.3. Unsupervised SVM

The usual SVM method does not work here because
our data are unlabeled, so we will use a modiﬁed ver-

Anomaly Detection in Bitcoin Network Using

Unsupervised Learning Methods

Phillip Thai Pham
Steven Lee

thaipham@stanford.edu
slee2010@stanford.edu

Abstract

The problem of anomaly detection has been
studied for a long time.
In short, anoma-
lies are abnormal or unlikely things.
In ﬁ-
nancial networks, thieves and illegal activities
are often anomalous in nature. Members of a
network want to detect anomalies as soon as
possible to prevent them from harming the
network’s community and integrity. Many
Machine Learning techniques have been pro-
posed to deal with this problem; some re-
sults appear to be quite promising but there
is no obvious superior method.
In this pa-
per, we consider anomaly detection particu-
lar to the Bitcoin transaction network. Our
goal is to detect which users and transac-
tions are the most suspicious; in this case,
anomalous behavior is a proxy for suspicious
behavior. To this end, we use three unsu-
pervised learning methods including k-means
clustering, Mahalanobis distance, and Unsu-
pervised Support Vector Machine (SVM) on
two graphs generated by the Bitcoin transac-
tion network: one graph has users as nodes,
and the other has transactions as nodes.

1. Introduction

Network structures have appeared for a long time, and
along with them are those who behave abnormally
within the system. We refer to these people or their il-
legal activities as anomalies. With respect to ﬁnancial
transactional networks, anomalies can include those
who execute fraudulent transactions.
In these net-
works, a common goal is to detect those anomalies
to prevent future illegal actions.

Bitcoin is a special type of transaction system; more
information about it can be found in [1]. We seek

This project is accomplished for CS 229 - Machine Learning
at Stanford University in Fall 2014.

to detect anomalies or suspicious activities in this
anonymous network, where nodes (i.e. users, trans-
actions) are unlabeled and there is no conﬁrmation as
to whether or not a given node is actually conducting
illicit activities.

In this project, we focus particularly on the problem
of detecting anomalies in the Bitcoin transaction net-
work, which is related to the study of fraud detection
in all types of ﬁnancial transaction systems. Since this
problem can be generalized to those in other network
settings, which may or may not involve ﬁnancial trans-
actions, we are examining the more general problem of
anomaly detection in networks.

In this paper, we use three unsupervised learning
methods including k-means clustering, Mahalanobis
distance based method, and Unsupervised Support
Vector Machines (SVM) on two graphs generated by
the Bitcoin transaction network: one graph has users
as nodes, and the other has transactions as nodes.

The rest of the paper is organized as follows. Sec-
tion 2 describes everything related to methods,
in-
cluding data collection and parsing, feature extraction,
and mathematical descriptions of the machine learn-
ing techniques. Section 3 discusses evaluation meth-
ods for our proposed algorithms. Section 4 presents
the results we obtained by running these techniques
on the network-type data set we generated. Section 5
evaluates our methods and results. Section 6 describes
future work. Section 7 concludes our study.

2. Methods

In this section, we describe data collection and pars-
ing. Then, we describe feature extraction, and ﬁnally
we provide mathematical explanations for the unsu-
pervised learning techniques we use.

2.1. Data Collection and Parsing

We use the Bitcoin transaction data set obtained from
the University of Illinois Urbana- Champaign. All Bit-
coin transactions are documented in a public ledger

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

and are in the currency unit called the Bitcoin (BTC).
The data set contains all Bitcoin transactions begin-
ning from the network’s creation until April 7th, 2013.
For each transaction, there can be multiple sender and
receiver addresses. Furthermore, multiple addresses
can belong to a single user. Finally, users are also
anonymous in that there are no names or personal in-
formation associated with a given user.

The data set is quite large: there are 6, 336, 769 users
with 37, 450, 461 transactions. We parse the data in
two ways. The ﬁrst way, which we will call the user
graph, is quite intuitive: users (where each user owns a
list of addresses) are nodes and transactions between
users are edges. The second way, which we will call
the transaction graph, models transactions as nodes
and Bitcoin ﬂow between transactions as edges.

In our analysis, we will use both graph types to in-
vestigate the Bitcoin network. The user graph will
help us detect suspicious users, while the transaction
graph will help us detect suspicious transactions. Us-
ing these two graph representations, we can not only
ﬁnd out both abnormal users and abnormal activi-
ties, but also check if our methods are consistent in
the sense that suspicious transactions should belong
to suspicious users.

2.2. Feature Extraction

In order to use k-means as a baseline, calculate the
Mahalanobis distance, use an Unsupervised SVM, for
each node in the graph we extract a set of features.
In each of the graph representations of the data (men-
tioned above), we extract the following 12 features.
Keep in mind that even with the same names, the fea-
tures mean diﬀerent things for the two representations.
• In-degree, out-degree, unique in-degree, unique

out-degree, clustering coeﬃcient

• Average in-transaction, average out-transaction
• Average time interval between in-transactions, av-

erage time interval between out-transactions,

• Balance, creation date, active duration

2.3. Unsupervised Learning Techniques

2.3.1. k-means Clustering

The purpose of the k-means clustering method is to
partition m points (i.e. m nodes in the graph) into k
groups of similar characteristics. Technically speaking,
k-means clustering itself is not a method for anomaly
detection; however, it can be useful. Because we ex-
pect outliers to stay far away from the centroids found

by k-means, k-means can be used to assess our true
methods.

For this method to work, we ﬁrst represent each node
as a multi-dimensional vector in the Euclidean space;
each dimension of a node is a feature that we choose
from the list described in part 2.2. For runtime pur-
poses, we select only a subset of features. For the user
graph, we use six features: in-degree, out-degree, mean
incoming transaction value, mean outgoing transac-
tion value, mean time interval, and clustering coeﬃ-
cient. For transaction graph, we use three features:
in-degree, out-degree, total amount of each transac-
tion.

This method produces a set of m points (x1, ..., xm)
in which xi ∈ Rn (where n = 6 or 3 depending on
graphs) for each i = 1, ..., m. We seek to partition
these m points into k clusters S = (S1, ..., Sk) to solve

k(cid:88)

(cid:88)

i=1

x∈Si

min

S

||x − µi||2,

where µi is the mean of the points in Si for each i =
1, ..., k. We use the k-means clustering algorithm as a
heuristic method to solve this problem. The algorithm
in details can be found in [2]. Our ﬁnal note in this part
is that we use the normalized log of feature values to
account for diﬀerent value scales of diﬀerent features.

2.3.2. Mahalanobis Distance Based Method

This method is based on the Multivariate Gaussian
Distribution assumption.

Speciﬁcally, we assume the training set (x1, ..., xm)
where xi ∈ Rn (again, n = 6 for user graph and n = 3
for transaction graph) drawn from multivariate normal
distribution

p(x; µ, Σ) =

1
2 |Σ| 1
(2π) n

2

exp

− 1
2

(x − µ)T Σ−1(x − µ)

.

(cid:18)

(cid:19)

1
m

m(cid:88)

i=1

xi and (cid:98)Σ =

The normal parameter ﬁtting method (MLE) implies
that µ and σ can be estimated by

(cid:98)µ =
Then, we will ﬂag x as an anomaly if p(x,(cid:98)µ,(cid:98)Σ) < 

(xi − µ)(xi − µ)T .

m(cid:88)

i=1

for some chosen threshold . Note that our data are
unlabelled, so we will train and detect on the same
data set.

1
m

2.3.3. Unsupervised SVM

The usual SVM method does not work here because
our data are unlabeled, so we will use a modiﬁed ver-

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

sion of it. We also take advantage of the Kernel trick
so that we can use an inﬁnite dimensional feature
space. We also assume the training set (x1, ..., xm)
where xi ∈ Rn for all i.
We start with the primal optimization problem:
s.t. wT xi ≥ ρ ∀i = 1, ..., m.

(cid:18) 1

(cid:19)

wT w

min
w,ρ

2

A new test example x will be labeled sign(wT x − ρ).
The point x with label (−1) is ﬂagged as an anomaly.
Note that the data are not linearly separable, so we
need to use a soft-margin SVM. However, we will not
use the constant C as in the usual soft-margin SVM
due to its diﬃculty in interpretation. Instead, we fol-
low [3] to use ν-SVM method as follows.

(cid:32)

(cid:33)

m(cid:88)

i=1

min
w,ξ,ρ

1
2

wT w +

1
νm

ξi − ρ

, s.t.

wT xi ≥ ρ − ξi ∀i = 1, ..., m and ξi ≥ 0 ∀i = 1, ..., m.
Here, ν ∈ (0, 1] can be interpreted as an upper bound
for the fraction of outliers (i.e. anomalies).
In the
Results section, we will determine which ν is optimal.

Following [3] again, we can write the corresponding
dual problem using the Kernel trick:

 1

2

m(cid:88)

m(cid:88)

i=1

j=1

min

α

αiαjK(xi, xj)

0 ≤ αi ≤ 1
νm

∀i = 1, ..., m and

Here, we choose K(x, z) = exp(−γ(x − z)2) where the
hyper-parameter γ will be ﬁne-tuned later.

To solve for this optimization problem eﬃciently, we
can use SMO method ([4]).

Finally for 0 < αj < 1

νm , we can recover ρ:

 subject to
m(cid:88)

αi = 1.

i=1

(cid:80)m

Then a new point x is ﬂagged anomaly if
i=1 αiK(xi, x) < ρ. Again, since our data are all un-
labelled, we will will use the same data set for training
and detecting.

3. Evaluation Methods

With unlabeled data, evaluating our methods is a dif-
ﬁcult challenge. Due to the nature of the network-type
data set we have, we propose three evaluation meth-
ods.

m(cid:88)

i=1

ρ =

αiK(xi, xj).

4. Results

• Using k-means as a baseline, we can calculate
the relative distances between the detected out-
liers and the centroids. If these values are small,
then we conclude that our methods are not good
enough. We call this “Visualization Evaluation.”
• Since we represent our data in two ways with
nodes and edges somehow exchanging, we can test
for our methods’ consistency by checking if de-
tected suspicious users own detected suspicious
transactions. We call this “Dual Evaluation.”

Speciﬁcally, with the user graph we can get the
top N user outliers and with the transaction
graph we can get the top M transaction outliers.
In this paper, we choose N = M = 100. We
then determine XN - the set of transactions cor-
responding to the top N node outliers and YM -
the set of users corresponding to the top M trans-
action outliers deﬁned above. We deﬁne

A1 =

and

|XN ∩ top XN transaction outliers|

|XN|

A2 =

|YM ∩ top YM user outliers|

|YM|

.

Finally, we deﬁne the Dual Evaluation Metric
mDE by

mDE =

A1 + A2

.

2

Note that mDE ∈ [0, 1], and the bigger it is the
more accurate our method is.

• Finally, there are roughly 30 revealed thieves in
the Bitcoin network. We can check if they belong
to our detected suspicious user and transaction
sets. For this reason, these users and their illegal
transactions will be included in the test sets of
our methods.

The ν-SVM method takes a long time to run, and since
we are not able to use techniques like GPU-parallelized
computation at the moment, we will limit our data set
to 100, 000 data points for all methods.

4.1. k-Means Clustering

Using the k-means clustering metric in [5] we ﬁnd that
setting k = 7 minimizes cross-cluster entropy for the
user graph and k = 8 for the transaction graph. (Fig-
ure 1.) For the sake of the dual evaluation method, we
choose k = 7 for both graph types.

Anomaly Detection in Bitcoin Network Using

Unsupervised Learning Methods

Phillip Thai Pham
Steven Lee

thaipham@stanford.edu
slee2010@stanford.edu

Abstract

The problem of anomaly detection has been
studied for a long time.
In short, anoma-
lies are abnormal or unlikely things.
In ﬁ-
nancial networks, thieves and illegal activities
are often anomalous in nature. Members of a
network want to detect anomalies as soon as
possible to prevent them from harming the
network’s community and integrity. Many
Machine Learning techniques have been pro-
posed to deal with this problem; some re-
sults appear to be quite promising but there
is no obvious superior method.
In this pa-
per, we consider anomaly detection particu-
lar to the Bitcoin transaction network. Our
goal is to detect which users and transac-
tions are the most suspicious; in this case,
anomalous behavior is a proxy for suspicious
behavior. To this end, we use three unsu-
pervised learning methods including k-means
clustering, Mahalanobis distance, and Unsu-
pervised Support Vector Machine (SVM) on
two graphs generated by the Bitcoin transac-
tion network: one graph has users as nodes,
and the other has transactions as nodes.

1. Introduction

Network structures have appeared for a long time, and
along with them are those who behave abnormally
within the system. We refer to these people or their il-
legal activities as anomalies. With respect to ﬁnancial
transactional networks, anomalies can include those
who execute fraudulent transactions.
In these net-
works, a common goal is to detect those anomalies
to prevent future illegal actions.

Bitcoin is a special type of transaction system; more
information about it can be found in [1]. We seek

This project is accomplished for CS 229 - Machine Learning
at Stanford University in Fall 2014.

to detect anomalies or suspicious activities in this
anonymous network, where nodes (i.e. users, trans-
actions) are unlabeled and there is no conﬁrmation as
to whether or not a given node is actually conducting
illicit activities.

In this project, we focus particularly on the problem
of detecting anomalies in the Bitcoin transaction net-
work, which is related to the study of fraud detection
in all types of ﬁnancial transaction systems. Since this
problem can be generalized to those in other network
settings, which may or may not involve ﬁnancial trans-
actions, we are examining the more general problem of
anomaly detection in networks.

In this paper, we use three unsupervised learning
methods including k-means clustering, Mahalanobis
distance based method, and Unsupervised Support
Vector Machines (SVM) on two graphs generated by
the Bitcoin transaction network: one graph has users
as nodes, and the other has transactions as nodes.

The rest of the paper is organized as follows. Sec-
tion 2 describes everything related to methods,
in-
cluding data collection and parsing, feature extraction,
and mathematical descriptions of the machine learn-
ing techniques. Section 3 discusses evaluation meth-
ods for our proposed algorithms. Section 4 presents
the results we obtained by running these techniques
on the network-type data set we generated. Section 5
evaluates our methods and results. Section 6 describes
future work. Section 7 concludes our study.

2. Methods

In this section, we describe data collection and pars-
ing. Then, we describe feature extraction, and ﬁnally
we provide mathematical explanations for the unsu-
pervised learning techniques we use.

2.1. Data Collection and Parsing

We use the Bitcoin transaction data set obtained from
the University of Illinois Urbana- Champaign. All Bit-
coin transactions are documented in a public ledger

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

and are in the currency unit called the Bitcoin (BTC).
The data set contains all Bitcoin transactions begin-
ning from the network’s creation until April 7th, 2013.
For each transaction, there can be multiple sender and
receiver addresses. Furthermore, multiple addresses
can belong to a single user. Finally, users are also
anonymous in that there are no names or personal in-
formation associated with a given user.

The data set is quite large: there are 6, 336, 769 users
with 37, 450, 461 transactions. We parse the data in
two ways. The ﬁrst way, which we will call the user
graph, is quite intuitive: users (where each user owns a
list of addresses) are nodes and transactions between
users are edges. The second way, which we will call
the transaction graph, models transactions as nodes
and Bitcoin ﬂow between transactions as edges.

In our analysis, we will use both graph types to in-
vestigate the Bitcoin network. The user graph will
help us detect suspicious users, while the transaction
graph will help us detect suspicious transactions. Us-
ing these two graph representations, we can not only
ﬁnd out both abnormal users and abnormal activi-
ties, but also check if our methods are consistent in
the sense that suspicious transactions should belong
to suspicious users.

2.2. Feature Extraction

In order to use k-means as a baseline, calculate the
Mahalanobis distance, use an Unsupervised SVM, for
each node in the graph we extract a set of features.
In each of the graph representations of the data (men-
tioned above), we extract the following 12 features.
Keep in mind that even with the same names, the fea-
tures mean diﬀerent things for the two representations.
• In-degree, out-degree, unique in-degree, unique

out-degree, clustering coeﬃcient

• Average in-transaction, average out-transaction
• Average time interval between in-transactions, av-

erage time interval between out-transactions,

• Balance, creation date, active duration

2.3. Unsupervised Learning Techniques

2.3.1. k-means Clustering

The purpose of the k-means clustering method is to
partition m points (i.e. m nodes in the graph) into k
groups of similar characteristics. Technically speaking,
k-means clustering itself is not a method for anomaly
detection; however, it can be useful. Because we ex-
pect outliers to stay far away from the centroids found

by k-means, k-means can be used to assess our true
methods.

For this method to work, we ﬁrst represent each node
as a multi-dimensional vector in the Euclidean space;
each dimension of a node is a feature that we choose
from the list described in part 2.2. For runtime pur-
poses, we select only a subset of features. For the user
graph, we use six features: in-degree, out-degree, mean
incoming transaction value, mean outgoing transac-
tion value, mean time interval, and clustering coeﬃ-
cient. For transaction graph, we use three features:
in-degree, out-degree, total amount of each transac-
tion.

This method produces a set of m points (x1, ..., xm)
in which xi ∈ Rn (where n = 6 or 3 depending on
graphs) for each i = 1, ..., m. We seek to partition
these m points into k clusters S = (S1, ..., Sk) to solve

k(cid:88)

(cid:88)

i=1

x∈Si

min

S

||x − µi||2,

where µi is the mean of the points in Si for each i =
1, ..., k. We use the k-means clustering algorithm as a
heuristic method to solve this problem. The algorithm
in details can be found in [2]. Our ﬁnal note in this part
is that we use the normalized log of feature values to
account for diﬀerent value scales of diﬀerent features.

2.3.2. Mahalanobis Distance Based Method

This method is based on the Multivariate Gaussian
Distribution assumption.

Speciﬁcally, we assume the training set (x1, ..., xm)
where xi ∈ Rn (again, n = 6 for user graph and n = 3
for transaction graph) drawn from multivariate normal
distribution

p(x; µ, Σ) =

1
2 |Σ| 1
(2π) n

2

exp

− 1
2

(x − µ)T Σ−1(x − µ)

.

(cid:18)

(cid:19)

1
m

m(cid:88)

i=1

xi and (cid:98)Σ =

The normal parameter ﬁtting method (MLE) implies
that µ and σ can be estimated by

(cid:98)µ =
Then, we will ﬂag x as an anomaly if p(x,(cid:98)µ,(cid:98)Σ) < 

(xi − µ)(xi − µ)T .

m(cid:88)

i=1

for some chosen threshold . Note that our data are
unlabelled, so we will train and detect on the same
data set.

1
m

2.3.3. Unsupervised SVM

The usual SVM method does not work here because
our data are unlabeled, so we will use a modiﬁed ver-

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

sion of it. We also take advantage of the Kernel trick
so that we can use an inﬁnite dimensional feature
space. We also assume the training set (x1, ..., xm)
where xi ∈ Rn for all i.
We start with the primal optimization problem:
s.t. wT xi ≥ ρ ∀i = 1, ..., m.

(cid:18) 1

(cid:19)

wT w

min
w,ρ

2

A new test example x will be labeled sign(wT x − ρ).
The point x with label (−1) is ﬂagged as an anomaly.
Note that the data are not linearly separable, so we
need to use a soft-margin SVM. However, we will not
use the constant C as in the usual soft-margin SVM
due to its diﬃculty in interpretation. Instead, we fol-
low [3] to use ν-SVM method as follows.

(cid:32)

(cid:33)

m(cid:88)

i=1

min
w,ξ,ρ

1
2

wT w +

1
νm

ξi − ρ

, s.t.

wT xi ≥ ρ − ξi ∀i = 1, ..., m and ξi ≥ 0 ∀i = 1, ..., m.
Here, ν ∈ (0, 1] can be interpreted as an upper bound
for the fraction of outliers (i.e. anomalies).
In the
Results section, we will determine which ν is optimal.

Following [3] again, we can write the corresponding
dual problem using the Kernel trick:

 1

2

m(cid:88)

m(cid:88)

i=1

j=1

min

α

αiαjK(xi, xj)

0 ≤ αi ≤ 1
νm

∀i = 1, ..., m and

Here, we choose K(x, z) = exp(−γ(x − z)2) where the
hyper-parameter γ will be ﬁne-tuned later.

To solve for this optimization problem eﬃciently, we
can use SMO method ([4]).

Finally for 0 < αj < 1

νm , we can recover ρ:

 subject to
m(cid:88)

αi = 1.

i=1

(cid:80)m

Then a new point x is ﬂagged anomaly if
i=1 αiK(xi, x) < ρ. Again, since our data are all un-
labelled, we will will use the same data set for training
and detecting.

3. Evaluation Methods

With unlabeled data, evaluating our methods is a dif-
ﬁcult challenge. Due to the nature of the network-type
data set we have, we propose three evaluation meth-
ods.

m(cid:88)

i=1

ρ =

αiK(xi, xj).

4. Results

• Using k-means as a baseline, we can calculate
the relative distances between the detected out-
liers and the centroids. If these values are small,
then we conclude that our methods are not good
enough. We call this “Visualization Evaluation.”
• Since we represent our data in two ways with
nodes and edges somehow exchanging, we can test
for our methods’ consistency by checking if de-
tected suspicious users own detected suspicious
transactions. We call this “Dual Evaluation.”

Speciﬁcally, with the user graph we can get the
top N user outliers and with the transaction
graph we can get the top M transaction outliers.
In this paper, we choose N = M = 100. We
then determine XN - the set of transactions cor-
responding to the top N node outliers and YM -
the set of users corresponding to the top M trans-
action outliers deﬁned above. We deﬁne

A1 =

and

|XN ∩ top XN transaction outliers|

|XN|

A2 =

|YM ∩ top YM user outliers|

|YM|

.

Finally, we deﬁne the Dual Evaluation Metric
mDE by

mDE =

A1 + A2

.

2

Note that mDE ∈ [0, 1], and the bigger it is the
more accurate our method is.

• Finally, there are roughly 30 revealed thieves in
the Bitcoin network. We can check if they belong
to our detected suspicious user and transaction
sets. For this reason, these users and their illegal
transactions will be included in the test sets of
our methods.

The ν-SVM method takes a long time to run, and since
we are not able to use techniques like GPU-parallelized
computation at the moment, we will limit our data set
to 100, 000 data points for all methods.

4.1. k-Means Clustering

Using the k-means clustering metric in [5] we ﬁnd that
setting k = 7 minimizes cross-cluster entropy for the
user graph and k = 8 for the transaction graph. (Fig-
ure 1.) For the sake of the dual evaluation method, we
choose k = 7 for both graph types.

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

Figure 1. Cluster Entropy vs. k

Figure 3. Anomaly Detection using Mahalanobis Distance:
Transaction Graph

4.2. Mahalanobis Distance Based Method

Now, we run the Mahalanobis distance based method
for two types of graphs. (Figures 2 − 3.)

Figure 4. Plot of A1 and A2 over ν in ν-SVM method.

Figure 2. Anomaly Detection using Mahalanobis Distance:
User Graph

The detected anomalies seem to appear at the border
of the plot, which indicates that abnormal activities
are usually extreme.

detected anomalies for both types of graph represen-
tations in Figures 5 and 6.

The suspicious users and transactions suggested by the
Unsupervised SVM method appear to be quite similar
to those suggested by the Mahalanobis distance based
method. They both usually appear on the outer bor-
ders of the graphs.

4.3. Unsupervised SVM

We now run the Unsupervised (one - class) ν-SVM
method for two graph types. We start with identi-
fying the optimal hyper-parameter ν. Based on the
evaluation section, we will choose the ν which gives
the largest values of A1 and A2. It turns out that the
optimal ν is around 0.005. (Figure 4.)

Now with ν = 0.005, the ν-SVM method gives us the

5. Evaluation Results

• Using k-means clustering method, we get k clus-
ters with corresponding k centroids. For each
graph type (user and transaction) and for each
method (Mahalanobis and Unsupervised SVM),
we calculate the average of the ratios of detected
anomaly distances to corresponding centroids over
max distances from those centroids to their as-

Anomaly Detection in Bitcoin Network Using

Unsupervised Learning Methods

Phillip Thai Pham
Steven Lee

thaipham@stanford.edu
slee2010@stanford.edu

Abstract

The problem of anomaly detection has been
studied for a long time.
In short, anoma-
lies are abnormal or unlikely things.
In ﬁ-
nancial networks, thieves and illegal activities
are often anomalous in nature. Members of a
network want to detect anomalies as soon as
possible to prevent them from harming the
network’s community and integrity. Many
Machine Learning techniques have been pro-
posed to deal with this problem; some re-
sults appear to be quite promising but there
is no obvious superior method.
In this pa-
per, we consider anomaly detection particu-
lar to the Bitcoin transaction network. Our
goal is to detect which users and transac-
tions are the most suspicious; in this case,
anomalous behavior is a proxy for suspicious
behavior. To this end, we use three unsu-
pervised learning methods including k-means
clustering, Mahalanobis distance, and Unsu-
pervised Support Vector Machine (SVM) on
two graphs generated by the Bitcoin transac-
tion network: one graph has users as nodes,
and the other has transactions as nodes.

1. Introduction

Network structures have appeared for a long time, and
along with them are those who behave abnormally
within the system. We refer to these people or their il-
legal activities as anomalies. With respect to ﬁnancial
transactional networks, anomalies can include those
who execute fraudulent transactions.
In these net-
works, a common goal is to detect those anomalies
to prevent future illegal actions.

Bitcoin is a special type of transaction system; more
information about it can be found in [1]. We seek

This project is accomplished for CS 229 - Machine Learning
at Stanford University in Fall 2014.

to detect anomalies or suspicious activities in this
anonymous network, where nodes (i.e. users, trans-
actions) are unlabeled and there is no conﬁrmation as
to whether or not a given node is actually conducting
illicit activities.

In this project, we focus particularly on the problem
of detecting anomalies in the Bitcoin transaction net-
work, which is related to the study of fraud detection
in all types of ﬁnancial transaction systems. Since this
problem can be generalized to those in other network
settings, which may or may not involve ﬁnancial trans-
actions, we are examining the more general problem of
anomaly detection in networks.

In this paper, we use three unsupervised learning
methods including k-means clustering, Mahalanobis
distance based method, and Unsupervised Support
Vector Machines (SVM) on two graphs generated by
the Bitcoin transaction network: one graph has users
as nodes, and the other has transactions as nodes.

The rest of the paper is organized as follows. Sec-
tion 2 describes everything related to methods,
in-
cluding data collection and parsing, feature extraction,
and mathematical descriptions of the machine learn-
ing techniques. Section 3 discusses evaluation meth-
ods for our proposed algorithms. Section 4 presents
the results we obtained by running these techniques
on the network-type data set we generated. Section 5
evaluates our methods and results. Section 6 describes
future work. Section 7 concludes our study.

2. Methods

In this section, we describe data collection and pars-
ing. Then, we describe feature extraction, and ﬁnally
we provide mathematical explanations for the unsu-
pervised learning techniques we use.

2.1. Data Collection and Parsing

We use the Bitcoin transaction data set obtained from
the University of Illinois Urbana- Champaign. All Bit-
coin transactions are documented in a public ledger

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

and are in the currency unit called the Bitcoin (BTC).
The data set contains all Bitcoin transactions begin-
ning from the network’s creation until April 7th, 2013.
For each transaction, there can be multiple sender and
receiver addresses. Furthermore, multiple addresses
can belong to a single user. Finally, users are also
anonymous in that there are no names or personal in-
formation associated with a given user.

The data set is quite large: there are 6, 336, 769 users
with 37, 450, 461 transactions. We parse the data in
two ways. The ﬁrst way, which we will call the user
graph, is quite intuitive: users (where each user owns a
list of addresses) are nodes and transactions between
users are edges. The second way, which we will call
the transaction graph, models transactions as nodes
and Bitcoin ﬂow between transactions as edges.

In our analysis, we will use both graph types to in-
vestigate the Bitcoin network. The user graph will
help us detect suspicious users, while the transaction
graph will help us detect suspicious transactions. Us-
ing these two graph representations, we can not only
ﬁnd out both abnormal users and abnormal activi-
ties, but also check if our methods are consistent in
the sense that suspicious transactions should belong
to suspicious users.

2.2. Feature Extraction

In order to use k-means as a baseline, calculate the
Mahalanobis distance, use an Unsupervised SVM, for
each node in the graph we extract a set of features.
In each of the graph representations of the data (men-
tioned above), we extract the following 12 features.
Keep in mind that even with the same names, the fea-
tures mean diﬀerent things for the two representations.
• In-degree, out-degree, unique in-degree, unique

out-degree, clustering coeﬃcient

• Average in-transaction, average out-transaction
• Average time interval between in-transactions, av-

erage time interval between out-transactions,

• Balance, creation date, active duration

2.3. Unsupervised Learning Techniques

2.3.1. k-means Clustering

The purpose of the k-means clustering method is to
partition m points (i.e. m nodes in the graph) into k
groups of similar characteristics. Technically speaking,
k-means clustering itself is not a method for anomaly
detection; however, it can be useful. Because we ex-
pect outliers to stay far away from the centroids found

by k-means, k-means can be used to assess our true
methods.

For this method to work, we ﬁrst represent each node
as a multi-dimensional vector in the Euclidean space;
each dimension of a node is a feature that we choose
from the list described in part 2.2. For runtime pur-
poses, we select only a subset of features. For the user
graph, we use six features: in-degree, out-degree, mean
incoming transaction value, mean outgoing transac-
tion value, mean time interval, and clustering coeﬃ-
cient. For transaction graph, we use three features:
in-degree, out-degree, total amount of each transac-
tion.

This method produces a set of m points (x1, ..., xm)
in which xi ∈ Rn (where n = 6 or 3 depending on
graphs) for each i = 1, ..., m. We seek to partition
these m points into k clusters S = (S1, ..., Sk) to solve

k(cid:88)

(cid:88)

i=1

x∈Si

min

S

||x − µi||2,

where µi is the mean of the points in Si for each i =
1, ..., k. We use the k-means clustering algorithm as a
heuristic method to solve this problem. The algorithm
in details can be found in [2]. Our ﬁnal note in this part
is that we use the normalized log of feature values to
account for diﬀerent value scales of diﬀerent features.

2.3.2. Mahalanobis Distance Based Method

This method is based on the Multivariate Gaussian
Distribution assumption.

Speciﬁcally, we assume the training set (x1, ..., xm)
where xi ∈ Rn (again, n = 6 for user graph and n = 3
for transaction graph) drawn from multivariate normal
distribution

p(x; µ, Σ) =

1
2 |Σ| 1
(2π) n

2

exp

− 1
2

(x − µ)T Σ−1(x − µ)

.

(cid:18)

(cid:19)

1
m

m(cid:88)

i=1

xi and (cid:98)Σ =

The normal parameter ﬁtting method (MLE) implies
that µ and σ can be estimated by

(cid:98)µ =
Then, we will ﬂag x as an anomaly if p(x,(cid:98)µ,(cid:98)Σ) < 

(xi − µ)(xi − µ)T .

m(cid:88)

i=1

for some chosen threshold . Note that our data are
unlabelled, so we will train and detect on the same
data set.

1
m

2.3.3. Unsupervised SVM

The usual SVM method does not work here because
our data are unlabeled, so we will use a modiﬁed ver-

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

sion of it. We also take advantage of the Kernel trick
so that we can use an inﬁnite dimensional feature
space. We also assume the training set (x1, ..., xm)
where xi ∈ Rn for all i.
We start with the primal optimization problem:
s.t. wT xi ≥ ρ ∀i = 1, ..., m.

(cid:18) 1

(cid:19)

wT w

min
w,ρ

2

A new test example x will be labeled sign(wT x − ρ).
The point x with label (−1) is ﬂagged as an anomaly.
Note that the data are not linearly separable, so we
need to use a soft-margin SVM. However, we will not
use the constant C as in the usual soft-margin SVM
due to its diﬃculty in interpretation. Instead, we fol-
low [3] to use ν-SVM method as follows.

(cid:32)

(cid:33)

m(cid:88)

i=1

min
w,ξ,ρ

1
2

wT w +

1
νm

ξi − ρ

, s.t.

wT xi ≥ ρ − ξi ∀i = 1, ..., m and ξi ≥ 0 ∀i = 1, ..., m.
Here, ν ∈ (0, 1] can be interpreted as an upper bound
for the fraction of outliers (i.e. anomalies).
In the
Results section, we will determine which ν is optimal.

Following [3] again, we can write the corresponding
dual problem using the Kernel trick:

 1

2

m(cid:88)

m(cid:88)

i=1

j=1

min

α

αiαjK(xi, xj)

0 ≤ αi ≤ 1
νm

∀i = 1, ..., m and

Here, we choose K(x, z) = exp(−γ(x − z)2) where the
hyper-parameter γ will be ﬁne-tuned later.

To solve for this optimization problem eﬃciently, we
can use SMO method ([4]).

Finally for 0 < αj < 1

νm , we can recover ρ:

 subject to
m(cid:88)

αi = 1.

i=1

(cid:80)m

Then a new point x is ﬂagged anomaly if
i=1 αiK(xi, x) < ρ. Again, since our data are all un-
labelled, we will will use the same data set for training
and detecting.

3. Evaluation Methods

With unlabeled data, evaluating our methods is a dif-
ﬁcult challenge. Due to the nature of the network-type
data set we have, we propose three evaluation meth-
ods.

m(cid:88)

i=1

ρ =

αiK(xi, xj).

4. Results

• Using k-means as a baseline, we can calculate
the relative distances between the detected out-
liers and the centroids. If these values are small,
then we conclude that our methods are not good
enough. We call this “Visualization Evaluation.”
• Since we represent our data in two ways with
nodes and edges somehow exchanging, we can test
for our methods’ consistency by checking if de-
tected suspicious users own detected suspicious
transactions. We call this “Dual Evaluation.”

Speciﬁcally, with the user graph we can get the
top N user outliers and with the transaction
graph we can get the top M transaction outliers.
In this paper, we choose N = M = 100. We
then determine XN - the set of transactions cor-
responding to the top N node outliers and YM -
the set of users corresponding to the top M trans-
action outliers deﬁned above. We deﬁne

A1 =

and

|XN ∩ top XN transaction outliers|

|XN|

A2 =

|YM ∩ top YM user outliers|

|YM|

.

Finally, we deﬁne the Dual Evaluation Metric
mDE by

mDE =

A1 + A2

.

2

Note that mDE ∈ [0, 1], and the bigger it is the
more accurate our method is.

• Finally, there are roughly 30 revealed thieves in
the Bitcoin network. We can check if they belong
to our detected suspicious user and transaction
sets. For this reason, these users and their illegal
transactions will be included in the test sets of
our methods.

The ν-SVM method takes a long time to run, and since
we are not able to use techniques like GPU-parallelized
computation at the moment, we will limit our data set
to 100, 000 data points for all methods.

4.1. k-Means Clustering

Using the k-means clustering metric in [5] we ﬁnd that
setting k = 7 minimizes cross-cluster entropy for the
user graph and k = 8 for the transaction graph. (Fig-
ure 1.) For the sake of the dual evaluation method, we
choose k = 7 for both graph types.

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

Figure 1. Cluster Entropy vs. k

Figure 3. Anomaly Detection using Mahalanobis Distance:
Transaction Graph

4.2. Mahalanobis Distance Based Method

Now, we run the Mahalanobis distance based method
for two types of graphs. (Figures 2 − 3.)

Figure 4. Plot of A1 and A2 over ν in ν-SVM method.

Figure 2. Anomaly Detection using Mahalanobis Distance:
User Graph

The detected anomalies seem to appear at the border
of the plot, which indicates that abnormal activities
are usually extreme.

detected anomalies for both types of graph represen-
tations in Figures 5 and 6.

The suspicious users and transactions suggested by the
Unsupervised SVM method appear to be quite similar
to those suggested by the Mahalanobis distance based
method. They both usually appear on the outer bor-
ders of the graphs.

4.3. Unsupervised SVM

We now run the Unsupervised (one - class) ν-SVM
method for two graph types. We start with identi-
fying the optimal hyper-parameter ν. Based on the
evaluation section, we will choose the ν which gives
the largest values of A1 and A2. It turns out that the
optimal ν is around 0.005. (Figure 4.)

Now with ν = 0.005, the ν-SVM method gives us the

5. Evaluation Results

• Using k-means clustering method, we get k clus-
ters with corresponding k centroids. For each
graph type (user and transaction) and for each
method (Mahalanobis and Unsupervised SVM),
we calculate the average of the ratios of detected
anomaly distances to corresponding centroids over
max distances from those centroids to their as-

Anomaly Detection in Bitcoin Network Using Unsupervised Learning Methods

For the Unsupervised SVM method, we get A1 =
0.1782 and A2 = 0.1101 which gives mDE =
0.14415. This value is much higher than the
one produced by the Mahalanobis distance based
method, even given our small set of data.

• For the Mahalanobis Distance based method, we
detect one known theft that occurred in June
2011. The anomalous transaction obtained a to-
tal of over 4000 BTC from 620 various addresses
and funneled them to a single address.

For the Unsupervised SVM based method, we
detect one known loss that occurred in October
2011. The anomalous transaction was one of 23
transactions that caused a user to lose over 2, 600
BTC due to corruption in a hashing function.

6. Future Studies

We propose to parallelize computation in order to en-
able faster outlier detection using a GPU. This involves
signiﬁcant work, such as introducing thread-safety in
the learning methods, but will allow us to analyze the
full dataset of ∼ 38 million transactions.

7. Conclusions

In this paper, we have investigate the Bitcoin network.
We ﬁrst represent the data with two focuses: users and
transactions. We then use three main social network
techniques to detect anomalies, which are potential
anomalous users and transactions. While the agree-
ment metrics are not high, we are able to detect two
known cases of theft and one known case of loss, out
of the 30 known cases we have.

References

[1] https://bitcoin.org/en/
[2] Lloyd, Stuart P. (1982), Least squares quantization
in PCM, IEEE Transactions on Information Theory
28 (2): 129-137.
[3] B. Sch¨olkopf, J. Platt, J. Shawe-Taylor, A. J.
Smola, and R. C. Williamson.Estimating the support
of a high-dimensional distribution. Neural Computa-
tion, 13, 2001, 1443-1471.
[4] J. Platt.
Sequential minimal optimization: A
fast algorithm for training support vector machines.
Technical Report MSR-TR-98-14, Microsoft Research,
1998a.
[5] Xiong, H. et al. K-means Clustering versus Val-
idation Measures: A Data Distribution Perspective.
KDD’06, August 20-23, 2006.

Figure 5. Anomaly Detection using Unsupervised SVM:
User Graph

Figure 6. Anomaly Detection using Unsupervised SVM:
Transaction Graph

signed points for the top 100 outliers.

For the Mahalanobis method, we get 0.7619 for
the user graph and 0.8277 for the transaction
graph. For the Unsupervised SVM method, we
get 0.7192 for the user graph and 0.8584 for the
transaction graph. These values are as large as
we expect them to be since by observations in the
Result section, detected anomalies appear to be
extreme points.

• For the Mahalanobis Distance based method, we
calculate A1 and A2 to be 0.02495 and 0.026316
respectively, which gives mDE = 0.025633.
Though this value is quite small, it comes out not
as a surprise given the simplicity of our method
and our small set of data.

