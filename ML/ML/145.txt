Neighborhood and Price Prediction for San Francisco Airbnb

Listings

Emily Tang

Departments of Computer Science, Psychology

Stanford University

emjtang@stanford.edu

Kunal Sangani

Department of Economics

Stanford University

ksangani@stanford.edu

1

Introduction

Since its founding in 2008, Airbnb has become a symbol of the sharing economy and has changed the way people travel. As
of 2015, the site advertises over 1.5 million listings in 34,000 cities around the world. In this study, we focus on listings in
San Francisco, where the company ﬁrst started.
Airbnb listings not only give us a window into how participants in the new sharing economy market their offerings, but also
give us a unique insight into the characteristics of a city and its neighborhoods. San Francisco in particular is known for its
diverse neighborhoods and cultural enclaves, and the city’s Airbnb listings give us an opportunity to catalogue similarities
and differences between neighborhoods.
Using the Inside Airbnb project’s complete set of listings available in San Francisco, we develop classiﬁers able to predict
a listing’s neighborhood and its price. We choose these two outputs for their potential applications: Predicting a listing’s
neighborhood gives us insight into the cultural elements visible through text, image, and amenities that might link neighbor-
hoods together, and could potentially be applied for a recommendation system (e.g. ”If you enjoyed your stay in the Haight
Ashbury, we recommend trying Alamo Square!”), and predicting the appropriate pricing of a listing, especially taking into
account features unique to the sharing economy of how hosts describe their offering, may be helpful in internal pricing tools
that Airbnb offers to its hosts.
The Inside Airbnb project provides data on the complete set of listings available in San Francisco. We input text features,
image features, and other information associated with each listing to an SVM classiﬁer to predict the (1) the neighborhood a
listing is in, and (2) the listing’s price (separated into discrete ranges). In the following sections, we explain the context for
this work, describe our dataset and methods for feature extraction and classiﬁcation, and present an analysis of our results.

2 Related Work

As far as we are aware from our literature search, there are no published studies that apply machine learning techniques to
data from the Inside Airbnb project. (The projects data has largely been used for visualizations of listing types in each city.)
Of a small number of papers that analyze Airbnb data, a relevant paper is by Lee et al. [3], in which the authors ﬁnd that
”social factors” like number of references, host response rate, and number of reviews, are even more important determinants
of room booking than conventional factors like price and amenities offered. The importance of such social factors suggests
that the ways in which hosts describe their listings and themselves may well be of large importance when determining price
visitors are willing to pay.
We also draw from the literatures on price prediction and neighborhood detection. One notable example of machine learning
used for neighborhood detection comes from a paper by Zhang et al. [1] that uses Foursquare user check-ins and semantic
information about places to detect neighborhoods in cities. The study ﬁnds for three urban areas—New York, San Francisco,
and London—that measuring homogeneity between places and the users frequenting them allows the authors to detect neigh-
borhoods as clusters, and that the neighborhoods identiﬁed match qualitative descriptions of the cities neighborhoods. The
objective of the neighborhood classiﬁcation part of our project is similar, in that we use data from several listings that fall
within neighborhoods to understand characteristics of each neighborhood and the diversity between them.
The literature on algorithmic pricing is more extensive. Hill [2] explains Airbnb’s AI-based dynamic pricing tools, discussing
how the original regression-based tool released in 2013, which used amenities of a listing and information about neighboring
properties to predict the appropriate pricing, was refashioned into the company’s most recent, reinforcement-learning based

1

Neighborhood and Price Prediction for San Francisco Airbnb

Listings

Emily Tang

Departments of Computer Science, Psychology

Stanford University

emjtang@stanford.edu

Kunal Sangani

Department of Economics

Stanford University

ksangani@stanford.edu

1

Introduction

Since its founding in 2008, Airbnb has become a symbol of the sharing economy and has changed the way people travel. As
of 2015, the site advertises over 1.5 million listings in 34,000 cities around the world. In this study, we focus on listings in
San Francisco, where the company ﬁrst started.
Airbnb listings not only give us a window into how participants in the new sharing economy market their offerings, but also
give us a unique insight into the characteristics of a city and its neighborhoods. San Francisco in particular is known for its
diverse neighborhoods and cultural enclaves, and the city’s Airbnb listings give us an opportunity to catalogue similarities
and differences between neighborhoods.
Using the Inside Airbnb project’s complete set of listings available in San Francisco, we develop classiﬁers able to predict
a listing’s neighborhood and its price. We choose these two outputs for their potential applications: Predicting a listing’s
neighborhood gives us insight into the cultural elements visible through text, image, and amenities that might link neighbor-
hoods together, and could potentially be applied for a recommendation system (e.g. ”If you enjoyed your stay in the Haight
Ashbury, we recommend trying Alamo Square!”), and predicting the appropriate pricing of a listing, especially taking into
account features unique to the sharing economy of how hosts describe their offering, may be helpful in internal pricing tools
that Airbnb offers to its hosts.
The Inside Airbnb project provides data on the complete set of listings available in San Francisco. We input text features,
image features, and other information associated with each listing to an SVM classiﬁer to predict the (1) the neighborhood a
listing is in, and (2) the listing’s price (separated into discrete ranges). In the following sections, we explain the context for
this work, describe our dataset and methods for feature extraction and classiﬁcation, and present an analysis of our results.

2 Related Work

As far as we are aware from our literature search, there are no published studies that apply machine learning techniques to
data from the Inside Airbnb project. (The projects data has largely been used for visualizations of listing types in each city.)
Of a small number of papers that analyze Airbnb data, a relevant paper is by Lee et al. [3], in which the authors ﬁnd that
”social factors” like number of references, host response rate, and number of reviews, are even more important determinants
of room booking than conventional factors like price and amenities offered. The importance of such social factors suggests
that the ways in which hosts describe their listings and themselves may well be of large importance when determining price
visitors are willing to pay.
We also draw from the literatures on price prediction and neighborhood detection. One notable example of machine learning
used for neighborhood detection comes from a paper by Zhang et al. [1] that uses Foursquare user check-ins and semantic
information about places to detect neighborhoods in cities. The study ﬁnds for three urban areas—New York, San Francisco,
and London—that measuring homogeneity between places and the users frequenting them allows the authors to detect neigh-
borhoods as clusters, and that the neighborhoods identiﬁed match qualitative descriptions of the cities neighborhoods. The
objective of the neighborhood classiﬁcation part of our project is similar, in that we use data from several listings that fall
within neighborhoods to understand characteristics of each neighborhood and the diversity between them.
The literature on algorithmic pricing is more extensive. Hill [2] explains Airbnb’s AI-based dynamic pricing tools, discussing
how the original regression-based tool released in 2013, which used amenities of a listing and information about neighboring
properties to predict the appropriate pricing, was refashioned into the company’s most recent, reinforcement-learning based

1

tool, Aerosolve. The tool uses microneighborhoods to inform pricing and uses user booking as a feedback tool to improve
future pricing tips. Our work is based on a freeze frame of data and so does not include any dynamic component, but the text
and image features we explore may add to the accuracy of Airbnb’s price tools as well as provide the basis for additional tools
on suggested listing marketing to property owners.
Finally, we draw from the literature on machine learning techniques. These references are covered in the methodology section.

3 Dataset

dataset
includes

of
7,029

Airbnb

listings

the
as

listings,
posted

”Inside
of

Airbnb”
2,

November

through
Francisco

available
in
San

Our
[4],
Each listing contains text information—a name, general de-
scription, a host bio, and a description of the space offered,
neighborhood, and local transit—as well as an image thumb-
nail (72 pixels per inch, usually 275x183) and several other
ﬁelds describing the amenities offered, number of bed- and
bathrooms, type of property, type of bed, square-footage of
the space, etc. The per-night price of each listing was also
included, as well as the neighborhood of the listing (of 37
possible SF neighborhoods) and a cumulative review score.
In order to reduce the burden on our multiclass classiﬁer for neighborhood prediction, we ﬁrst pre-process the data to exclude
listings that belonged to neighborhoods containing fewer than 70 listings (1% of the dataset). This reduces the number
of listings to 6764 and the number of neighborhoods to 27. The remaining listings are split into train, dev, and test sets
(80:10:10).

Figure 1: An example of an Airbnb listing

project
2015.

4 Feature Extraction & Methods

For each listing, we extract ﬁve sets of features: (1) listing information features, (2) multinomial bag of words features, (3)
multinomial word class features, (4) text sentiment features, and (5) visual features.
Listing information features include the property type (apartment, condo, bed & breakfast, dorm, house, etc.), the bed type
(futon, airbed, real bed, etc.), the host’s cancellation policy, and the number of beds, bedrooms, bathrooms, and guests
accommodated.
To create our bag of words features, we aggregate each listing’s name, summary, space, description, experiences offered,
notes, and host bio ﬁelds. We then use the NLTK package’s PorterStemmer to stem words to their root and choose the 1,000
stems that occur across the most entries in the test set. After ﬁltering out all stop words and all neighborhood words (to
prevent our neighborhood classiﬁer from simply using mentions of neighborhoods for prediction), we arrive at a list of 973
stems: the multinomial feature vectors were then calculated as the frequencies of each stem in each listing’s text, with the
sum of the features normalized to sum to one.
A closer look at the dataset reveals that words like comfortable and cozy might be used interchangeably between listings. In
order to address this, we handpick 9 word classes: people, nightlife, activities, style, accessibility, culture, nature, amenities,
and comfort. For instance, the ”style” word class includes the stems of the words modern, brand, victorian, style, decor,
gorgeous, marble, elegant, boutique, and trendy. Multinomial word class features are counts of the number of words belonging
to each of the nine word classes in each listing, with the sum of the features normalized to sum to one. For sentiment features,
we use the TextBlob package, which calculates the polarity of a segment of text by averaging the polarity of each word in the
text included in the package’s lexicon.
Finally, we download all listing images and extract visual features using the standard bag of words model in computer vision.
We randomly sample 100 images to create a dictionary of 1000 words. To create the dictionary, we extract Speeded Up
Robust Features (SURF) descriptors from the 100 images using OpenCV. SURF is a performant scale- and rotation-invariant
interest point detector and descriptor used to ﬁnd similarities between images [5]. We use K-means clustering to form 1000
clusters, or visual words for the dictionary. Using this visual word dictionary, we create feature vectors for each listing by
extracting SURF descriptors from the listings image. For each descriptor, we select the closest cluster in the dictionary. In
brief, the visual feature vector contains the frequency of each visual word in the listing image, and is normalized.
We input the features listed above into a Support Vector Machine (SVM) with a linear kernel, implemented using sklearn’s
SVM package. We discretize our listing prices into two buckets separated at the median (166.5), and develop two classiﬁers
to (1) predict the range in which a listing’s price falls and (2) predict the listing’s neighborhood. (Since the number of listings
per neighborhood is not identical across neighborhoods, we use sklearn svm’s ’balanced’ class weight setting.) Using l1

2

Neighborhood and Price Prediction for San Francisco Airbnb

Listings

Emily Tang

Departments of Computer Science, Psychology

Stanford University

emjtang@stanford.edu

Kunal Sangani

Department of Economics

Stanford University

ksangani@stanford.edu

1

Introduction

Since its founding in 2008, Airbnb has become a symbol of the sharing economy and has changed the way people travel. As
of 2015, the site advertises over 1.5 million listings in 34,000 cities around the world. In this study, we focus on listings in
San Francisco, where the company ﬁrst started.
Airbnb listings not only give us a window into how participants in the new sharing economy market their offerings, but also
give us a unique insight into the characteristics of a city and its neighborhoods. San Francisco in particular is known for its
diverse neighborhoods and cultural enclaves, and the city’s Airbnb listings give us an opportunity to catalogue similarities
and differences between neighborhoods.
Using the Inside Airbnb project’s complete set of listings available in San Francisco, we develop classiﬁers able to predict
a listing’s neighborhood and its price. We choose these two outputs for their potential applications: Predicting a listing’s
neighborhood gives us insight into the cultural elements visible through text, image, and amenities that might link neighbor-
hoods together, and could potentially be applied for a recommendation system (e.g. ”If you enjoyed your stay in the Haight
Ashbury, we recommend trying Alamo Square!”), and predicting the appropriate pricing of a listing, especially taking into
account features unique to the sharing economy of how hosts describe their offering, may be helpful in internal pricing tools
that Airbnb offers to its hosts.
The Inside Airbnb project provides data on the complete set of listings available in San Francisco. We input text features,
image features, and other information associated with each listing to an SVM classiﬁer to predict the (1) the neighborhood a
listing is in, and (2) the listing’s price (separated into discrete ranges). In the following sections, we explain the context for
this work, describe our dataset and methods for feature extraction and classiﬁcation, and present an analysis of our results.

2 Related Work

As far as we are aware from our literature search, there are no published studies that apply machine learning techniques to
data from the Inside Airbnb project. (The projects data has largely been used for visualizations of listing types in each city.)
Of a small number of papers that analyze Airbnb data, a relevant paper is by Lee et al. [3], in which the authors ﬁnd that
”social factors” like number of references, host response rate, and number of reviews, are even more important determinants
of room booking than conventional factors like price and amenities offered. The importance of such social factors suggests
that the ways in which hosts describe their listings and themselves may well be of large importance when determining price
visitors are willing to pay.
We also draw from the literatures on price prediction and neighborhood detection. One notable example of machine learning
used for neighborhood detection comes from a paper by Zhang et al. [1] that uses Foursquare user check-ins and semantic
information about places to detect neighborhoods in cities. The study ﬁnds for three urban areas—New York, San Francisco,
and London—that measuring homogeneity between places and the users frequenting them allows the authors to detect neigh-
borhoods as clusters, and that the neighborhoods identiﬁed match qualitative descriptions of the cities neighborhoods. The
objective of the neighborhood classiﬁcation part of our project is similar, in that we use data from several listings that fall
within neighborhoods to understand characteristics of each neighborhood and the diversity between them.
The literature on algorithmic pricing is more extensive. Hill [2] explains Airbnb’s AI-based dynamic pricing tools, discussing
how the original regression-based tool released in 2013, which used amenities of a listing and information about neighboring
properties to predict the appropriate pricing, was refashioned into the company’s most recent, reinforcement-learning based

1

tool, Aerosolve. The tool uses microneighborhoods to inform pricing and uses user booking as a feedback tool to improve
future pricing tips. Our work is based on a freeze frame of data and so does not include any dynamic component, but the text
and image features we explore may add to the accuracy of Airbnb’s price tools as well as provide the basis for additional tools
on suggested listing marketing to property owners.
Finally, we draw from the literature on machine learning techniques. These references are covered in the methodology section.

3 Dataset

dataset
includes

of
7,029

Airbnb

listings

the
as

listings,
posted

”Inside
of

Airbnb”
2,

November

through
Francisco

available
in
San

Our
[4],
Each listing contains text information—a name, general de-
scription, a host bio, and a description of the space offered,
neighborhood, and local transit—as well as an image thumb-
nail (72 pixels per inch, usually 275x183) and several other
ﬁelds describing the amenities offered, number of bed- and
bathrooms, type of property, type of bed, square-footage of
the space, etc. The per-night price of each listing was also
included, as well as the neighborhood of the listing (of 37
possible SF neighborhoods) and a cumulative review score.
In order to reduce the burden on our multiclass classiﬁer for neighborhood prediction, we ﬁrst pre-process the data to exclude
listings that belonged to neighborhoods containing fewer than 70 listings (1% of the dataset). This reduces the number
of listings to 6764 and the number of neighborhoods to 27. The remaining listings are split into train, dev, and test sets
(80:10:10).

Figure 1: An example of an Airbnb listing

project
2015.

4 Feature Extraction & Methods

For each listing, we extract ﬁve sets of features: (1) listing information features, (2) multinomial bag of words features, (3)
multinomial word class features, (4) text sentiment features, and (5) visual features.
Listing information features include the property type (apartment, condo, bed & breakfast, dorm, house, etc.), the bed type
(futon, airbed, real bed, etc.), the host’s cancellation policy, and the number of beds, bedrooms, bathrooms, and guests
accommodated.
To create our bag of words features, we aggregate each listing’s name, summary, space, description, experiences offered,
notes, and host bio ﬁelds. We then use the NLTK package’s PorterStemmer to stem words to their root and choose the 1,000
stems that occur across the most entries in the test set. After ﬁltering out all stop words and all neighborhood words (to
prevent our neighborhood classiﬁer from simply using mentions of neighborhoods for prediction), we arrive at a list of 973
stems: the multinomial feature vectors were then calculated as the frequencies of each stem in each listing’s text, with the
sum of the features normalized to sum to one.
A closer look at the dataset reveals that words like comfortable and cozy might be used interchangeably between listings. In
order to address this, we handpick 9 word classes: people, nightlife, activities, style, accessibility, culture, nature, amenities,
and comfort. For instance, the ”style” word class includes the stems of the words modern, brand, victorian, style, decor,
gorgeous, marble, elegant, boutique, and trendy. Multinomial word class features are counts of the number of words belonging
to each of the nine word classes in each listing, with the sum of the features normalized to sum to one. For sentiment features,
we use the TextBlob package, which calculates the polarity of a segment of text by averaging the polarity of each word in the
text included in the package’s lexicon.
Finally, we download all listing images and extract visual features using the standard bag of words model in computer vision.
We randomly sample 100 images to create a dictionary of 1000 words. To create the dictionary, we extract Speeded Up
Robust Features (SURF) descriptors from the 100 images using OpenCV. SURF is a performant scale- and rotation-invariant
interest point detector and descriptor used to ﬁnd similarities between images [5]. We use K-means clustering to form 1000
clusters, or visual words for the dictionary. Using this visual word dictionary, we create feature vectors for each listing by
extracting SURF descriptors from the listings image. For each descriptor, we select the closest cluster in the dictionary. In
brief, the visual feature vector contains the frequency of each visual word in the listing image, and is normalized.
We input the features listed above into a Support Vector Machine (SVM) with a linear kernel, implemented using sklearn’s
SVM package. We discretize our listing prices into two buckets separated at the median (166.5), and develop two classiﬁers
to (1) predict the range in which a listing’s price falls and (2) predict the listing’s neighborhood. (Since the number of listings
per neighborhood is not identical across neighborhoods, we use sklearn svm’s ’balanced’ class weight setting.) Using l1

2

regularization, our SVM optimizes the objective [6]

min
 ,w,b

1
2||w||2 + C

⇠i

mXi=1

s.t. y(i)(wT x(i) + b)   1   ⇠i,

⇠i   0, i = 1, ..., m

i = 1, ..., m

Note that the parameter C adjusts the sensitivity of the classiﬁer to outliers. In order to tune our parameter for C, we use
gridsearch and vary C from 0.001 to 100, 000. The value of C for which performance on the dev set is highest is then used
for the ﬁnal classiﬁer, which is trained on the train set and tested on our held-out test set.
We plot learning curves for each classiﬁer, and note that our model has high variance, indicating an overﬁtting problem.
To account for this problem, we use feature selection, speciﬁcally sklearn’s Recursive Feature Elimination (RFE). RFE is
an algorithm that recursively considers smaller subsets of all features, by removing features with the smallest weights after
training on a set of features for each iteration. Since RFE requires us to choose the number of features we want to ultimately
use, we conduct an experiment varying the number of features to select the best K, which is shown in our results below.
To better understand our classiﬁer, we run ablative analysis, by removing one component at a time, building our classiﬁer
using the train set, and seeing how our classiﬁer accuracy changes on the dev set. In addition, we run feature selection on
only the bag of words text features for both neighborhood and price predictions, because we are interested in comparing and
analyzing the words between neighborhoods and prices.

5 Results and Discussion

5.1 SVM Performance for Price and Neighborhood Prediction

After tuning the C parameters (example for price prediction model shown in Table 1) on the dev set, we test our models on a
held-out test set. The train and test accuracies, precision, and recall for each set of features, as well as for the entire system, are
presented in Tables 2 and 4 (for price prediction and neighborhood prediction, respectively). We note that the price prediction
model achieves a test accuracy of 81.2% using all features, which is signiﬁcantly higher than the chance accuracy of 50%.
For the neighborhood prediction model, we ﬁnd that, interestingly, the highest accuracy achieved is 42.2% using only the bag
of words text features. In neighborhood prediction, the chance accuracy baseline is 8%, which can be achieved by simply
predicting the neighborhood with the greatest number of examples.
The receiver operating characteristic (ROC) curve for price prediction is included in Fig. 2. The AUC reported is 0.883,
which suggests that the classiﬁer performs quite well in differentiating between true and false positives. (We also binarize
our labels for neighborhood prediction and generate 26 ROC curves—one for each neighborhood—but exclude this ﬁgure
for sake of space. In neighborhood prediction, the AUCs average 0.84 across neighborhoods.) We also inspect confusion
matrices for both the price and neighborhood classiﬁers.
In particular, use our confusion matrix from the neighborhood
classiﬁer to generate a heat map of prediction accuracy by neighborhood, as seen in Fig. 8. Note that prediction accuracies
tend to be highest for the most central neighborhoods (including the Mission, South of Market, and Castro/Upper Market).
This makes sense, since those neighborhoods are best known for their unique characteristics, and those characteristics might
be best detected in the features we extract.

5.2 Learning Curves

Since the train accuracies are incredibly high for neighborhood predictions, we plot the learning curves for both models, to
determine whether our model is overﬁtting. In Fig. 4, we see that gap between the training scores and the cross-validation
scores for price prediction is quite large, indicating a problem of high variance and thus overﬁtting. In Fig. 6, we note that
training scores for predicting neighborhoods has maxed out at nearly 1 and are extremely far from the cross-validation scores,
which also points to an issue with overﬁtting.

5.3 Feature Selection

There are two solutions to high variance: ﬁnding more training examples or reducing the number of features. Since our dataset
was limited to listings in San Francisco, ﬁnding more training examples was not possible. So, to help mediate overﬁtting,
we use feature selection, speciﬁcally sklearns RFE algorithm, to reduce the number of features. Because recursive feature
elimination (RFE) requires us to select the end k number of features, we conduct an experiment to determine the best k. We
vary the number of features, run RFE on our models for each number of features, and test the models on our dev set. The
resulting train and dev accuracies from this experiment are plotted in Fig. 3 and 7 (for price and neighborhood prediction,
respectively).

3

Neighborhood and Price Prediction for San Francisco Airbnb

Listings

Emily Tang

Departments of Computer Science, Psychology

Stanford University

emjtang@stanford.edu

Kunal Sangani

Department of Economics

Stanford University

ksangani@stanford.edu

1

Introduction

Since its founding in 2008, Airbnb has become a symbol of the sharing economy and has changed the way people travel. As
of 2015, the site advertises over 1.5 million listings in 34,000 cities around the world. In this study, we focus on listings in
San Francisco, where the company ﬁrst started.
Airbnb listings not only give us a window into how participants in the new sharing economy market their offerings, but also
give us a unique insight into the characteristics of a city and its neighborhoods. San Francisco in particular is known for its
diverse neighborhoods and cultural enclaves, and the city’s Airbnb listings give us an opportunity to catalogue similarities
and differences between neighborhoods.
Using the Inside Airbnb project’s complete set of listings available in San Francisco, we develop classiﬁers able to predict
a listing’s neighborhood and its price. We choose these two outputs for their potential applications: Predicting a listing’s
neighborhood gives us insight into the cultural elements visible through text, image, and amenities that might link neighbor-
hoods together, and could potentially be applied for a recommendation system (e.g. ”If you enjoyed your stay in the Haight
Ashbury, we recommend trying Alamo Square!”), and predicting the appropriate pricing of a listing, especially taking into
account features unique to the sharing economy of how hosts describe their offering, may be helpful in internal pricing tools
that Airbnb offers to its hosts.
The Inside Airbnb project provides data on the complete set of listings available in San Francisco. We input text features,
image features, and other information associated with each listing to an SVM classiﬁer to predict the (1) the neighborhood a
listing is in, and (2) the listing’s price (separated into discrete ranges). In the following sections, we explain the context for
this work, describe our dataset and methods for feature extraction and classiﬁcation, and present an analysis of our results.

2 Related Work

As far as we are aware from our literature search, there are no published studies that apply machine learning techniques to
data from the Inside Airbnb project. (The projects data has largely been used for visualizations of listing types in each city.)
Of a small number of papers that analyze Airbnb data, a relevant paper is by Lee et al. [3], in which the authors ﬁnd that
”social factors” like number of references, host response rate, and number of reviews, are even more important determinants
of room booking than conventional factors like price and amenities offered. The importance of such social factors suggests
that the ways in which hosts describe their listings and themselves may well be of large importance when determining price
visitors are willing to pay.
We also draw from the literatures on price prediction and neighborhood detection. One notable example of machine learning
used for neighborhood detection comes from a paper by Zhang et al. [1] that uses Foursquare user check-ins and semantic
information about places to detect neighborhoods in cities. The study ﬁnds for three urban areas—New York, San Francisco,
and London—that measuring homogeneity between places and the users frequenting them allows the authors to detect neigh-
borhoods as clusters, and that the neighborhoods identiﬁed match qualitative descriptions of the cities neighborhoods. The
objective of the neighborhood classiﬁcation part of our project is similar, in that we use data from several listings that fall
within neighborhoods to understand characteristics of each neighborhood and the diversity between them.
The literature on algorithmic pricing is more extensive. Hill [2] explains Airbnb’s AI-based dynamic pricing tools, discussing
how the original regression-based tool released in 2013, which used amenities of a listing and information about neighboring
properties to predict the appropriate pricing, was refashioned into the company’s most recent, reinforcement-learning based

1

tool, Aerosolve. The tool uses microneighborhoods to inform pricing and uses user booking as a feedback tool to improve
future pricing tips. Our work is based on a freeze frame of data and so does not include any dynamic component, but the text
and image features we explore may add to the accuracy of Airbnb’s price tools as well as provide the basis for additional tools
on suggested listing marketing to property owners.
Finally, we draw from the literature on machine learning techniques. These references are covered in the methodology section.

3 Dataset

dataset
includes

of
7,029

Airbnb

listings

the
as

listings,
posted

”Inside
of

Airbnb”
2,

November

through
Francisco

available
in
San

Our
[4],
Each listing contains text information—a name, general de-
scription, a host bio, and a description of the space offered,
neighborhood, and local transit—as well as an image thumb-
nail (72 pixels per inch, usually 275x183) and several other
ﬁelds describing the amenities offered, number of bed- and
bathrooms, type of property, type of bed, square-footage of
the space, etc. The per-night price of each listing was also
included, as well as the neighborhood of the listing (of 37
possible SF neighborhoods) and a cumulative review score.
In order to reduce the burden on our multiclass classiﬁer for neighborhood prediction, we ﬁrst pre-process the data to exclude
listings that belonged to neighborhoods containing fewer than 70 listings (1% of the dataset). This reduces the number
of listings to 6764 and the number of neighborhoods to 27. The remaining listings are split into train, dev, and test sets
(80:10:10).

Figure 1: An example of an Airbnb listing

project
2015.

4 Feature Extraction & Methods

For each listing, we extract ﬁve sets of features: (1) listing information features, (2) multinomial bag of words features, (3)
multinomial word class features, (4) text sentiment features, and (5) visual features.
Listing information features include the property type (apartment, condo, bed & breakfast, dorm, house, etc.), the bed type
(futon, airbed, real bed, etc.), the host’s cancellation policy, and the number of beds, bedrooms, bathrooms, and guests
accommodated.
To create our bag of words features, we aggregate each listing’s name, summary, space, description, experiences offered,
notes, and host bio ﬁelds. We then use the NLTK package’s PorterStemmer to stem words to their root and choose the 1,000
stems that occur across the most entries in the test set. After ﬁltering out all stop words and all neighborhood words (to
prevent our neighborhood classiﬁer from simply using mentions of neighborhoods for prediction), we arrive at a list of 973
stems: the multinomial feature vectors were then calculated as the frequencies of each stem in each listing’s text, with the
sum of the features normalized to sum to one.
A closer look at the dataset reveals that words like comfortable and cozy might be used interchangeably between listings. In
order to address this, we handpick 9 word classes: people, nightlife, activities, style, accessibility, culture, nature, amenities,
and comfort. For instance, the ”style” word class includes the stems of the words modern, brand, victorian, style, decor,
gorgeous, marble, elegant, boutique, and trendy. Multinomial word class features are counts of the number of words belonging
to each of the nine word classes in each listing, with the sum of the features normalized to sum to one. For sentiment features,
we use the TextBlob package, which calculates the polarity of a segment of text by averaging the polarity of each word in the
text included in the package’s lexicon.
Finally, we download all listing images and extract visual features using the standard bag of words model in computer vision.
We randomly sample 100 images to create a dictionary of 1000 words. To create the dictionary, we extract Speeded Up
Robust Features (SURF) descriptors from the 100 images using OpenCV. SURF is a performant scale- and rotation-invariant
interest point detector and descriptor used to ﬁnd similarities between images [5]. We use K-means clustering to form 1000
clusters, or visual words for the dictionary. Using this visual word dictionary, we create feature vectors for each listing by
extracting SURF descriptors from the listings image. For each descriptor, we select the closest cluster in the dictionary. In
brief, the visual feature vector contains the frequency of each visual word in the listing image, and is normalized.
We input the features listed above into a Support Vector Machine (SVM) with a linear kernel, implemented using sklearn’s
SVM package. We discretize our listing prices into two buckets separated at the median (166.5), and develop two classiﬁers
to (1) predict the range in which a listing’s price falls and (2) predict the listing’s neighborhood. (Since the number of listings
per neighborhood is not identical across neighborhoods, we use sklearn svm’s ’balanced’ class weight setting.) Using l1

2

regularization, our SVM optimizes the objective [6]

min
 ,w,b

1
2||w||2 + C

⇠i

mXi=1

s.t. y(i)(wT x(i) + b)   1   ⇠i,

⇠i   0, i = 1, ..., m

i = 1, ..., m

Note that the parameter C adjusts the sensitivity of the classiﬁer to outliers. In order to tune our parameter for C, we use
gridsearch and vary C from 0.001 to 100, 000. The value of C for which performance on the dev set is highest is then used
for the ﬁnal classiﬁer, which is trained on the train set and tested on our held-out test set.
We plot learning curves for each classiﬁer, and note that our model has high variance, indicating an overﬁtting problem.
To account for this problem, we use feature selection, speciﬁcally sklearn’s Recursive Feature Elimination (RFE). RFE is
an algorithm that recursively considers smaller subsets of all features, by removing features with the smallest weights after
training on a set of features for each iteration. Since RFE requires us to choose the number of features we want to ultimately
use, we conduct an experiment varying the number of features to select the best K, which is shown in our results below.
To better understand our classiﬁer, we run ablative analysis, by removing one component at a time, building our classiﬁer
using the train set, and seeing how our classiﬁer accuracy changes on the dev set. In addition, we run feature selection on
only the bag of words text features for both neighborhood and price predictions, because we are interested in comparing and
analyzing the words between neighborhoods and prices.

5 Results and Discussion

5.1 SVM Performance for Price and Neighborhood Prediction

After tuning the C parameters (example for price prediction model shown in Table 1) on the dev set, we test our models on a
held-out test set. The train and test accuracies, precision, and recall for each set of features, as well as for the entire system, are
presented in Tables 2 and 4 (for price prediction and neighborhood prediction, respectively). We note that the price prediction
model achieves a test accuracy of 81.2% using all features, which is signiﬁcantly higher than the chance accuracy of 50%.
For the neighborhood prediction model, we ﬁnd that, interestingly, the highest accuracy achieved is 42.2% using only the bag
of words text features. In neighborhood prediction, the chance accuracy baseline is 8%, which can be achieved by simply
predicting the neighborhood with the greatest number of examples.
The receiver operating characteristic (ROC) curve for price prediction is included in Fig. 2. The AUC reported is 0.883,
which suggests that the classiﬁer performs quite well in differentiating between true and false positives. (We also binarize
our labels for neighborhood prediction and generate 26 ROC curves—one for each neighborhood—but exclude this ﬁgure
for sake of space. In neighborhood prediction, the AUCs average 0.84 across neighborhoods.) We also inspect confusion
matrices for both the price and neighborhood classiﬁers.
In particular, use our confusion matrix from the neighborhood
classiﬁer to generate a heat map of prediction accuracy by neighborhood, as seen in Fig. 8. Note that prediction accuracies
tend to be highest for the most central neighborhoods (including the Mission, South of Market, and Castro/Upper Market).
This makes sense, since those neighborhoods are best known for their unique characteristics, and those characteristics might
be best detected in the features we extract.

5.2 Learning Curves

Since the train accuracies are incredibly high for neighborhood predictions, we plot the learning curves for both models, to
determine whether our model is overﬁtting. In Fig. 4, we see that gap between the training scores and the cross-validation
scores for price prediction is quite large, indicating a problem of high variance and thus overﬁtting. In Fig. 6, we note that
training scores for predicting neighborhoods has maxed out at nearly 1 and are extremely far from the cross-validation scores,
which also points to an issue with overﬁtting.

5.3 Feature Selection

There are two solutions to high variance: ﬁnding more training examples or reducing the number of features. Since our dataset
was limited to listings in San Francisco, ﬁnding more training examples was not possible. So, to help mediate overﬁtting,
we use feature selection, speciﬁcally sklearns RFE algorithm, to reduce the number of features. Because recursive feature
elimination (RFE) requires us to select the end k number of features, we conduct an experiment to determine the best k. We
vary the number of features, run RFE on our models for each number of features, and test the models on our dev set. The
resulting train and dev accuracies from this experiment are plotted in Fig. 3 and 7 (for price and neighborhood prediction,
respectively).

3

From Fig. 3, we see that selecting 800 features for RFE gives us the best dev accuracy for prices, and that selecting 150
features does so for neighborhoods. We build our models, run RFE using the best number of features, and plot the learning
curves again to determine whether the overﬁtting problems for neighborhoods and prices have been reduced. For our price
prediction model, when comparing the two learning curves in Fig. 4 and 5, we see that the train accuracy has decreased, and
approaches the dev accuracy curve. In addition, we see that the dev accuracy after feature selection remains very close to
81%. Putting these together, we conclude that feature selection slightly alleviate overﬁtting of our price prediction model.
Comparing the two learning curves for our neighborhood prediction model, we ﬁnd similar improvements. After feature
selection on 150 components, the training accuracy is no longer maxed out at 1, and has decreased to around 0.8. (We exclude
our learning curve after running RFE for sake of space.) In addition, we ﬁnd that feature selection actually improves our
accuracy slightly from 42.3% to 43.1%. Finally, we notice that the cross validation score increases as number of training
samples increases. This upward trend suggests that, if more training examples were available, they may have helped improve
our classiﬁer.

5.4 Ablative Analysis

To determine which component of our ﬁve features accounts for the most improvement in our SVM models, we run ablative
analysis, and remove one component at a time to see how our classiﬁer accuracy on the dev set changes. For price prediction,
we see from Table 3 that the listing information features are the most signiﬁcant factor. This makes sense because housing
prices are very much determined by the property type and size, the number of bedrooms and bathrooms, and so on. For
neighborhood prediction, we see from Table 5 that the Bag of Words text features are the most important component. This
suggests that neighborhoods are quite diverse and are hard to capture from the listing information, sentiment, or images, but
that the richness of the word choice used to describe the surroundings of the neighborhoods (such as vibrant, bars, nightlife,
museums) is best at differentiating between neighborhoods.

5.5 Comparing Prices and Neighborhoods

Interested in seeing how word importance differed across price and neighborhood models, we run feature selection on just
the bag of words features. We discover that the word features that remain after RFE for price prediction are actually a subset
of the word features that remain for neighborhood prediction. Most of the words important in both prices and neighborhoods
describe the house and its interior, such as patio, remodel, luxurious, clean, modern, and cozy.
We can intuitively see that these words, though they describe an individual listing home, could also be applied to neighbor-
hoods that include housing units of similar style and age. Thus, the words that describe a listing can also distinguish one
neighborhood from another. On the other hand, the words found to be important in only neighborhood prediction have a
larger scope and are related to culture and larger surroundings. These words include vibrant, cafe, church, peace, bustling,
culture, museum, and history.

6 Conclusion and Future Work

Our analysis of the Inside Airbnb project’s listings for San Francisco shows that we can successfully predict neighborhood
and price range using an array of features extracted from listings. While our classiﬁers initially suffer from high variance, our
feature selection at least partially remedies this overﬁtting. Both classiﬁers we develop perform signiﬁcantly above baseline,
and suggest that listing information, text features, and more can be harnessed effectively for predicting neighborhood and
price.
With more time and computational resources, we hope to develop our model for price prediction. The results we’ve presented
here split prices into two discrete ranges. (In our work on this project, we also developed a classiﬁer to predict price across
four buckets, split at the data’s quartiles, and found encouraging accuracy rates.) To provide meaningful price tools to Airbnb
users, we would need to discretize our price range into smaller buckets to offer targeted and narrow price range suggestions.
Our ﬁnal goal in neighborhood prediction is to provide a recommendation system to Airbnb users as mentioned in this paper’s
introduction. Our work in this paper established that listing text is rich enough to allow us to predict in which neighborhood
a listing belongs. In future work, we hope to take advantage of this diversity of word choice to cluster neighborhoods with
similar cultures or characteristics together. We may even be able to do this across cities, as the Inside Airbnb project provides
data for several cities around the world, and catalogue both cultural differences across cities and neighborhoods from city to
city that are somewhat similar.
Finally, we notice in our analysis that there is signiﬁcant overlap between the features that predict neighborhood and price. In
future work, it would be interesting to understand the correlations between neighborhoods and prices more deeply. Upscale
neighborhoods naturally have higher priced listings, and tracing out the qualities of neighborhoods that encourage consumers
to pay higher prices may be an important application for real estate / urban planning.

4

Neighborhood and Price Prediction for San Francisco Airbnb

Listings

Emily Tang

Departments of Computer Science, Psychology

Stanford University

emjtang@stanford.edu

Kunal Sangani

Department of Economics

Stanford University

ksangani@stanford.edu

1

Introduction

Since its founding in 2008, Airbnb has become a symbol of the sharing economy and has changed the way people travel. As
of 2015, the site advertises over 1.5 million listings in 34,000 cities around the world. In this study, we focus on listings in
San Francisco, where the company ﬁrst started.
Airbnb listings not only give us a window into how participants in the new sharing economy market their offerings, but also
give us a unique insight into the characteristics of a city and its neighborhoods. San Francisco in particular is known for its
diverse neighborhoods and cultural enclaves, and the city’s Airbnb listings give us an opportunity to catalogue similarities
and differences between neighborhoods.
Using the Inside Airbnb project’s complete set of listings available in San Francisco, we develop classiﬁers able to predict
a listing’s neighborhood and its price. We choose these two outputs for their potential applications: Predicting a listing’s
neighborhood gives us insight into the cultural elements visible through text, image, and amenities that might link neighbor-
hoods together, and could potentially be applied for a recommendation system (e.g. ”If you enjoyed your stay in the Haight
Ashbury, we recommend trying Alamo Square!”), and predicting the appropriate pricing of a listing, especially taking into
account features unique to the sharing economy of how hosts describe their offering, may be helpful in internal pricing tools
that Airbnb offers to its hosts.
The Inside Airbnb project provides data on the complete set of listings available in San Francisco. We input text features,
image features, and other information associated with each listing to an SVM classiﬁer to predict the (1) the neighborhood a
listing is in, and (2) the listing’s price (separated into discrete ranges). In the following sections, we explain the context for
this work, describe our dataset and methods for feature extraction and classiﬁcation, and present an analysis of our results.

2 Related Work

As far as we are aware from our literature search, there are no published studies that apply machine learning techniques to
data from the Inside Airbnb project. (The projects data has largely been used for visualizations of listing types in each city.)
Of a small number of papers that analyze Airbnb data, a relevant paper is by Lee et al. [3], in which the authors ﬁnd that
”social factors” like number of references, host response rate, and number of reviews, are even more important determinants
of room booking than conventional factors like price and amenities offered. The importance of such social factors suggests
that the ways in which hosts describe their listings and themselves may well be of large importance when determining price
visitors are willing to pay.
We also draw from the literatures on price prediction and neighborhood detection. One notable example of machine learning
used for neighborhood detection comes from a paper by Zhang et al. [1] that uses Foursquare user check-ins and semantic
information about places to detect neighborhoods in cities. The study ﬁnds for three urban areas—New York, San Francisco,
and London—that measuring homogeneity between places and the users frequenting them allows the authors to detect neigh-
borhoods as clusters, and that the neighborhoods identiﬁed match qualitative descriptions of the cities neighborhoods. The
objective of the neighborhood classiﬁcation part of our project is similar, in that we use data from several listings that fall
within neighborhoods to understand characteristics of each neighborhood and the diversity between them.
The literature on algorithmic pricing is more extensive. Hill [2] explains Airbnb’s AI-based dynamic pricing tools, discussing
how the original regression-based tool released in 2013, which used amenities of a listing and information about neighboring
properties to predict the appropriate pricing, was refashioned into the company’s most recent, reinforcement-learning based

1

tool, Aerosolve. The tool uses microneighborhoods to inform pricing and uses user booking as a feedback tool to improve
future pricing tips. Our work is based on a freeze frame of data and so does not include any dynamic component, but the text
and image features we explore may add to the accuracy of Airbnb’s price tools as well as provide the basis for additional tools
on suggested listing marketing to property owners.
Finally, we draw from the literature on machine learning techniques. These references are covered in the methodology section.

3 Dataset

dataset
includes

of
7,029

Airbnb

listings

the
as

listings,
posted

”Inside
of

Airbnb”
2,

November

through
Francisco

available
in
San

Our
[4],
Each listing contains text information—a name, general de-
scription, a host bio, and a description of the space offered,
neighborhood, and local transit—as well as an image thumb-
nail (72 pixels per inch, usually 275x183) and several other
ﬁelds describing the amenities offered, number of bed- and
bathrooms, type of property, type of bed, square-footage of
the space, etc. The per-night price of each listing was also
included, as well as the neighborhood of the listing (of 37
possible SF neighborhoods) and a cumulative review score.
In order to reduce the burden on our multiclass classiﬁer for neighborhood prediction, we ﬁrst pre-process the data to exclude
listings that belonged to neighborhoods containing fewer than 70 listings (1% of the dataset). This reduces the number
of listings to 6764 and the number of neighborhoods to 27. The remaining listings are split into train, dev, and test sets
(80:10:10).

Figure 1: An example of an Airbnb listing

project
2015.

4 Feature Extraction & Methods

For each listing, we extract ﬁve sets of features: (1) listing information features, (2) multinomial bag of words features, (3)
multinomial word class features, (4) text sentiment features, and (5) visual features.
Listing information features include the property type (apartment, condo, bed & breakfast, dorm, house, etc.), the bed type
(futon, airbed, real bed, etc.), the host’s cancellation policy, and the number of beds, bedrooms, bathrooms, and guests
accommodated.
To create our bag of words features, we aggregate each listing’s name, summary, space, description, experiences offered,
notes, and host bio ﬁelds. We then use the NLTK package’s PorterStemmer to stem words to their root and choose the 1,000
stems that occur across the most entries in the test set. After ﬁltering out all stop words and all neighborhood words (to
prevent our neighborhood classiﬁer from simply using mentions of neighborhoods for prediction), we arrive at a list of 973
stems: the multinomial feature vectors were then calculated as the frequencies of each stem in each listing’s text, with the
sum of the features normalized to sum to one.
A closer look at the dataset reveals that words like comfortable and cozy might be used interchangeably between listings. In
order to address this, we handpick 9 word classes: people, nightlife, activities, style, accessibility, culture, nature, amenities,
and comfort. For instance, the ”style” word class includes the stems of the words modern, brand, victorian, style, decor,
gorgeous, marble, elegant, boutique, and trendy. Multinomial word class features are counts of the number of words belonging
to each of the nine word classes in each listing, with the sum of the features normalized to sum to one. For sentiment features,
we use the TextBlob package, which calculates the polarity of a segment of text by averaging the polarity of each word in the
text included in the package’s lexicon.
Finally, we download all listing images and extract visual features using the standard bag of words model in computer vision.
We randomly sample 100 images to create a dictionary of 1000 words. To create the dictionary, we extract Speeded Up
Robust Features (SURF) descriptors from the 100 images using OpenCV. SURF is a performant scale- and rotation-invariant
interest point detector and descriptor used to ﬁnd similarities between images [5]. We use K-means clustering to form 1000
clusters, or visual words for the dictionary. Using this visual word dictionary, we create feature vectors for each listing by
extracting SURF descriptors from the listings image. For each descriptor, we select the closest cluster in the dictionary. In
brief, the visual feature vector contains the frequency of each visual word in the listing image, and is normalized.
We input the features listed above into a Support Vector Machine (SVM) with a linear kernel, implemented using sklearn’s
SVM package. We discretize our listing prices into two buckets separated at the median (166.5), and develop two classiﬁers
to (1) predict the range in which a listing’s price falls and (2) predict the listing’s neighborhood. (Since the number of listings
per neighborhood is not identical across neighborhoods, we use sklearn svm’s ’balanced’ class weight setting.) Using l1

2

regularization, our SVM optimizes the objective [6]

min
 ,w,b

1
2||w||2 + C

⇠i

mXi=1

s.t. y(i)(wT x(i) + b)   1   ⇠i,

⇠i   0, i = 1, ..., m

i = 1, ..., m

Note that the parameter C adjusts the sensitivity of the classiﬁer to outliers. In order to tune our parameter for C, we use
gridsearch and vary C from 0.001 to 100, 000. The value of C for which performance on the dev set is highest is then used
for the ﬁnal classiﬁer, which is trained on the train set and tested on our held-out test set.
We plot learning curves for each classiﬁer, and note that our model has high variance, indicating an overﬁtting problem.
To account for this problem, we use feature selection, speciﬁcally sklearn’s Recursive Feature Elimination (RFE). RFE is
an algorithm that recursively considers smaller subsets of all features, by removing features with the smallest weights after
training on a set of features for each iteration. Since RFE requires us to choose the number of features we want to ultimately
use, we conduct an experiment varying the number of features to select the best K, which is shown in our results below.
To better understand our classiﬁer, we run ablative analysis, by removing one component at a time, building our classiﬁer
using the train set, and seeing how our classiﬁer accuracy changes on the dev set. In addition, we run feature selection on
only the bag of words text features for both neighborhood and price predictions, because we are interested in comparing and
analyzing the words between neighborhoods and prices.

5 Results and Discussion

5.1 SVM Performance for Price and Neighborhood Prediction

After tuning the C parameters (example for price prediction model shown in Table 1) on the dev set, we test our models on a
held-out test set. The train and test accuracies, precision, and recall for each set of features, as well as for the entire system, are
presented in Tables 2 and 4 (for price prediction and neighborhood prediction, respectively). We note that the price prediction
model achieves a test accuracy of 81.2% using all features, which is signiﬁcantly higher than the chance accuracy of 50%.
For the neighborhood prediction model, we ﬁnd that, interestingly, the highest accuracy achieved is 42.2% using only the bag
of words text features. In neighborhood prediction, the chance accuracy baseline is 8%, which can be achieved by simply
predicting the neighborhood with the greatest number of examples.
The receiver operating characteristic (ROC) curve for price prediction is included in Fig. 2. The AUC reported is 0.883,
which suggests that the classiﬁer performs quite well in differentiating between true and false positives. (We also binarize
our labels for neighborhood prediction and generate 26 ROC curves—one for each neighborhood—but exclude this ﬁgure
for sake of space. In neighborhood prediction, the AUCs average 0.84 across neighborhoods.) We also inspect confusion
matrices for both the price and neighborhood classiﬁers.
In particular, use our confusion matrix from the neighborhood
classiﬁer to generate a heat map of prediction accuracy by neighborhood, as seen in Fig. 8. Note that prediction accuracies
tend to be highest for the most central neighborhoods (including the Mission, South of Market, and Castro/Upper Market).
This makes sense, since those neighborhoods are best known for their unique characteristics, and those characteristics might
be best detected in the features we extract.

5.2 Learning Curves

Since the train accuracies are incredibly high for neighborhood predictions, we plot the learning curves for both models, to
determine whether our model is overﬁtting. In Fig. 4, we see that gap between the training scores and the cross-validation
scores for price prediction is quite large, indicating a problem of high variance and thus overﬁtting. In Fig. 6, we note that
training scores for predicting neighborhoods has maxed out at nearly 1 and are extremely far from the cross-validation scores,
which also points to an issue with overﬁtting.

5.3 Feature Selection

There are two solutions to high variance: ﬁnding more training examples or reducing the number of features. Since our dataset
was limited to listings in San Francisco, ﬁnding more training examples was not possible. So, to help mediate overﬁtting,
we use feature selection, speciﬁcally sklearns RFE algorithm, to reduce the number of features. Because recursive feature
elimination (RFE) requires us to select the end k number of features, we conduct an experiment to determine the best k. We
vary the number of features, run RFE on our models for each number of features, and test the models on our dev set. The
resulting train and dev accuracies from this experiment are plotted in Fig. 3 and 7 (for price and neighborhood prediction,
respectively).

3

From Fig. 3, we see that selecting 800 features for RFE gives us the best dev accuracy for prices, and that selecting 150
features does so for neighborhoods. We build our models, run RFE using the best number of features, and plot the learning
curves again to determine whether the overﬁtting problems for neighborhoods and prices have been reduced. For our price
prediction model, when comparing the two learning curves in Fig. 4 and 5, we see that the train accuracy has decreased, and
approaches the dev accuracy curve. In addition, we see that the dev accuracy after feature selection remains very close to
81%. Putting these together, we conclude that feature selection slightly alleviate overﬁtting of our price prediction model.
Comparing the two learning curves for our neighborhood prediction model, we ﬁnd similar improvements. After feature
selection on 150 components, the training accuracy is no longer maxed out at 1, and has decreased to around 0.8. (We exclude
our learning curve after running RFE for sake of space.) In addition, we ﬁnd that feature selection actually improves our
accuracy slightly from 42.3% to 43.1%. Finally, we notice that the cross validation score increases as number of training
samples increases. This upward trend suggests that, if more training examples were available, they may have helped improve
our classiﬁer.

5.4 Ablative Analysis

To determine which component of our ﬁve features accounts for the most improvement in our SVM models, we run ablative
analysis, and remove one component at a time to see how our classiﬁer accuracy on the dev set changes. For price prediction,
we see from Table 3 that the listing information features are the most signiﬁcant factor. This makes sense because housing
prices are very much determined by the property type and size, the number of bedrooms and bathrooms, and so on. For
neighborhood prediction, we see from Table 5 that the Bag of Words text features are the most important component. This
suggests that neighborhoods are quite diverse and are hard to capture from the listing information, sentiment, or images, but
that the richness of the word choice used to describe the surroundings of the neighborhoods (such as vibrant, bars, nightlife,
museums) is best at differentiating between neighborhoods.

5.5 Comparing Prices and Neighborhoods

Interested in seeing how word importance differed across price and neighborhood models, we run feature selection on just
the bag of words features. We discover that the word features that remain after RFE for price prediction are actually a subset
of the word features that remain for neighborhood prediction. Most of the words important in both prices and neighborhoods
describe the house and its interior, such as patio, remodel, luxurious, clean, modern, and cozy.
We can intuitively see that these words, though they describe an individual listing home, could also be applied to neighbor-
hoods that include housing units of similar style and age. Thus, the words that describe a listing can also distinguish one
neighborhood from another. On the other hand, the words found to be important in only neighborhood prediction have a
larger scope and are related to culture and larger surroundings. These words include vibrant, cafe, church, peace, bustling,
culture, museum, and history.

6 Conclusion and Future Work

Our analysis of the Inside Airbnb project’s listings for San Francisco shows that we can successfully predict neighborhood
and price range using an array of features extracted from listings. While our classiﬁers initially suffer from high variance, our
feature selection at least partially remedies this overﬁtting. Both classiﬁers we develop perform signiﬁcantly above baseline,
and suggest that listing information, text features, and more can be harnessed effectively for predicting neighborhood and
price.
With more time and computational resources, we hope to develop our model for price prediction. The results we’ve presented
here split prices into two discrete ranges. (In our work on this project, we also developed a classiﬁer to predict price across
four buckets, split at the data’s quartiles, and found encouraging accuracy rates.) To provide meaningful price tools to Airbnb
users, we would need to discretize our price range into smaller buckets to offer targeted and narrow price range suggestions.
Our ﬁnal goal in neighborhood prediction is to provide a recommendation system to Airbnb users as mentioned in this paper’s
introduction. Our work in this paper established that listing text is rich enough to allow us to predict in which neighborhood
a listing belongs. In future work, we hope to take advantage of this diversity of word choice to cluster neighborhoods with
similar cultures or characteristics together. We may even be able to do this across cities, as the Inside Airbnb project provides
data for several cities around the world, and catalogue both cultural differences across cities and neighborhoods from city to
city that are somewhat similar.
Finally, we notice in our analysis that there is signiﬁcant overlap between the features that predict neighborhood and price. In
future work, it would be interesting to understand the correlations between neighborhoods and prices more deeply. Upscale
neighborhoods naturally have higher priced listings, and tracing out the qualities of neighborhoods that encourage consumers
to pay higher prices may be an important application for real estate / urban planning.

4

Neighborhood Prediction

Price Prediction

 

S
V
M
m
o
d
e
l
 
f
o
r
 
p
r
i
c
e
 
p
r
e
d
i
c
t
i
o
n

T
a
b
l
e
 
1

.
 

 

 

T
u
n
i
n
g
C
p
a
r
a
m
e
t
e
r
 
o
n

 

T
a
b
l
e
 
2

.
 

 

T
r
a
i
n
a
n
d
 
t
e
s
t
 

a
c
c
u
r
a
c
i
e
s
,
 

p
r
e
c
i
s
i
o
n

,
 

a
n
d
 
r
e
c
a
l
l
 
o
f
 
S
V
M

 
f
o
r
 
p
r
i
c
e
 
p
r
e
d

i
c
t
i
o
n

T
a
b

l
e
 
3

.
 

A
b

l
a
t
i
v
e
 
a
n
a
l
y
s
i
s
 
f
o
r
 
p
r
i
c
e
 
p
r
e
d

i
c
t
i
o
n

F
e
a

t

 

u
r
e
S
e
e
c
t
i

l

o
n

 
f

o
r
 

i

N
e
g
h
b
o
r
h
o
o
d
P
r
e
d
c
t
i

 

i

o
n

 
(

 

S
V
M
L
n
e
a
r
 

i

K
e
r
n
e
l
)

F
i
g
u
r
e
 
6

.
 

L
e
a
r
n
i
n
g

 
c
u
r
v
e
 
f
o
r
 
n
e
i
g
h
b
o
r
h
o
o
d
p
r
e
d
i
c
t
i
o
n

 

F
i
g
u
r
e
 
7

.
 

R
e
s
u

l
t
s
 
f
r
o
m
R
F
E

 

 
f
o
r
 
n
e
i
g
h
b
o
r
h
o
o
d
p
r
e
d

 

i
c
t
i
o
n

T
a
b

l
e
 
5

.
 

A
b

l
a
t
i
v
e
 
a
n
a
l
y
s
i
s
 
f
o
r
 
p
r
i
c
e
 
p
r
e
d

i
c
t
i
o
n

T
a
b
l
e
 
4

.
 

 

T
r
a
i
n
a
n
d
 
t
e
s
t
 

a
c
c
u
r
a
c
i
e
s
,
 

p
r
e
c
i
s
i
o
n

,
 

a
n
d
 
r
e
c
a
l
l
 
o
f
 
S
V
M

 
f
o
r
 
n
e
i
g
h
b
o
r
h
o
o
d
p
r
e
d

 

i
c
t
i
o
n

F
i
g
u
r
e
 
8

.
 

H
e
a
t
 

 

 

 

m
a
p
o
f
 
S
a
n
F
r
a
n
c
i
s
c
o
n
e
i
g
h
b
o
r
h
o
o
d
s
 
b
y
p
r
e
d
i
c
t
i
o
n
a
c
c
u
r
a
c
y

 

 

R
F
E
u
s
i

 

n
g

p
r
i
c
e
 
p
r
e
d

F
i
g
u
r
e
 
5

.
 

 

8
0
0

 
f
e
a
t
u
r
e
s
 

L
e
a
r
n

i

n
g

 
c
u
r
v
e
 
f
o
r
 

 

i
c
t
i
o
n
a
f
t
e
r
 
r
u
n
n

i

n
g

 

2

3

p
r
e
d

i
c
t
i
o
n
 
(

A
U
C
=
0

 

 

.

8
8
3
)
 

F
i
g
u
r
e
 
2

.
 

R
O
C
 
c
u
r
v
e
 
f
o
r
 
p
r
i
c
e
 

p
r
i
c
e
 
p
r
e
d

F
i
g
u
r
e
 
3

.
 

i
c
t
i
o
n

 

R
e
s
u

l
t
s
 
f
r
o
m
R
F
E

 

 
f
o
r
 

p
r
i
c
e
 
p
r
e
d

F
i
g
u
r
e
 
4

.
 

i
c
t
i
o
n

 

L
e
a
r
n

i

n
g

 
c
u
r
v
e
 
f
o
r
 

5

4

CTrain Acc.Dev Acc.0.0010.24020.24040.010.44530.4453100.64200.565410001.00000.51851000001.00000.5185Features usedTrain Acc.Test Acc.PrecisionRecallSentiment features0.55330.54990.58450.3498Word classes0.64130.63530.63160.6517Listing information0.80400.81010.76830.8886Bag of words text feats.0.77000.73500.69010.8546Visual features0.56660.51850.51040.9417All features0.81730.81150.77000.8893Features usedTrain Acc.Test Acc.PrecisionRecallSentiment features0.06950.03010.05640.0310Word classes0.13020.06360.11120.0636Listing information0.19600.10270.14250.1027Bag of words text feats.0.99480.42280.42350.4228Visual features0.71150.08350.13290.0835All features0.99930.31190.28940.3119ComponentTrain Acc.Test Acc.Overall system0.99930.3156Sentiment0.99930.3370Word classes0.99930.3533Listing information0.99850.3917Bag of words text feats.0.71150.0928ComponentTrain Acc.Test Acc.Overall system0.81730.8052Sentiment0.80840.8027Word classes0.81510.8045Listing information0.81290.8038Bag of words text feats.0.78480.7299Neighborhood and Price Prediction for San Francisco Airbnb

Listings

Emily Tang

Departments of Computer Science, Psychology

Stanford University

emjtang@stanford.edu

Kunal Sangani

Department of Economics

Stanford University

ksangani@stanford.edu

1

Introduction

Since its founding in 2008, Airbnb has become a symbol of the sharing economy and has changed the way people travel. As
of 2015, the site advertises over 1.5 million listings in 34,000 cities around the world. In this study, we focus on listings in
San Francisco, where the company ﬁrst started.
Airbnb listings not only give us a window into how participants in the new sharing economy market their offerings, but also
give us a unique insight into the characteristics of a city and its neighborhoods. San Francisco in particular is known for its
diverse neighborhoods and cultural enclaves, and the city’s Airbnb listings give us an opportunity to catalogue similarities
and differences between neighborhoods.
Using the Inside Airbnb project’s complete set of listings available in San Francisco, we develop classiﬁers able to predict
a listing’s neighborhood and its price. We choose these two outputs for their potential applications: Predicting a listing’s
neighborhood gives us insight into the cultural elements visible through text, image, and amenities that might link neighbor-
hoods together, and could potentially be applied for a recommendation system (e.g. ”If you enjoyed your stay in the Haight
Ashbury, we recommend trying Alamo Square!”), and predicting the appropriate pricing of a listing, especially taking into
account features unique to the sharing economy of how hosts describe their offering, may be helpful in internal pricing tools
that Airbnb offers to its hosts.
The Inside Airbnb project provides data on the complete set of listings available in San Francisco. We input text features,
image features, and other information associated with each listing to an SVM classiﬁer to predict the (1) the neighborhood a
listing is in, and (2) the listing’s price (separated into discrete ranges). In the following sections, we explain the context for
this work, describe our dataset and methods for feature extraction and classiﬁcation, and present an analysis of our results.

2 Related Work

As far as we are aware from our literature search, there are no published studies that apply machine learning techniques to
data from the Inside Airbnb project. (The projects data has largely been used for visualizations of listing types in each city.)
Of a small number of papers that analyze Airbnb data, a relevant paper is by Lee et al. [3], in which the authors ﬁnd that
”social factors” like number of references, host response rate, and number of reviews, are even more important determinants
of room booking than conventional factors like price and amenities offered. The importance of such social factors suggests
that the ways in which hosts describe their listings and themselves may well be of large importance when determining price
visitors are willing to pay.
We also draw from the literatures on price prediction and neighborhood detection. One notable example of machine learning
used for neighborhood detection comes from a paper by Zhang et al. [1] that uses Foursquare user check-ins and semantic
information about places to detect neighborhoods in cities. The study ﬁnds for three urban areas—New York, San Francisco,
and London—that measuring homogeneity between places and the users frequenting them allows the authors to detect neigh-
borhoods as clusters, and that the neighborhoods identiﬁed match qualitative descriptions of the cities neighborhoods. The
objective of the neighborhood classiﬁcation part of our project is similar, in that we use data from several listings that fall
within neighborhoods to understand characteristics of each neighborhood and the diversity between them.
The literature on algorithmic pricing is more extensive. Hill [2] explains Airbnb’s AI-based dynamic pricing tools, discussing
how the original regression-based tool released in 2013, which used amenities of a listing and information about neighboring
properties to predict the appropriate pricing, was refashioned into the company’s most recent, reinforcement-learning based

1

tool, Aerosolve. The tool uses microneighborhoods to inform pricing and uses user booking as a feedback tool to improve
future pricing tips. Our work is based on a freeze frame of data and so does not include any dynamic component, but the text
and image features we explore may add to the accuracy of Airbnb’s price tools as well as provide the basis for additional tools
on suggested listing marketing to property owners.
Finally, we draw from the literature on machine learning techniques. These references are covered in the methodology section.

3 Dataset

dataset
includes

of
7,029

Airbnb

listings

the
as

listings,
posted

”Inside
of

Airbnb”
2,

November

through
Francisco

available
in
San

Our
[4],
Each listing contains text information—a name, general de-
scription, a host bio, and a description of the space offered,
neighborhood, and local transit—as well as an image thumb-
nail (72 pixels per inch, usually 275x183) and several other
ﬁelds describing the amenities offered, number of bed- and
bathrooms, type of property, type of bed, square-footage of
the space, etc. The per-night price of each listing was also
included, as well as the neighborhood of the listing (of 37
possible SF neighborhoods) and a cumulative review score.
In order to reduce the burden on our multiclass classiﬁer for neighborhood prediction, we ﬁrst pre-process the data to exclude
listings that belonged to neighborhoods containing fewer than 70 listings (1% of the dataset). This reduces the number
of listings to 6764 and the number of neighborhoods to 27. The remaining listings are split into train, dev, and test sets
(80:10:10).

Figure 1: An example of an Airbnb listing

project
2015.

4 Feature Extraction & Methods

For each listing, we extract ﬁve sets of features: (1) listing information features, (2) multinomial bag of words features, (3)
multinomial word class features, (4) text sentiment features, and (5) visual features.
Listing information features include the property type (apartment, condo, bed & breakfast, dorm, house, etc.), the bed type
(futon, airbed, real bed, etc.), the host’s cancellation policy, and the number of beds, bedrooms, bathrooms, and guests
accommodated.
To create our bag of words features, we aggregate each listing’s name, summary, space, description, experiences offered,
notes, and host bio ﬁelds. We then use the NLTK package’s PorterStemmer to stem words to their root and choose the 1,000
stems that occur across the most entries in the test set. After ﬁltering out all stop words and all neighborhood words (to
prevent our neighborhood classiﬁer from simply using mentions of neighborhoods for prediction), we arrive at a list of 973
stems: the multinomial feature vectors were then calculated as the frequencies of each stem in each listing’s text, with the
sum of the features normalized to sum to one.
A closer look at the dataset reveals that words like comfortable and cozy might be used interchangeably between listings. In
order to address this, we handpick 9 word classes: people, nightlife, activities, style, accessibility, culture, nature, amenities,
and comfort. For instance, the ”style” word class includes the stems of the words modern, brand, victorian, style, decor,
gorgeous, marble, elegant, boutique, and trendy. Multinomial word class features are counts of the number of words belonging
to each of the nine word classes in each listing, with the sum of the features normalized to sum to one. For sentiment features,
we use the TextBlob package, which calculates the polarity of a segment of text by averaging the polarity of each word in the
text included in the package’s lexicon.
Finally, we download all listing images and extract visual features using the standard bag of words model in computer vision.
We randomly sample 100 images to create a dictionary of 1000 words. To create the dictionary, we extract Speeded Up
Robust Features (SURF) descriptors from the 100 images using OpenCV. SURF is a performant scale- and rotation-invariant
interest point detector and descriptor used to ﬁnd similarities between images [5]. We use K-means clustering to form 1000
clusters, or visual words for the dictionary. Using this visual word dictionary, we create feature vectors for each listing by
extracting SURF descriptors from the listings image. For each descriptor, we select the closest cluster in the dictionary. In
brief, the visual feature vector contains the frequency of each visual word in the listing image, and is normalized.
We input the features listed above into a Support Vector Machine (SVM) with a linear kernel, implemented using sklearn’s
SVM package. We discretize our listing prices into two buckets separated at the median (166.5), and develop two classiﬁers
to (1) predict the range in which a listing’s price falls and (2) predict the listing’s neighborhood. (Since the number of listings
per neighborhood is not identical across neighborhoods, we use sklearn svm’s ’balanced’ class weight setting.) Using l1

2

regularization, our SVM optimizes the objective [6]

min
 ,w,b

1
2||w||2 + C

⇠i

mXi=1

s.t. y(i)(wT x(i) + b)   1   ⇠i,

⇠i   0, i = 1, ..., m

i = 1, ..., m

Note that the parameter C adjusts the sensitivity of the classiﬁer to outliers. In order to tune our parameter for C, we use
gridsearch and vary C from 0.001 to 100, 000. The value of C for which performance on the dev set is highest is then used
for the ﬁnal classiﬁer, which is trained on the train set and tested on our held-out test set.
We plot learning curves for each classiﬁer, and note that our model has high variance, indicating an overﬁtting problem.
To account for this problem, we use feature selection, speciﬁcally sklearn’s Recursive Feature Elimination (RFE). RFE is
an algorithm that recursively considers smaller subsets of all features, by removing features with the smallest weights after
training on a set of features for each iteration. Since RFE requires us to choose the number of features we want to ultimately
use, we conduct an experiment varying the number of features to select the best K, which is shown in our results below.
To better understand our classiﬁer, we run ablative analysis, by removing one component at a time, building our classiﬁer
using the train set, and seeing how our classiﬁer accuracy changes on the dev set. In addition, we run feature selection on
only the bag of words text features for both neighborhood and price predictions, because we are interested in comparing and
analyzing the words between neighborhoods and prices.

5 Results and Discussion

5.1 SVM Performance for Price and Neighborhood Prediction

After tuning the C parameters (example for price prediction model shown in Table 1) on the dev set, we test our models on a
held-out test set. The train and test accuracies, precision, and recall for each set of features, as well as for the entire system, are
presented in Tables 2 and 4 (for price prediction and neighborhood prediction, respectively). We note that the price prediction
model achieves a test accuracy of 81.2% using all features, which is signiﬁcantly higher than the chance accuracy of 50%.
For the neighborhood prediction model, we ﬁnd that, interestingly, the highest accuracy achieved is 42.2% using only the bag
of words text features. In neighborhood prediction, the chance accuracy baseline is 8%, which can be achieved by simply
predicting the neighborhood with the greatest number of examples.
The receiver operating characteristic (ROC) curve for price prediction is included in Fig. 2. The AUC reported is 0.883,
which suggests that the classiﬁer performs quite well in differentiating between true and false positives. (We also binarize
our labels for neighborhood prediction and generate 26 ROC curves—one for each neighborhood—but exclude this ﬁgure
for sake of space. In neighborhood prediction, the AUCs average 0.84 across neighborhoods.) We also inspect confusion
matrices for both the price and neighborhood classiﬁers.
In particular, use our confusion matrix from the neighborhood
classiﬁer to generate a heat map of prediction accuracy by neighborhood, as seen in Fig. 8. Note that prediction accuracies
tend to be highest for the most central neighborhoods (including the Mission, South of Market, and Castro/Upper Market).
This makes sense, since those neighborhoods are best known for their unique characteristics, and those characteristics might
be best detected in the features we extract.

5.2 Learning Curves

Since the train accuracies are incredibly high for neighborhood predictions, we plot the learning curves for both models, to
determine whether our model is overﬁtting. In Fig. 4, we see that gap between the training scores and the cross-validation
scores for price prediction is quite large, indicating a problem of high variance and thus overﬁtting. In Fig. 6, we note that
training scores for predicting neighborhoods has maxed out at nearly 1 and are extremely far from the cross-validation scores,
which also points to an issue with overﬁtting.

5.3 Feature Selection

There are two solutions to high variance: ﬁnding more training examples or reducing the number of features. Since our dataset
was limited to listings in San Francisco, ﬁnding more training examples was not possible. So, to help mediate overﬁtting,
we use feature selection, speciﬁcally sklearns RFE algorithm, to reduce the number of features. Because recursive feature
elimination (RFE) requires us to select the end k number of features, we conduct an experiment to determine the best k. We
vary the number of features, run RFE on our models for each number of features, and test the models on our dev set. The
resulting train and dev accuracies from this experiment are plotted in Fig. 3 and 7 (for price and neighborhood prediction,
respectively).

3

From Fig. 3, we see that selecting 800 features for RFE gives us the best dev accuracy for prices, and that selecting 150
features does so for neighborhoods. We build our models, run RFE using the best number of features, and plot the learning
curves again to determine whether the overﬁtting problems for neighborhoods and prices have been reduced. For our price
prediction model, when comparing the two learning curves in Fig. 4 and 5, we see that the train accuracy has decreased, and
approaches the dev accuracy curve. In addition, we see that the dev accuracy after feature selection remains very close to
81%. Putting these together, we conclude that feature selection slightly alleviate overﬁtting of our price prediction model.
Comparing the two learning curves for our neighborhood prediction model, we ﬁnd similar improvements. After feature
selection on 150 components, the training accuracy is no longer maxed out at 1, and has decreased to around 0.8. (We exclude
our learning curve after running RFE for sake of space.) In addition, we ﬁnd that feature selection actually improves our
accuracy slightly from 42.3% to 43.1%. Finally, we notice that the cross validation score increases as number of training
samples increases. This upward trend suggests that, if more training examples were available, they may have helped improve
our classiﬁer.

5.4 Ablative Analysis

To determine which component of our ﬁve features accounts for the most improvement in our SVM models, we run ablative
analysis, and remove one component at a time to see how our classiﬁer accuracy on the dev set changes. For price prediction,
we see from Table 3 that the listing information features are the most signiﬁcant factor. This makes sense because housing
prices are very much determined by the property type and size, the number of bedrooms and bathrooms, and so on. For
neighborhood prediction, we see from Table 5 that the Bag of Words text features are the most important component. This
suggests that neighborhoods are quite diverse and are hard to capture from the listing information, sentiment, or images, but
that the richness of the word choice used to describe the surroundings of the neighborhoods (such as vibrant, bars, nightlife,
museums) is best at differentiating between neighborhoods.

5.5 Comparing Prices and Neighborhoods

Interested in seeing how word importance differed across price and neighborhood models, we run feature selection on just
the bag of words features. We discover that the word features that remain after RFE for price prediction are actually a subset
of the word features that remain for neighborhood prediction. Most of the words important in both prices and neighborhoods
describe the house and its interior, such as patio, remodel, luxurious, clean, modern, and cozy.
We can intuitively see that these words, though they describe an individual listing home, could also be applied to neighbor-
hoods that include housing units of similar style and age. Thus, the words that describe a listing can also distinguish one
neighborhood from another. On the other hand, the words found to be important in only neighborhood prediction have a
larger scope and are related to culture and larger surroundings. These words include vibrant, cafe, church, peace, bustling,
culture, museum, and history.

6 Conclusion and Future Work

Our analysis of the Inside Airbnb project’s listings for San Francisco shows that we can successfully predict neighborhood
and price range using an array of features extracted from listings. While our classiﬁers initially suffer from high variance, our
feature selection at least partially remedies this overﬁtting. Both classiﬁers we develop perform signiﬁcantly above baseline,
and suggest that listing information, text features, and more can be harnessed effectively for predicting neighborhood and
price.
With more time and computational resources, we hope to develop our model for price prediction. The results we’ve presented
here split prices into two discrete ranges. (In our work on this project, we also developed a classiﬁer to predict price across
four buckets, split at the data’s quartiles, and found encouraging accuracy rates.) To provide meaningful price tools to Airbnb
users, we would need to discretize our price range into smaller buckets to offer targeted and narrow price range suggestions.
Our ﬁnal goal in neighborhood prediction is to provide a recommendation system to Airbnb users as mentioned in this paper’s
introduction. Our work in this paper established that listing text is rich enough to allow us to predict in which neighborhood
a listing belongs. In future work, we hope to take advantage of this diversity of word choice to cluster neighborhoods with
similar cultures or characteristics together. We may even be able to do this across cities, as the Inside Airbnb project provides
data for several cities around the world, and catalogue both cultural differences across cities and neighborhoods from city to
city that are somewhat similar.
Finally, we notice in our analysis that there is signiﬁcant overlap between the features that predict neighborhood and price. In
future work, it would be interesting to understand the correlations between neighborhoods and prices more deeply. Upscale
neighborhoods naturally have higher priced listings, and tracing out the qualities of neighborhoods that encourage consumers
to pay higher prices may be an important application for real estate / urban planning.

4

Neighborhood Prediction

Price Prediction

 

S
V
M
m
o
d
e
l
 
f
o
r
 
p
r
i
c
e
 
p
r
e
d
i
c
t
i
o
n

T
a
b
l
e
 
1

.
 

 

 

T
u
n
i
n
g
C
p
a
r
a
m
e
t
e
r
 
o
n

 

T
a
b
l
e
 
2

.
 

 

T
r
a
i
n
a
n
d
 
t
e
s
t
 

a
c
c
u
r
a
c
i
e
s
,
 

p
r
e
c
i
s
i
o
n

,
 

a
n
d
 
r
e
c
a
l
l
 
o
f
 
S
V
M

 
f
o
r
 
p
r
i
c
e
 
p
r
e
d

i
c
t
i
o
n

T
a
b

l
e
 
3

.
 

A
b

l
a
t
i
v
e
 
a
n
a
l
y
s
i
s
 
f
o
r
 
p
r
i
c
e
 
p
r
e
d

i
c
t
i
o
n

F
e
a

t

 

u
r
e
S
e
e
c
t
i

l

o
n

 
f

o
r
 

i

N
e
g
h
b
o
r
h
o
o
d
P
r
e
d
c
t
i

 

i

o
n

 
(

 

S
V
M
L
n
e
a
r
 

i

K
e
r
n
e
l
)

F
i
g
u
r
e
 
6

.
 

L
e
a
r
n
i
n
g

 
c
u
r
v
e
 
f
o
r
 
n
e
i
g
h
b
o
r
h
o
o
d
p
r
e
d
i
c
t
i
o
n

 

F
i
g
u
r
e
 
7

.
 

R
e
s
u

l
t
s
 
f
r
o
m
R
F
E

 

 
f
o
r
 
n
e
i
g
h
b
o
r
h
o
o
d
p
r
e
d

 

i
c
t
i
o
n

T
a
b

l
e
 
5

.
 

A
b

l
a
t
i
v
e
 
a
n
a
l
y
s
i
s
 
f
o
r
 
p
r
i
c
e
 
p
r
e
d

i
c
t
i
o
n

T
a
b
l
e
 
4

.
 

 

T
r
a
i
n
a
n
d
 
t
e
s
t
 

a
c
c
u
r
a
c
i
e
s
,
 

p
r
e
c
i
s
i
o
n

,
 

a
n
d
 
r
e
c
a
l
l
 
o
f
 
S
V
M

 
f
o
r
 
n
e
i
g
h
b
o
r
h
o
o
d
p
r
e
d

 

i
c
t
i
o
n

F
i
g
u
r
e
 
8

.
 

H
e
a
t
 

 

 

 

m
a
p
o
f
 
S
a
n
F
r
a
n
c
i
s
c
o
n
e
i
g
h
b
o
r
h
o
o
d
s
 
b
y
p
r
e
d
i
c
t
i
o
n
a
c
c
u
r
a
c
y

 

 

R
F
E
u
s
i

 

n
g

p
r
i
c
e
 
p
r
e
d

F
i
g
u
r
e
 
5

.
 

 

8
0
0

 
f
e
a
t
u
r
e
s
 

L
e
a
r
n

i

n
g

 
c
u
r
v
e
 
f
o
r
 

 

i
c
t
i
o
n
a
f
t
e
r
 
r
u
n
n

i

n
g

 

2

3

p
r
e
d

i
c
t
i
o
n
 
(

A
U
C
=
0

 

 

.

8
8
3
)
 

F
i
g
u
r
e
 
2

.
 

R
O
C
 
c
u
r
v
e
 
f
o
r
 
p
r
i
c
e
 

p
r
i
c
e
 
p
r
e
d

F
i
g
u
r
e
 
3

.
 

i
c
t
i
o
n

 

R
e
s
u

l
t
s
 
f
r
o
m
R
F
E

 

 
f
o
r
 

p
r
i
c
e
 
p
r
e
d

F
i
g
u
r
e
 
4

.
 

i
c
t
i
o
n

 

L
e
a
r
n

i

n
g

 
c
u
r
v
e
 
f
o
r
 

5

4

CTrain Acc.Dev Acc.0.0010.24020.24040.010.44530.4453100.64200.565410001.00000.51851000001.00000.5185Features usedTrain Acc.Test Acc.PrecisionRecallSentiment features0.55330.54990.58450.3498Word classes0.64130.63530.63160.6517Listing information0.80400.81010.76830.8886Bag of words text feats.0.77000.73500.69010.8546Visual features0.56660.51850.51040.9417All features0.81730.81150.77000.8893Features usedTrain Acc.Test Acc.PrecisionRecallSentiment features0.06950.03010.05640.0310Word classes0.13020.06360.11120.0636Listing information0.19600.10270.14250.1027Bag of words text feats.0.99480.42280.42350.4228Visual features0.71150.08350.13290.0835All features0.99930.31190.28940.3119ComponentTrain Acc.Test Acc.Overall system0.99930.3156Sentiment0.99930.3370Word classes0.99930.3533Listing information0.99850.3917Bag of words text feats.0.71150.0928ComponentTrain Acc.Test Acc.Overall system0.81730.8052Sentiment0.80840.8027Word classes0.81510.8045Listing information0.81290.8038Bag of words text feats.0.78480.72997 References

[1] Zhang, A. X., Noulas, A., Scellato, S., & Mascolo, C. (2013, September). Hoodsquare: Modeling and recommending
neighborhoods in location-based social networks. In Social Computing (SocialCom), 2013 International Conference on (pp.
69-74). IEEE. http://arxiv.org/pdf/1308.3657.pdf
[2] Hill, D. (2015). How much is your spare room worth?. Spectrum, IEEE, 52(9), 32-58.
[3] Lee, D., Hyun, W., Ryu, J., Lee, W. J., Rhee, W., & Suh, B. (2015, February). An Analysis of Social Features Associated
with Room Sales of Airbnb. In Proceedings of the 18th ACM Conference Companion on Computer Supported Cooperative
Work & Social Computing (pp. 219-222). ACM.
[4] Dataset available here: http://insideairbnb.com/get-the-data.html
[5] Bay, H., Tuytelaars, T., & Van Gool, L. (2006). Surf: Speeded up robust features. In Computer visionECCV 2006 (pp.
404-417). Springer Berlin Heidelberg.
[6] Ng, Andrew. (2015). 229 Lecture Notes: Support Vector Machines (Notes 3). (pg. 19).

5

