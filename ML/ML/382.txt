New Fast Kalman ﬁlter method

Hojat Ghorbanidehno∗, Hee Sun Lee∗

1. Introduction

Data assimilation methods combine dynamical mod-
els of a system with typically noisy observations to ob-
tain estimates of the state of the system with time. When
these dynamical and observation models are linear, the
Kalman ﬁlter (KF) algorithm gives the best estimate in
a least square sense (Kalman, 1960). However, for the
large number of unknowns of such large systems, KF
methods are impractical, because updating the huge co-
variance matrix is computationally expensive. Low rank
approximation methods have been devised to overcome
this problem; such methods assume a low rank of the
covariance matrix, which they approximate by smaller,
full-rank matrices. The approximation error is small for
smooth functions, but may be larger for more complex
physical problems, leading to ﬁlter divergence and inac-
curate state estimates.

We present a new algorithm that utilizes the exact co-
variance matrix avoiding the approximation error (we
call it SpecKF for now), and does so in a computa-
tionally eﬃcient way, even for systems with large num-
bers of unknowns. The computational speed-up of the
SpecKF is achieved by updating small cross-covariance
matrices instead of large covariance matrices. The ben-
eﬁt can be considerable, especially in large systems, be-
cause the computational complexity of SpecKF scales
linearly with the number of unknown, as opposed to the
KF that scales quadratically. We investigate the accu-
racy and performance of the SpecKF for a diﬀusion case
with random perturbations. Our results show that the
SpecKF provides high accuracy at a smaller computa-
tional cost than the Ensemble Kalman Filter (which is a
very popular KF variant).

The Kalman ﬁltering process has two steps: (i) the
prediction of the state at time tk+1 using the forward
model and the current estimate at time tk, and (ii) the
update of the predicted state at time tk+1 based on newly

∗

Email addresses: hojjatgh@stanford.edu (Hojat

Ghorbanidehno), hslee88@stanford.edu (Hee Sun Lee )

Preprint submitted to Elsevier

available measurements. Consider a state estimate
vector sk ∈ Rm and a vector of noisy measurements
zk ∈ Rn at time tk. The Kalman Filtering process
forecast, a:
is given in the following recurrence (f:
analysis):

Prediction/Forecast:

s f
k+1
= Fk+1Pa

= Fk+1sa
k
+ Qk+1

kFT
k+1

P f
k+1
Update/Analysis:

(cid:16)

(1a)

(1b)

(1c)

(1d)

(cid:17)−1
(cid:17)

Kk+1 = Pk+1HT
k+1

sa
k+1

= s f

k+1
= P f

(cid:16)

Hk+1P f

k+1HT
+ Rk+1
k+1
yk+1 − Hk+1s f
+ Kt+1
k+1 − Kk+1Hk+1P f

k+1

Pa
k+1

k+1

(1e)
The SpecKF updates cross-covariances instead of co-
variance matrices(P f and Pa), and makes this possible
for arbitrary forward models by means of a forward
model approximation. This approximation brings about
a small and controllable approximation error. The com-
putational cost of estimation with our method is reduced
from O(nm2) to O(n2m) (n: number of measurements,
m: number of unknown), which can be a dramatic de-
crease, especially for large systems where n (cid:28) m. As
a result, our method can handle a large number of un-
knowns in a computationally eﬃcient way, both in terms
of storage and computational time.

2. Derivation of method

The implementation of the KF algorithm for large
scale systems becomes infeasible, because of the high
storage cost and computational cost of the matrix oper-
ations outlined in Equations (1b) to (1e), involving sev-
eral multiplications of m × m matrices when updating
the covariance matrix P.
In our method, we modify-
ing the recurrence matrix operations such that only the
m × n cross-covariance matrices (such as PHT = PaHT
December 12, 2014

New Fast Kalman ﬁlter method

Hojat Ghorbanidehno∗, Hee Sun Lee∗

1. Introduction

Data assimilation methods combine dynamical mod-
els of a system with typically noisy observations to ob-
tain estimates of the state of the system with time. When
these dynamical and observation models are linear, the
Kalman ﬁlter (KF) algorithm gives the best estimate in
a least square sense (Kalman, 1960). However, for the
large number of unknowns of such large systems, KF
methods are impractical, because updating the huge co-
variance matrix is computationally expensive. Low rank
approximation methods have been devised to overcome
this problem; such methods assume a low rank of the
covariance matrix, which they approximate by smaller,
full-rank matrices. The approximation error is small for
smooth functions, but may be larger for more complex
physical problems, leading to ﬁlter divergence and inac-
curate state estimates.

We present a new algorithm that utilizes the exact co-
variance matrix avoiding the approximation error (we
call it SpecKF for now), and does so in a computa-
tionally eﬃcient way, even for systems with large num-
bers of unknowns. The computational speed-up of the
SpecKF is achieved by updating small cross-covariance
matrices instead of large covariance matrices. The ben-
eﬁt can be considerable, especially in large systems, be-
cause the computational complexity of SpecKF scales
linearly with the number of unknown, as opposed to the
KF that scales quadratically. We investigate the accu-
racy and performance of the SpecKF for a diﬀusion case
with random perturbations. Our results show that the
SpecKF provides high accuracy at a smaller computa-
tional cost than the Ensemble Kalman Filter (which is a
very popular KF variant).

The Kalman ﬁltering process has two steps: (i) the
prediction of the state at time tk+1 using the forward
model and the current estimate at time tk, and (ii) the
update of the predicted state at time tk+1 based on newly

∗

Email addresses: hojjatgh@stanford.edu (Hojat

Ghorbanidehno), hslee88@stanford.edu (Hee Sun Lee )

Preprint submitted to Elsevier

available measurements. Consider a state estimate
vector sk ∈ Rm and a vector of noisy measurements
zk ∈ Rn at time tk. The Kalman Filtering process
forecast, a:
is given in the following recurrence (f:
analysis):

Prediction/Forecast:

s f
k+1
= Fk+1Pa

= Fk+1sa
k
+ Qk+1

kFT
k+1

P f
k+1
Update/Analysis:

(cid:16)

(1a)

(1b)

(1c)

(1d)

(cid:17)−1
(cid:17)

Kk+1 = Pk+1HT
k+1

sa
k+1

= s f

k+1
= P f

(cid:16)

Hk+1P f

k+1HT
+ Rk+1
k+1
yk+1 − Hk+1s f
+ Kt+1
k+1 − Kk+1Hk+1P f

k+1

Pa
k+1

k+1

(1e)
The SpecKF updates cross-covariances instead of co-
variance matrices(P f and Pa), and makes this possible
for arbitrary forward models by means of a forward
model approximation. This approximation brings about
a small and controllable approximation error. The com-
putational cost of estimation with our method is reduced
from O(nm2) to O(n2m) (n: number of measurements,
m: number of unknown), which can be a dramatic de-
crease, especially for large systems where n (cid:28) m. As
a result, our method can handle a large number of un-
knowns in a computationally eﬃcient way, both in terms
of storage and computational time.

2. Derivation of method

The implementation of the KF algorithm for large
scale systems becomes infeasible, because of the high
storage cost and computational cost of the matrix oper-
ations outlined in Equations (1b) to (1e), involving sev-
eral multiplications of m × m matrices when updating
the covariance matrix P.
In our method, we modify-
ing the recurrence matrix operations such that only the
m × n cross-covariance matrices (such as PHT = PaHT
December 12, 2014

and PF = PFT HT ) are stored and updated at every
time step. This modiﬁcation takes advantage of the
Kalman Filter recurrence to calculate products of big
matrices like PHT without explicitly having to construct
and multiply the individual matrices. This is achieved
by multiplying equations (1b) and (1e) by appropriate
Jacobians to obtain:

P f
k+1HT = FPa

kFT HT + QHT
k+1HT − Kk+1HP f

k+1HT

k+1HT = P f
Pa

(2)

(3)

Figure 1: Purturbed solution after 1000 steps

However, after the above modiﬁcations, equation (2)
still involves the product PFT HT , which is computa-
tionally intractable for large m. Expanding this term and
using equations (1b) and (1e), we obtain:

k+1FT HT = (I − Kk+1)P f
Pa
= (I − Kk+1H)(FPa

k+1FT HT
kFT FT HT + QFT HT )

(4)

It becomes apparent that while equations (2) and (3)
can be used to update the cross-covariances using the
recurrence rather than direct matrix-vector multiplica-
tion, the term FPFT FT HT negates this beneﬁt as it in-
volves terms that are equally expensive to compute. To
overcome this, we proceed by discretizing the forward
model F in time with a Taylor series:

F − I = (F)tdt + O(dt2)

(5)

kFT

k+1HT
k+1

kHT + 2Pa

where (F)t is the Jacobian of F with respect to t. Using
the above, we obtain the following:
PFT FT HT = −Pa
+ P((F − I)2)T HT
(6)
where (F − I)2 ∼ O(((Fk)tdt)2). As a result, for a small
dt between data assimilations in the Kalman Filter, the
error introduced by neglecting the last term of equation
(6) is expected to be small. However, since this approx-
imation is used only once within the algorithm (i.e. the
full forward operator F is used in all other calculations
except in the expansion of equation (6)), depending on
the non-linearity of the problem, the error introduced by
this forward model approximation will likely not aﬀect
the results of the ﬁlter signiﬁcantly.

Using the above and deﬁning the new matrices Tk+1 =
P f
k+1FT HT , the
k+1HT , PH
k+1
SpecKF algorithm can be summarized by the following
recurrence:

k+1HT , and PF
k+1

= Pa

= Pa

+ QHT

s f
= Fk+1sa
k
k+1
Tk+1 = Fk+1PF
k
Kk+1 = Tk+1(HTk+1 + R)−1
sa
k+1
PF
k+1

+ Kk+1(zk+1 − Hs f
= s f
= (I − Kk+1H)(−Fk+1PH
+ 2Fk+1PF
+ QFT
k+1HT
k
= (I − Kk+1H)Tk+1

PH
k+1

k+1

k

k+1)

k+1) + O((∆t)2)

(7a)
(7b)
(7c)
(7d)

(7e)
(7f)

3. Validation

In order to validate the SpecKF implementation, we
compare it to the results obtained from the original KF
algorithm; the diﬀerence between the two indicates how
signiﬁcant is the combined error of the forward model
approximation and the low-rank approximation of Q,
which are the two sources of error in the SpecKF al-
gorithm. The benchmark problem we use is the linear
diﬀusion equation in a two-dimensional unit domain,
[0, 1]× [0, 1], where the state (pressure) is contaminated
with random noise:

= D∇2φ + noise

∂φ
∂t

(8)

In equation (8), D represents the diﬀusion coeﬃcient
which is assumed to be spatially and temporally con-
stant. Discretizing equation (8) using explicit Euler in
time and central diﬀerence in space, we obtain:

(cid:17)

+

+ φ(k)
i−1, j
√
10dt w(k)
i, j

+

(9)

(cid:16)
dt
i+1, j − 2φ(k)
(cid:17)
φ(k)
(dx)2
i, j+1 − 2φ(k)
+ φ(k)
φ(k)
i, j−1

i, j

i, j

+

(cid:16)

φ(k+1)
i, j

= φ(k)
i, j

dt
(dy)2

2

New Fast Kalman ﬁlter method

Hojat Ghorbanidehno∗, Hee Sun Lee∗

1. Introduction

Data assimilation methods combine dynamical mod-
els of a system with typically noisy observations to ob-
tain estimates of the state of the system with time. When
these dynamical and observation models are linear, the
Kalman ﬁlter (KF) algorithm gives the best estimate in
a least square sense (Kalman, 1960). However, for the
large number of unknowns of such large systems, KF
methods are impractical, because updating the huge co-
variance matrix is computationally expensive. Low rank
approximation methods have been devised to overcome
this problem; such methods assume a low rank of the
covariance matrix, which they approximate by smaller,
full-rank matrices. The approximation error is small for
smooth functions, but may be larger for more complex
physical problems, leading to ﬁlter divergence and inac-
curate state estimates.

We present a new algorithm that utilizes the exact co-
variance matrix avoiding the approximation error (we
call it SpecKF for now), and does so in a computa-
tionally eﬃcient way, even for systems with large num-
bers of unknowns. The computational speed-up of the
SpecKF is achieved by updating small cross-covariance
matrices instead of large covariance matrices. The ben-
eﬁt can be considerable, especially in large systems, be-
cause the computational complexity of SpecKF scales
linearly with the number of unknown, as opposed to the
KF that scales quadratically. We investigate the accu-
racy and performance of the SpecKF for a diﬀusion case
with random perturbations. Our results show that the
SpecKF provides high accuracy at a smaller computa-
tional cost than the Ensemble Kalman Filter (which is a
very popular KF variant).

The Kalman ﬁltering process has two steps: (i) the
prediction of the state at time tk+1 using the forward
model and the current estimate at time tk, and (ii) the
update of the predicted state at time tk+1 based on newly

∗

Email addresses: hojjatgh@stanford.edu (Hojat

Ghorbanidehno), hslee88@stanford.edu (Hee Sun Lee )

Preprint submitted to Elsevier

available measurements. Consider a state estimate
vector sk ∈ Rm and a vector of noisy measurements
zk ∈ Rn at time tk. The Kalman Filtering process
forecast, a:
is given in the following recurrence (f:
analysis):

Prediction/Forecast:

s f
k+1
= Fk+1Pa

= Fk+1sa
k
+ Qk+1

kFT
k+1

P f
k+1
Update/Analysis:

(cid:16)

(1a)

(1b)

(1c)

(1d)

(cid:17)−1
(cid:17)

Kk+1 = Pk+1HT
k+1

sa
k+1

= s f

k+1
= P f

(cid:16)

Hk+1P f

k+1HT
+ Rk+1
k+1
yk+1 − Hk+1s f
+ Kt+1
k+1 − Kk+1Hk+1P f

k+1

Pa
k+1

k+1

(1e)
The SpecKF updates cross-covariances instead of co-
variance matrices(P f and Pa), and makes this possible
for arbitrary forward models by means of a forward
model approximation. This approximation brings about
a small and controllable approximation error. The com-
putational cost of estimation with our method is reduced
from O(nm2) to O(n2m) (n: number of measurements,
m: number of unknown), which can be a dramatic de-
crease, especially for large systems where n (cid:28) m. As
a result, our method can handle a large number of un-
knowns in a computationally eﬃcient way, both in terms
of storage and computational time.

2. Derivation of method

The implementation of the KF algorithm for large
scale systems becomes infeasible, because of the high
storage cost and computational cost of the matrix oper-
ations outlined in Equations (1b) to (1e), involving sev-
eral multiplications of m × m matrices when updating
the covariance matrix P.
In our method, we modify-
ing the recurrence matrix operations such that only the
m × n cross-covariance matrices (such as PHT = PaHT
December 12, 2014

and PF = PFT HT ) are stored and updated at every
time step. This modiﬁcation takes advantage of the
Kalman Filter recurrence to calculate products of big
matrices like PHT without explicitly having to construct
and multiply the individual matrices. This is achieved
by multiplying equations (1b) and (1e) by appropriate
Jacobians to obtain:

P f
k+1HT = FPa

kFT HT + QHT
k+1HT − Kk+1HP f

k+1HT

k+1HT = P f
Pa

(2)

(3)

Figure 1: Purturbed solution after 1000 steps

However, after the above modiﬁcations, equation (2)
still involves the product PFT HT , which is computa-
tionally intractable for large m. Expanding this term and
using equations (1b) and (1e), we obtain:

k+1FT HT = (I − Kk+1)P f
Pa
= (I − Kk+1H)(FPa

k+1FT HT
kFT FT HT + QFT HT )

(4)

It becomes apparent that while equations (2) and (3)
can be used to update the cross-covariances using the
recurrence rather than direct matrix-vector multiplica-
tion, the term FPFT FT HT negates this beneﬁt as it in-
volves terms that are equally expensive to compute. To
overcome this, we proceed by discretizing the forward
model F in time with a Taylor series:

F − I = (F)tdt + O(dt2)

(5)

kFT

k+1HT
k+1

kHT + 2Pa

where (F)t is the Jacobian of F with respect to t. Using
the above, we obtain the following:
PFT FT HT = −Pa
+ P((F − I)2)T HT
(6)
where (F − I)2 ∼ O(((Fk)tdt)2). As a result, for a small
dt between data assimilations in the Kalman Filter, the
error introduced by neglecting the last term of equation
(6) is expected to be small. However, since this approx-
imation is used only once within the algorithm (i.e. the
full forward operator F is used in all other calculations
except in the expansion of equation (6)), depending on
the non-linearity of the problem, the error introduced by
this forward model approximation will likely not aﬀect
the results of the ﬁlter signiﬁcantly.

Using the above and deﬁning the new matrices Tk+1 =
P f
k+1FT HT , the
k+1HT , PH
k+1
SpecKF algorithm can be summarized by the following
recurrence:

k+1HT , and PF
k+1

= Pa

= Pa

+ QHT

s f
= Fk+1sa
k
k+1
Tk+1 = Fk+1PF
k
Kk+1 = Tk+1(HTk+1 + R)−1
sa
k+1
PF
k+1

+ Kk+1(zk+1 − Hs f
= s f
= (I − Kk+1H)(−Fk+1PH
+ 2Fk+1PF
+ QFT
k+1HT
k
= (I − Kk+1H)Tk+1

PH
k+1

k+1

k

k+1)

k+1) + O((∆t)2)

(7a)
(7b)
(7c)
(7d)

(7e)
(7f)

3. Validation

In order to validate the SpecKF implementation, we
compare it to the results obtained from the original KF
algorithm; the diﬀerence between the two indicates how
signiﬁcant is the combined error of the forward model
approximation and the low-rank approximation of Q,
which are the two sources of error in the SpecKF al-
gorithm. The benchmark problem we use is the linear
diﬀusion equation in a two-dimensional unit domain,
[0, 1]× [0, 1], where the state (pressure) is contaminated
with random noise:

= D∇2φ + noise

∂φ
∂t

(8)

In equation (8), D represents the diﬀusion coeﬃcient
which is assumed to be spatially and temporally con-
stant. Discretizing equation (8) using explicit Euler in
time and central diﬀerence in space, we obtain:

(cid:17)

+

+ φ(k)
i−1, j
√
10dt w(k)
i, j

+

(9)

(cid:16)
dt
i+1, j − 2φ(k)
(cid:17)
φ(k)
(dx)2
i, j+1 − 2φ(k)
+ φ(k)
φ(k)
i, j−1

i, j

i, j

+

(cid:16)

φ(k+1)
i, j

= φ(k)
i, j

dt
(dy)2

2

√

where w is noise that represents various small and er-
ratic sources and sinks over the domain with zero mean
10dtQ. In this problem Q is
and covariance matrix of
selected from the Gaussian family of covariance func-
tions where Qi, j = exp(−( xi−x j
L )2). Equation 9 is solved
for a 51 × 51 grid resulting in m = 2401 (excluding the
boundaries), with a discretization dx = dy = 0.02, with
Dirichlet boundary conditions at all boundaries and ini-
tial φ = 0 throughout the domain except at boundaries.
For time discretization, a dt = 10−5 is chosen, to satisfy
the numerical stability requirement dt ≤ 4×10−4. There
are 20 point observations uniformly distributed in the
unit domain, with observation error covariance I20×20.
Figure 1 shows the distribution of φ after 1000 time
steps, indicating the distortion of an otherwise smooth
ﬁeld due to the noise added.

In addition to the comparison to the KF results for
validation of the SpecKF, the diﬀusion problem is used
to conduct error analysis and evaluate the computational
eﬃciency of the SpecKF compared to both the KF and
the EnKF.

Figure 2 shows the estimates obtained with SpecKF
at time step 1000. Comparison to Figure 1 indicates that
the SpecKF results provide high accuracy.

(a)

(b)

Figure 3: a) Relative diﬀerence between SpecKF and
KF estimates with time b) Absolute diﬀerence between
SpecKF and KF estimations at time step 1000

the time step taken is small (for numerical stability pur-
poses as outlined previously), and since the error of the
forward model approximation is second order in time.
The contribution of the low-rank approximation of the
Q matrix is also included in this error. It should be men-
tioned that in this problem the SpecKF provides estima-
tion with the same accuracy as the KF method, while
the computational cost of specKF is much smaller than
the computational cost of KF method, specially for the
cases with large number of unknowns (Figure 4).

Figure 2: SpecKF estimation at time step 1000.

(cid:107)φKF(cid:107)

Comparison to the KF results (Figure 3) shows that
the diﬀerence between the estimations obtained by
SpecKF and KF is negligible, with the absolute diﬀer-
ence (cid:107)φS pecKF−φKF(cid:107)
in the order of 10−3, where the true
state varies from −1.5 to 0.5. This shows that SpecKF
is consistent with KF and the error of the forward model
approximation in this case is small. As noted previously,
in this case the time step being used is rather small, rep-
resenting an optimistic case for data assimilation. Nev-
ertheless, the good agreement of SpecKF with KF under
these conditions validates the SpecKF implementation.
It should be noted that the KF estimate is the optimal
estimate for a linear problem with given set of noisy
measurements. As shown in Figure 3 the overall er-
ror added is maintained at low levels, since at all times

Figure 4: Comparison of time taken by full KF and
SpecKF methods for diﬀerent number of unknowns

Finally, we compare the results of the SpecKF for the
diﬀusion problem with EnKF an alternative fast Kalman
Filter algorithms in terms of accuracy of estimation.
The results of each method are compared to the orig-
inal KF algorithm. First, we compare the SpecKF re-
sults to those obtained by the Ensemble Kalman Filter,
using the same 20 noisy measurements. Three diﬀer-
ent ensemble sizes were evaluated, all larger than the
number of measurements, in order to allow the EnKF to
converge. As shown in Figure 5, increasing the ensem-
ble size reduced the relative error of the EnKF, however
in all three cases the EnKF diﬀerence from the KF was
more pronounced compared to the SpecKF. Since the
ensemble sizes were greater than the number of mea-

3

New Fast Kalman ﬁlter method

Hojat Ghorbanidehno∗, Hee Sun Lee∗

1. Introduction

Data assimilation methods combine dynamical mod-
els of a system with typically noisy observations to ob-
tain estimates of the state of the system with time. When
these dynamical and observation models are linear, the
Kalman ﬁlter (KF) algorithm gives the best estimate in
a least square sense (Kalman, 1960). However, for the
large number of unknowns of such large systems, KF
methods are impractical, because updating the huge co-
variance matrix is computationally expensive. Low rank
approximation methods have been devised to overcome
this problem; such methods assume a low rank of the
covariance matrix, which they approximate by smaller,
full-rank matrices. The approximation error is small for
smooth functions, but may be larger for more complex
physical problems, leading to ﬁlter divergence and inac-
curate state estimates.

We present a new algorithm that utilizes the exact co-
variance matrix avoiding the approximation error (we
call it SpecKF for now), and does so in a computa-
tionally eﬃcient way, even for systems with large num-
bers of unknowns. The computational speed-up of the
SpecKF is achieved by updating small cross-covariance
matrices instead of large covariance matrices. The ben-
eﬁt can be considerable, especially in large systems, be-
cause the computational complexity of SpecKF scales
linearly with the number of unknown, as opposed to the
KF that scales quadratically. We investigate the accu-
racy and performance of the SpecKF for a diﬀusion case
with random perturbations. Our results show that the
SpecKF provides high accuracy at a smaller computa-
tional cost than the Ensemble Kalman Filter (which is a
very popular KF variant).

The Kalman ﬁltering process has two steps: (i) the
prediction of the state at time tk+1 using the forward
model and the current estimate at time tk, and (ii) the
update of the predicted state at time tk+1 based on newly

∗

Email addresses: hojjatgh@stanford.edu (Hojat

Ghorbanidehno), hslee88@stanford.edu (Hee Sun Lee )

Preprint submitted to Elsevier

available measurements. Consider a state estimate
vector sk ∈ Rm and a vector of noisy measurements
zk ∈ Rn at time tk. The Kalman Filtering process
forecast, a:
is given in the following recurrence (f:
analysis):

Prediction/Forecast:

s f
k+1
= Fk+1Pa

= Fk+1sa
k
+ Qk+1

kFT
k+1

P f
k+1
Update/Analysis:

(cid:16)

(1a)

(1b)

(1c)

(1d)

(cid:17)−1
(cid:17)

Kk+1 = Pk+1HT
k+1

sa
k+1

= s f

k+1
= P f

(cid:16)

Hk+1P f

k+1HT
+ Rk+1
k+1
yk+1 − Hk+1s f
+ Kt+1
k+1 − Kk+1Hk+1P f

k+1

Pa
k+1

k+1

(1e)
The SpecKF updates cross-covariances instead of co-
variance matrices(P f and Pa), and makes this possible
for arbitrary forward models by means of a forward
model approximation. This approximation brings about
a small and controllable approximation error. The com-
putational cost of estimation with our method is reduced
from O(nm2) to O(n2m) (n: number of measurements,
m: number of unknown), which can be a dramatic de-
crease, especially for large systems where n (cid:28) m. As
a result, our method can handle a large number of un-
knowns in a computationally eﬃcient way, both in terms
of storage and computational time.

2. Derivation of method

The implementation of the KF algorithm for large
scale systems becomes infeasible, because of the high
storage cost and computational cost of the matrix oper-
ations outlined in Equations (1b) to (1e), involving sev-
eral multiplications of m × m matrices when updating
the covariance matrix P.
In our method, we modify-
ing the recurrence matrix operations such that only the
m × n cross-covariance matrices (such as PHT = PaHT
December 12, 2014

and PF = PFT HT ) are stored and updated at every
time step. This modiﬁcation takes advantage of the
Kalman Filter recurrence to calculate products of big
matrices like PHT without explicitly having to construct
and multiply the individual matrices. This is achieved
by multiplying equations (1b) and (1e) by appropriate
Jacobians to obtain:

P f
k+1HT = FPa

kFT HT + QHT
k+1HT − Kk+1HP f

k+1HT

k+1HT = P f
Pa

(2)

(3)

Figure 1: Purturbed solution after 1000 steps

However, after the above modiﬁcations, equation (2)
still involves the product PFT HT , which is computa-
tionally intractable for large m. Expanding this term and
using equations (1b) and (1e), we obtain:

k+1FT HT = (I − Kk+1)P f
Pa
= (I − Kk+1H)(FPa

k+1FT HT
kFT FT HT + QFT HT )

(4)

It becomes apparent that while equations (2) and (3)
can be used to update the cross-covariances using the
recurrence rather than direct matrix-vector multiplica-
tion, the term FPFT FT HT negates this beneﬁt as it in-
volves terms that are equally expensive to compute. To
overcome this, we proceed by discretizing the forward
model F in time with a Taylor series:

F − I = (F)tdt + O(dt2)

(5)

kFT

k+1HT
k+1

kHT + 2Pa

where (F)t is the Jacobian of F with respect to t. Using
the above, we obtain the following:
PFT FT HT = −Pa
+ P((F − I)2)T HT
(6)
where (F − I)2 ∼ O(((Fk)tdt)2). As a result, for a small
dt between data assimilations in the Kalman Filter, the
error introduced by neglecting the last term of equation
(6) is expected to be small. However, since this approx-
imation is used only once within the algorithm (i.e. the
full forward operator F is used in all other calculations
except in the expansion of equation (6)), depending on
the non-linearity of the problem, the error introduced by
this forward model approximation will likely not aﬀect
the results of the ﬁlter signiﬁcantly.

Using the above and deﬁning the new matrices Tk+1 =
P f
k+1FT HT , the
k+1HT , PH
k+1
SpecKF algorithm can be summarized by the following
recurrence:

k+1HT , and PF
k+1

= Pa

= Pa

+ QHT

s f
= Fk+1sa
k
k+1
Tk+1 = Fk+1PF
k
Kk+1 = Tk+1(HTk+1 + R)−1
sa
k+1
PF
k+1

+ Kk+1(zk+1 − Hs f
= s f
= (I − Kk+1H)(−Fk+1PH
+ 2Fk+1PF
+ QFT
k+1HT
k
= (I − Kk+1H)Tk+1

PH
k+1

k+1

k

k+1)

k+1) + O((∆t)2)

(7a)
(7b)
(7c)
(7d)

(7e)
(7f)

3. Validation

In order to validate the SpecKF implementation, we
compare it to the results obtained from the original KF
algorithm; the diﬀerence between the two indicates how
signiﬁcant is the combined error of the forward model
approximation and the low-rank approximation of Q,
which are the two sources of error in the SpecKF al-
gorithm. The benchmark problem we use is the linear
diﬀusion equation in a two-dimensional unit domain,
[0, 1]× [0, 1], where the state (pressure) is contaminated
with random noise:

= D∇2φ + noise

∂φ
∂t

(8)

In equation (8), D represents the diﬀusion coeﬃcient
which is assumed to be spatially and temporally con-
stant. Discretizing equation (8) using explicit Euler in
time and central diﬀerence in space, we obtain:

(cid:17)

+

+ φ(k)
i−1, j
√
10dt w(k)
i, j

+

(9)

(cid:16)
dt
i+1, j − 2φ(k)
(cid:17)
φ(k)
(dx)2
i, j+1 − 2φ(k)
+ φ(k)
φ(k)
i, j−1

i, j

i, j

+

(cid:16)

φ(k+1)
i, j

= φ(k)
i, j

dt
(dy)2

2

√

where w is noise that represents various small and er-
ratic sources and sinks over the domain with zero mean
10dtQ. In this problem Q is
and covariance matrix of
selected from the Gaussian family of covariance func-
tions where Qi, j = exp(−( xi−x j
L )2). Equation 9 is solved
for a 51 × 51 grid resulting in m = 2401 (excluding the
boundaries), with a discretization dx = dy = 0.02, with
Dirichlet boundary conditions at all boundaries and ini-
tial φ = 0 throughout the domain except at boundaries.
For time discretization, a dt = 10−5 is chosen, to satisfy
the numerical stability requirement dt ≤ 4×10−4. There
are 20 point observations uniformly distributed in the
unit domain, with observation error covariance I20×20.
Figure 1 shows the distribution of φ after 1000 time
steps, indicating the distortion of an otherwise smooth
ﬁeld due to the noise added.

In addition to the comparison to the KF results for
validation of the SpecKF, the diﬀusion problem is used
to conduct error analysis and evaluate the computational
eﬃciency of the SpecKF compared to both the KF and
the EnKF.

Figure 2 shows the estimates obtained with SpecKF
at time step 1000. Comparison to Figure 1 indicates that
the SpecKF results provide high accuracy.

(a)

(b)

Figure 3: a) Relative diﬀerence between SpecKF and
KF estimates with time b) Absolute diﬀerence between
SpecKF and KF estimations at time step 1000

the time step taken is small (for numerical stability pur-
poses as outlined previously), and since the error of the
forward model approximation is second order in time.
The contribution of the low-rank approximation of the
Q matrix is also included in this error. It should be men-
tioned that in this problem the SpecKF provides estima-
tion with the same accuracy as the KF method, while
the computational cost of specKF is much smaller than
the computational cost of KF method, specially for the
cases with large number of unknowns (Figure 4).

Figure 2: SpecKF estimation at time step 1000.

(cid:107)φKF(cid:107)

Comparison to the KF results (Figure 3) shows that
the diﬀerence between the estimations obtained by
SpecKF and KF is negligible, with the absolute diﬀer-
ence (cid:107)φS pecKF−φKF(cid:107)
in the order of 10−3, where the true
state varies from −1.5 to 0.5. This shows that SpecKF
is consistent with KF and the error of the forward model
approximation in this case is small. As noted previously,
in this case the time step being used is rather small, rep-
resenting an optimistic case for data assimilation. Nev-
ertheless, the good agreement of SpecKF with KF under
these conditions validates the SpecKF implementation.
It should be noted that the KF estimate is the optimal
estimate for a linear problem with given set of noisy
measurements. As shown in Figure 3 the overall er-
ror added is maintained at low levels, since at all times

Figure 4: Comparison of time taken by full KF and
SpecKF methods for diﬀerent number of unknowns

Finally, we compare the results of the SpecKF for the
diﬀusion problem with EnKF an alternative fast Kalman
Filter algorithms in terms of accuracy of estimation.
The results of each method are compared to the orig-
inal KF algorithm. First, we compare the SpecKF re-
sults to those obtained by the Ensemble Kalman Filter,
using the same 20 noisy measurements. Three diﬀer-
ent ensemble sizes were evaluated, all larger than the
number of measurements, in order to allow the EnKF to
converge. As shown in Figure 5, increasing the ensem-
ble size reduced the relative error of the EnKF, however
in all three cases the EnKF diﬀerence from the KF was
more pronounced compared to the SpecKF. Since the
ensemble sizes were greater than the number of mea-

3

surements, the computational cost of the EnKF in all
three cases was also greater than that of the SpecKF.

With this assumption, we can obtain S and get the de-
sired approximation of P:

P ≈ US UT

4. Application: CO2 monitoring

The second benchmark application evaluates the per-
formance of the SpecKF for the non-linear problem of
CO2 transport in a two dimensional homogeneous do-
main. The accuracy of the SpecKF is compared with
that of the EnKF. The forward model used to simu-
late the injection of CO2 in the subsurface is TOUGH2,
a multi-dimensionsional, multi-phase, multi-component
non-isothermal numerical simulator for ﬂow and trans-
port in porous media (Pruess, 1991; Pruess et al., 1999).
Initially the forward simulation is run for 225 days to
provide the true data for pressure and CO2 saturation,
which are the two state variables we are interested in
tracking with the Kalman Filter. From this data, 25 sat-
urations and 9 pressures (n = 34) are collected every 15
days at locations indicated in Figure 6. These measure-
ments are then contaminated with Gaussian error. Us-
ing these measurements, the Kalman Filter algorithms
are used to estimate the pressure and saturation for the
whole domain, resulting in 2 × 2025 = 4050 unknowns
(m = 4050). The assimilation of data begins on day
30 of the true experiment. The state of the system at
this time would be unknown in practice. For this rea-
son, we initialize the Kalman Filter from a wrong ini-
tial condition corresponding to an approximate knowl-
edge of the location of the CO2 based on the location
of the injection wells. The objective of the Kalman Fil-
ter is to predict the states at subsequent times, based on
these erroneous initial conditions, and the noisy mea-
surements collected. Both ﬁlters are initiated with the
same erroneous initial conditions and the same set of
noisy measurements is assimilated every 15 days. Re-
sults are compared to the true state at diﬀerent times.
We did not compare our results with KF, because im-
plementation of KF method for this problem was very
expensive.

Figure 7 compares the true state with the estimates
obtained by the SpecKF and the EnKF with same com-
putational cost. The SpecKF after the ﬁrst data assim-
ilation step does not give an accurate estimate. How-
ever, as more measurements are assimilated the estima-
tion improves drastically such that the SpecKF estimate
at 90 days greatly resembles the true state. The relative
error of the SpecKF and EnKF is compared in Figure 9,
which shows both methods approximate the true solu-
tion with small relative error. However, when the noise

Figure 5: Comparison between relative error of SpecKF
estimation and EnKF estimation(with 3 diﬀerent ensem-
ble sizes) respect to KF estimation

3.1. Approximation of covariance matrix

The SpecKF algorithm gives the posterior covariance
only at measurement points. However, we may need to
know the uncertainty of the estimates at locations that
are not known a priori. We can obtain an estimate of the
full matrix P by assuming that the posterior covariance
has a low-rank representation:

P ≈ US UT

U is a known, preselected m × n matrix, i.e., we assume
that P can be approximated by a low-rank matrix with
rank equal to the number of measurements.

Then, the cross-covariance HPHT , which is available

in the SpecKF, can be written as:

HPHT ≈ HUS UT HT = (HU)S (HU)T

= (HUS 1/2)(HUS 1/2)T

Then, we perform a Cholesky decomposition of the
known cross-covariance HPHT = VVT . This gives:

V ≈ HUS 1/2

Since V, H and U is known we can obtain an expression
for S 1/2:

S 1/2 = (HU)−1V

This step assumes that HU is non-singular. H is a fat
matrix with n rows, while U is a thin matrix with n
columns. For HU to be non-singular, we need to as-
sume that span(U) ∩ null(H) = ∅. Geometrically, this
means that none of the “important” components of P
are in the null space of the observation matrix H, that
is, if there are components of P (= span(U)) that are not
observed, they cannot be reconstructed by this method.

4

New Fast Kalman ﬁlter method

Hojat Ghorbanidehno∗, Hee Sun Lee∗

1. Introduction

Data assimilation methods combine dynamical mod-
els of a system with typically noisy observations to ob-
tain estimates of the state of the system with time. When
these dynamical and observation models are linear, the
Kalman ﬁlter (KF) algorithm gives the best estimate in
a least square sense (Kalman, 1960). However, for the
large number of unknowns of such large systems, KF
methods are impractical, because updating the huge co-
variance matrix is computationally expensive. Low rank
approximation methods have been devised to overcome
this problem; such methods assume a low rank of the
covariance matrix, which they approximate by smaller,
full-rank matrices. The approximation error is small for
smooth functions, but may be larger for more complex
physical problems, leading to ﬁlter divergence and inac-
curate state estimates.

We present a new algorithm that utilizes the exact co-
variance matrix avoiding the approximation error (we
call it SpecKF for now), and does so in a computa-
tionally eﬃcient way, even for systems with large num-
bers of unknowns. The computational speed-up of the
SpecKF is achieved by updating small cross-covariance
matrices instead of large covariance matrices. The ben-
eﬁt can be considerable, especially in large systems, be-
cause the computational complexity of SpecKF scales
linearly with the number of unknown, as opposed to the
KF that scales quadratically. We investigate the accu-
racy and performance of the SpecKF for a diﬀusion case
with random perturbations. Our results show that the
SpecKF provides high accuracy at a smaller computa-
tional cost than the Ensemble Kalman Filter (which is a
very popular KF variant).

The Kalman ﬁltering process has two steps: (i) the
prediction of the state at time tk+1 using the forward
model and the current estimate at time tk, and (ii) the
update of the predicted state at time tk+1 based on newly

∗

Email addresses: hojjatgh@stanford.edu (Hojat

Ghorbanidehno), hslee88@stanford.edu (Hee Sun Lee )

Preprint submitted to Elsevier

available measurements. Consider a state estimate
vector sk ∈ Rm and a vector of noisy measurements
zk ∈ Rn at time tk. The Kalman Filtering process
forecast, a:
is given in the following recurrence (f:
analysis):

Prediction/Forecast:

s f
k+1
= Fk+1Pa

= Fk+1sa
k
+ Qk+1

kFT
k+1

P f
k+1
Update/Analysis:

(cid:16)

(1a)

(1b)

(1c)

(1d)

(cid:17)−1
(cid:17)

Kk+1 = Pk+1HT
k+1

sa
k+1

= s f

k+1
= P f

(cid:16)

Hk+1P f

k+1HT
+ Rk+1
k+1
yk+1 − Hk+1s f
+ Kt+1
k+1 − Kk+1Hk+1P f

k+1

Pa
k+1

k+1

(1e)
The SpecKF updates cross-covariances instead of co-
variance matrices(P f and Pa), and makes this possible
for arbitrary forward models by means of a forward
model approximation. This approximation brings about
a small and controllable approximation error. The com-
putational cost of estimation with our method is reduced
from O(nm2) to O(n2m) (n: number of measurements,
m: number of unknown), which can be a dramatic de-
crease, especially for large systems where n (cid:28) m. As
a result, our method can handle a large number of un-
knowns in a computationally eﬃcient way, both in terms
of storage and computational time.

2. Derivation of method

The implementation of the KF algorithm for large
scale systems becomes infeasible, because of the high
storage cost and computational cost of the matrix oper-
ations outlined in Equations (1b) to (1e), involving sev-
eral multiplications of m × m matrices when updating
the covariance matrix P.
In our method, we modify-
ing the recurrence matrix operations such that only the
m × n cross-covariance matrices (such as PHT = PaHT
December 12, 2014

and PF = PFT HT ) are stored and updated at every
time step. This modiﬁcation takes advantage of the
Kalman Filter recurrence to calculate products of big
matrices like PHT without explicitly having to construct
and multiply the individual matrices. This is achieved
by multiplying equations (1b) and (1e) by appropriate
Jacobians to obtain:

P f
k+1HT = FPa

kFT HT + QHT
k+1HT − Kk+1HP f

k+1HT

k+1HT = P f
Pa

(2)

(3)

Figure 1: Purturbed solution after 1000 steps

However, after the above modiﬁcations, equation (2)
still involves the product PFT HT , which is computa-
tionally intractable for large m. Expanding this term and
using equations (1b) and (1e), we obtain:

k+1FT HT = (I − Kk+1)P f
Pa
= (I − Kk+1H)(FPa

k+1FT HT
kFT FT HT + QFT HT )

(4)

It becomes apparent that while equations (2) and (3)
can be used to update the cross-covariances using the
recurrence rather than direct matrix-vector multiplica-
tion, the term FPFT FT HT negates this beneﬁt as it in-
volves terms that are equally expensive to compute. To
overcome this, we proceed by discretizing the forward
model F in time with a Taylor series:

F − I = (F)tdt + O(dt2)

(5)

kFT

k+1HT
k+1

kHT + 2Pa

where (F)t is the Jacobian of F with respect to t. Using
the above, we obtain the following:
PFT FT HT = −Pa
+ P((F − I)2)T HT
(6)
where (F − I)2 ∼ O(((Fk)tdt)2). As a result, for a small
dt between data assimilations in the Kalman Filter, the
error introduced by neglecting the last term of equation
(6) is expected to be small. However, since this approx-
imation is used only once within the algorithm (i.e. the
full forward operator F is used in all other calculations
except in the expansion of equation (6)), depending on
the non-linearity of the problem, the error introduced by
this forward model approximation will likely not aﬀect
the results of the ﬁlter signiﬁcantly.

Using the above and deﬁning the new matrices Tk+1 =
P f
k+1FT HT , the
k+1HT , PH
k+1
SpecKF algorithm can be summarized by the following
recurrence:

k+1HT , and PF
k+1

= Pa

= Pa

+ QHT

s f
= Fk+1sa
k
k+1
Tk+1 = Fk+1PF
k
Kk+1 = Tk+1(HTk+1 + R)−1
sa
k+1
PF
k+1

+ Kk+1(zk+1 − Hs f
= s f
= (I − Kk+1H)(−Fk+1PH
+ 2Fk+1PF
+ QFT
k+1HT
k
= (I − Kk+1H)Tk+1

PH
k+1

k+1

k

k+1)

k+1) + O((∆t)2)

(7a)
(7b)
(7c)
(7d)

(7e)
(7f)

3. Validation

In order to validate the SpecKF implementation, we
compare it to the results obtained from the original KF
algorithm; the diﬀerence between the two indicates how
signiﬁcant is the combined error of the forward model
approximation and the low-rank approximation of Q,
which are the two sources of error in the SpecKF al-
gorithm. The benchmark problem we use is the linear
diﬀusion equation in a two-dimensional unit domain,
[0, 1]× [0, 1], where the state (pressure) is contaminated
with random noise:

= D∇2φ + noise

∂φ
∂t

(8)

In equation (8), D represents the diﬀusion coeﬃcient
which is assumed to be spatially and temporally con-
stant. Discretizing equation (8) using explicit Euler in
time and central diﬀerence in space, we obtain:

(cid:17)

+

+ φ(k)
i−1, j
√
10dt w(k)
i, j

+

(9)

(cid:16)
dt
i+1, j − 2φ(k)
(cid:17)
φ(k)
(dx)2
i, j+1 − 2φ(k)
+ φ(k)
φ(k)
i, j−1

i, j

i, j

+

(cid:16)

φ(k+1)
i, j

= φ(k)
i, j

dt
(dy)2

2

√

where w is noise that represents various small and er-
ratic sources and sinks over the domain with zero mean
10dtQ. In this problem Q is
and covariance matrix of
selected from the Gaussian family of covariance func-
tions where Qi, j = exp(−( xi−x j
L )2). Equation 9 is solved
for a 51 × 51 grid resulting in m = 2401 (excluding the
boundaries), with a discretization dx = dy = 0.02, with
Dirichlet boundary conditions at all boundaries and ini-
tial φ = 0 throughout the domain except at boundaries.
For time discretization, a dt = 10−5 is chosen, to satisfy
the numerical stability requirement dt ≤ 4×10−4. There
are 20 point observations uniformly distributed in the
unit domain, with observation error covariance I20×20.
Figure 1 shows the distribution of φ after 1000 time
steps, indicating the distortion of an otherwise smooth
ﬁeld due to the noise added.

In addition to the comparison to the KF results for
validation of the SpecKF, the diﬀusion problem is used
to conduct error analysis and evaluate the computational
eﬃciency of the SpecKF compared to both the KF and
the EnKF.

Figure 2 shows the estimates obtained with SpecKF
at time step 1000. Comparison to Figure 1 indicates that
the SpecKF results provide high accuracy.

(a)

(b)

Figure 3: a) Relative diﬀerence between SpecKF and
KF estimates with time b) Absolute diﬀerence between
SpecKF and KF estimations at time step 1000

the time step taken is small (for numerical stability pur-
poses as outlined previously), and since the error of the
forward model approximation is second order in time.
The contribution of the low-rank approximation of the
Q matrix is also included in this error. It should be men-
tioned that in this problem the SpecKF provides estima-
tion with the same accuracy as the KF method, while
the computational cost of specKF is much smaller than
the computational cost of KF method, specially for the
cases with large number of unknowns (Figure 4).

Figure 2: SpecKF estimation at time step 1000.

(cid:107)φKF(cid:107)

Comparison to the KF results (Figure 3) shows that
the diﬀerence between the estimations obtained by
SpecKF and KF is negligible, with the absolute diﬀer-
ence (cid:107)φS pecKF−φKF(cid:107)
in the order of 10−3, where the true
state varies from −1.5 to 0.5. This shows that SpecKF
is consistent with KF and the error of the forward model
approximation in this case is small. As noted previously,
in this case the time step being used is rather small, rep-
resenting an optimistic case for data assimilation. Nev-
ertheless, the good agreement of SpecKF with KF under
these conditions validates the SpecKF implementation.
It should be noted that the KF estimate is the optimal
estimate for a linear problem with given set of noisy
measurements. As shown in Figure 3 the overall er-
ror added is maintained at low levels, since at all times

Figure 4: Comparison of time taken by full KF and
SpecKF methods for diﬀerent number of unknowns

Finally, we compare the results of the SpecKF for the
diﬀusion problem with EnKF an alternative fast Kalman
Filter algorithms in terms of accuracy of estimation.
The results of each method are compared to the orig-
inal KF algorithm. First, we compare the SpecKF re-
sults to those obtained by the Ensemble Kalman Filter,
using the same 20 noisy measurements. Three diﬀer-
ent ensemble sizes were evaluated, all larger than the
number of measurements, in order to allow the EnKF to
converge. As shown in Figure 5, increasing the ensem-
ble size reduced the relative error of the EnKF, however
in all three cases the EnKF diﬀerence from the KF was
more pronounced compared to the SpecKF. Since the
ensemble sizes were greater than the number of mea-

3

surements, the computational cost of the EnKF in all
three cases was also greater than that of the SpecKF.

With this assumption, we can obtain S and get the de-
sired approximation of P:

P ≈ US UT

4. Application: CO2 monitoring

The second benchmark application evaluates the per-
formance of the SpecKF for the non-linear problem of
CO2 transport in a two dimensional homogeneous do-
main. The accuracy of the SpecKF is compared with
that of the EnKF. The forward model used to simu-
late the injection of CO2 in the subsurface is TOUGH2,
a multi-dimensionsional, multi-phase, multi-component
non-isothermal numerical simulator for ﬂow and trans-
port in porous media (Pruess, 1991; Pruess et al., 1999).
Initially the forward simulation is run for 225 days to
provide the true data for pressure and CO2 saturation,
which are the two state variables we are interested in
tracking with the Kalman Filter. From this data, 25 sat-
urations and 9 pressures (n = 34) are collected every 15
days at locations indicated in Figure 6. These measure-
ments are then contaminated with Gaussian error. Us-
ing these measurements, the Kalman Filter algorithms
are used to estimate the pressure and saturation for the
whole domain, resulting in 2 × 2025 = 4050 unknowns
(m = 4050). The assimilation of data begins on day
30 of the true experiment. The state of the system at
this time would be unknown in practice. For this rea-
son, we initialize the Kalman Filter from a wrong ini-
tial condition corresponding to an approximate knowl-
edge of the location of the CO2 based on the location
of the injection wells. The objective of the Kalman Fil-
ter is to predict the states at subsequent times, based on
these erroneous initial conditions, and the noisy mea-
surements collected. Both ﬁlters are initiated with the
same erroneous initial conditions and the same set of
noisy measurements is assimilated every 15 days. Re-
sults are compared to the true state at diﬀerent times.
We did not compare our results with KF, because im-
plementation of KF method for this problem was very
expensive.

Figure 7 compares the true state with the estimates
obtained by the SpecKF and the EnKF with same com-
putational cost. The SpecKF after the ﬁrst data assim-
ilation step does not give an accurate estimate. How-
ever, as more measurements are assimilated the estima-
tion improves drastically such that the SpecKF estimate
at 90 days greatly resembles the true state. The relative
error of the SpecKF and EnKF is compared in Figure 9,
which shows both methods approximate the true solu-
tion with small relative error. However, when the noise

Figure 5: Comparison between relative error of SpecKF
estimation and EnKF estimation(with 3 diﬀerent ensem-
ble sizes) respect to KF estimation

3.1. Approximation of covariance matrix

The SpecKF algorithm gives the posterior covariance
only at measurement points. However, we may need to
know the uncertainty of the estimates at locations that
are not known a priori. We can obtain an estimate of the
full matrix P by assuming that the posterior covariance
has a low-rank representation:

P ≈ US UT

U is a known, preselected m × n matrix, i.e., we assume
that P can be approximated by a low-rank matrix with
rank equal to the number of measurements.

Then, the cross-covariance HPHT , which is available

in the SpecKF, can be written as:

HPHT ≈ HUS UT HT = (HU)S (HU)T

= (HUS 1/2)(HUS 1/2)T

Then, we perform a Cholesky decomposition of the
known cross-covariance HPHT = VVT . This gives:

V ≈ HUS 1/2

Since V, H and U is known we can obtain an expression
for S 1/2:

S 1/2 = (HU)−1V

This step assumes that HU is non-singular. H is a fat
matrix with n rows, while U is a thin matrix with n
columns. For HU to be non-singular, we need to as-
sume that span(U) ∩ null(H) = ∅. Geometrically, this
means that none of the “important” components of P
are in the null space of the observation matrix H, that
is, if there are components of P (= span(U)) that are not
observed, they cannot be reconstructed by this method.

4

in measurements is small compared to the noise in the
forward model, the accuracy of the EnKF decreases as
shown in Figure 8. In contrast, the accuracy of SpecKF
increases, indicating that SpecKF would be more ro-
bust than EnKF for a wider range of measurement er-
rors. While we recognize that the above performance
comparison may be speciﬁc to the application at hand,
non-linearities, parameterization of the ﬁlters etc, our
results indicate that the SpecKF can be a more reliable
and faster estimation method than the EnKF, especially
for non-linear problems with large numbers of measure-
ments.

Figure 8: Comparison of true saturation with SpecKF
and EnKF estimations for the case with small error.
First row) SpecKF estimation and second row) EnKF
estimation for saturation with same computational cost.

Figure 6: CO2 saturation distribution after 15 days. Red
dots: production wells and blue dots: injection wells.

Figure 7: Comparison of true saturation with SpecKF
and EnKF estimations. First row) True saturation, sec-
ond row) SpecKF estimation and third row) EnKF esti-
mation for saturation with same computational cost

Figure 9: Relative error of the EnKF estimation and the
SpecKF estimation compared to the true solution.

linearly (as opposed to quadratically) with the number
of unknowns and makes the estimation of states in ex-
cess of thousands of unknowns feasible.

The SpecKF algorithm was validated for a linear dif-
fusion problem, and it was shown that for a small time
step between data assimilations the SpecKF gives re-
sults nearly as accurate as the full Kalman Filter. How-
ever, this method does not gives us error covariance ma-
trix, but we showed that the full covariance matrix can
be obtained by using a post processing step based on a
low rank approximation of the covariance matrix. Since,
this approximation is a post processing step, it does not
aﬀect the estimation with SpecKF.

5. Conclusion

References

This project presented the Spectral Kalman Filter, a
new Kalman Filter variant that can be eﬀectively used
for data assimilation in non-linear dynamical systems
with a large number of unknowns. The computational
cost of the SpecKF is dramatically reduced compared to
that of the original Extended Kalman Filter, as it scales

5

Kalman, R., 1960. A new approach to linear ﬁltering and prediction

problems. Journal of Basic Engineering 82, 35–45.

Pruess, K., 1991. TOUGH2: A general-purpose numerical simulator
for multiphase ﬂuid and heat ﬂow. NASA STI/Recon Technical
Report N 92.

Pruess, K., Oldenburg, C., Moridis, G., 1999. Tough2 user’s guide,

version 2.0. Lawrence Berkeley National Laboratory, Berkeley .

