Enforcing Least Privilege with Android Permissions in

Mobile App Development

Emmanuel Bello-Ogunu, Dr. Mohamed Shehab

University of North Carolina at Charlotte

9201 University Blvd
Charlotte, NC 28223

{ebelloog,mshehab}@uncc.edu

1.

INTRODUCTION

Though there is evidence that presenting Android app
permission information to the user in a clear, more context-
dependent way can inﬂuence mobile phone users in choosing
apps that request fewer permissions [4], ultimately users still
tend to make poor privacy and security decisions, especially
when warnings are unclear or inhibitive [1]. As a result,
we believe that code developers should take some respon-
sibility in safeguarding users’ privacy and preventing data
leakage. One way to do this is by enforcing the concept of
“least privilege” [5] in application development. Within this
context, we are addressing the permission model in Android
applications. Fewer permissions means a more eﬀective per-
mission system, so developers should apply this concept to
the permission model. We propose PermitMe, which is a
tool built as a plugin for the Eclipse IDE for static analy-
sis on Android applications. It enforces “least privilege” by
providing feedback to developers on missing or extraneous
Android permissions.

2. RELATED WORK

Au et al. developed a version-independent permission
plugin called PScout–short for Permission Scout–that per-
forms static analysis to retrieve the permission speciﬁcation
from Android applications [2]. Evaluation was done with a
sample of 1,260 applications on the basis of completeness and
soundness in determining overprivileged apps. It was com-
pared against another research tool called Stowaway [3],
and PScout proved to be signiﬁcantly more complete and
sound in permission mappings, but ultimately there was no
signiﬁcant diﬀerence in overprivileging. PScout is not with-
out limitations however.
It can’t handle some API calls
that are invoked through reﬂection (admittedly neither can
ours, though this is an open problem in Android develop-
ment). Furthermore, PScout is very slow, taking 33 hours
to extract the permission speciﬁcation from the Android 4.0
framework.

Vidas et al. also developed an Eclipse plugin called Per-
mission Check Tool, that extracts the Android permission
speciﬁcation from an app and aid developers in utilizing least
privilege during permissioning [6]. The functionality of the
Permission Check Tool is similar to that of PermitMe.
However, the tool has some limitations. Its permission map
only covers Android 2.2. Furthermore, it is built by parsing
the Android API documentation, which is known to be in-
complete. Lastly, the plugin strictly analyzes source code,
and there is no ready library or dataset of Android appli-
cation source code readily available, so they did not present

extensive empirical analysis of the plugin. The PermitMe
plugin described in the next section is an improvement over
the Permission Check Tool, with empirical data collected
to support this claim.

3. OUR PROPOSED APPROACH

PermitMe is compromised of an API-permission map-

ping database and a static analysis engine. The API-permission
mapping database was composed by combining the map-
pings generated by both Stowaway and PScout. We gen-
erated separate mappings for each of the Android versions.
The permissions requested by the current application are
extracted from the AndroidManifest.xml ﬁle. The static
analysis engine uses the Abstract Syntax Tree (AST) to
scan Java source ﬁles and ASM for bytecode to ﬁnd API
references associated with the app. Each API reference is
compared against the generated API-permission mapping to
determine whether the permissions present are missing, used
(required ) or unused (extraneous).

The current Android APIs supported by the plugin are
from versions 2.6 to 4.0, and the current IDE supported is
the Eclipse platform, versions Indigo and Juno.

4. METHODOLOGY

We recruited 20 participants from a Mobile Application

Development course being taught during the Fall 2013 semester.
Of them, 60% reported an Advanced level or programming
knowledge/expertise, 35% reported Moderate, and 5% re-
ported Novice. We performed the study in an on-campus
lab; participants were given debugging-related tasks for two
Android applications, one requiring one permission, and the
other requiring four, and both having extraneous ones. Par-
ticipants were randomly assigned to one of the two condi-
tions, either with or without use of the plugin, and upon
completion of the tasks and online survey, they were paid
$5 in the form of a Starbucks gift card. They were ob-
served unobtrusively, and made aware at start of the sur-
vey that results were anonymous. Time to complete, along
with Number of Missing Permissions and Number of Extra
Permissions, are the measures upon which the study results
were evaluated. Additionally, the survey results provided an
evaluation of the Usability of the PermitMe plugin, in the
areas of Ease of Use, Trustworthiness of results, Eﬀective-
ness in accomplishing what was intended, and Readability of
output. We hypothesize that the PermitMe plugin is more
eﬃcient, eﬀective, and usable in helping a developer reduce
the number of extraneous permissions and incorporate any
missing permissions than other resources.

1

Enforcing Least Privilege with Android Permissions in

Mobile App Development

Emmanuel Bello-Ogunu, Dr. Mohamed Shehab

University of North Carolina at Charlotte

9201 University Blvd
Charlotte, NC 28223

{ebelloog,mshehab}@uncc.edu

1.

INTRODUCTION

Though there is evidence that presenting Android app
permission information to the user in a clear, more context-
dependent way can inﬂuence mobile phone users in choosing
apps that request fewer permissions [4], ultimately users still
tend to make poor privacy and security decisions, especially
when warnings are unclear or inhibitive [1]. As a result,
we believe that code developers should take some respon-
sibility in safeguarding users’ privacy and preventing data
leakage. One way to do this is by enforcing the concept of
“least privilege” [5] in application development. Within this
context, we are addressing the permission model in Android
applications. Fewer permissions means a more eﬀective per-
mission system, so developers should apply this concept to
the permission model. We propose PermitMe, which is a
tool built as a plugin for the Eclipse IDE for static analy-
sis on Android applications. It enforces “least privilege” by
providing feedback to developers on missing or extraneous
Android permissions.

2. RELATED WORK

Au et al. developed a version-independent permission
plugin called PScout–short for Permission Scout–that per-
forms static analysis to retrieve the permission speciﬁcation
from Android applications [2]. Evaluation was done with a
sample of 1,260 applications on the basis of completeness and
soundness in determining overprivileged apps. It was com-
pared against another research tool called Stowaway [3],
and PScout proved to be signiﬁcantly more complete and
sound in permission mappings, but ultimately there was no
signiﬁcant diﬀerence in overprivileging. PScout is not with-
out limitations however.
It can’t handle some API calls
that are invoked through reﬂection (admittedly neither can
ours, though this is an open problem in Android develop-
ment). Furthermore, PScout is very slow, taking 33 hours
to extract the permission speciﬁcation from the Android 4.0
framework.

Vidas et al. also developed an Eclipse plugin called Per-
mission Check Tool, that extracts the Android permission
speciﬁcation from an app and aid developers in utilizing least
privilege during permissioning [6]. The functionality of the
Permission Check Tool is similar to that of PermitMe.
However, the tool has some limitations. Its permission map
only covers Android 2.2. Furthermore, it is built by parsing
the Android API documentation, which is known to be in-
complete. Lastly, the plugin strictly analyzes source code,
and there is no ready library or dataset of Android appli-
cation source code readily available, so they did not present

extensive empirical analysis of the plugin. The PermitMe
plugin described in the next section is an improvement over
the Permission Check Tool, with empirical data collected
to support this claim.

3. OUR PROPOSED APPROACH

PermitMe is compromised of an API-permission map-

ping database and a static analysis engine. The API-permission
mapping database was composed by combining the map-
pings generated by both Stowaway and PScout. We gen-
erated separate mappings for each of the Android versions.
The permissions requested by the current application are
extracted from the AndroidManifest.xml ﬁle. The static
analysis engine uses the Abstract Syntax Tree (AST) to
scan Java source ﬁles and ASM for bytecode to ﬁnd API
references associated with the app. Each API reference is
compared against the generated API-permission mapping to
determine whether the permissions present are missing, used
(required ) or unused (extraneous).

The current Android APIs supported by the plugin are
from versions 2.6 to 4.0, and the current IDE supported is
the Eclipse platform, versions Indigo and Juno.

4. METHODOLOGY

We recruited 20 participants from a Mobile Application

Development course being taught during the Fall 2013 semester.
Of them, 60% reported an Advanced level or programming
knowledge/expertise, 35% reported Moderate, and 5% re-
ported Novice. We performed the study in an on-campus
lab; participants were given debugging-related tasks for two
Android applications, one requiring one permission, and the
other requiring four, and both having extraneous ones. Par-
ticipants were randomly assigned to one of the two condi-
tions, either with or without use of the plugin, and upon
completion of the tasks and online survey, they were paid
$5 in the form of a Starbucks gift card. They were ob-
served unobtrusively, and made aware at start of the sur-
vey that results were anonymous. Time to complete, along
with Number of Missing Permissions and Number of Extra
Permissions, are the measures upon which the study results
were evaluated. Additionally, the survey results provided an
evaluation of the Usability of the PermitMe plugin, in the
areas of Ease of Use, Trustworthiness of results, Eﬀective-
ness in accomplishing what was intended, and Readability of
output. We hypothesize that the PermitMe plugin is more
eﬃcient, eﬀective, and usable in helping a developer reduce
the number of extraneous permissions and incorporate any
missing permissions than other resources.

1

5. RESULTS
5.1 User Study Results

For task 1, the mean completion time for participants who
did not use the PermitMe plugin was 722.5 seconds (about
12 minutes), and 234.8 seconds (4 minutes) for those who
used the plugin. Since not all of our participant data was
normally distributed, we used the Mann-Whitney-Wilcoxon
Test to compare the two groups, show statistically signiﬁ-
cant diﬀerence (p-value < 0.001). With Task 2, we found
the same. Time to complete Task 2 for non-plugin users was
a mean of 792.3 seconds (13 minutes), compared to 406.6
seconds (6.7 minutes) for plugin users, with a Wilcoxon test
producing a p-value < 0.001. Given that completion time is
our measure of eﬃciency, these results support our hypoth-
esis. Table 1 shows the mean time comparisons for tasks 1
and 2.

There was no signiﬁcant diﬀerence between the Missing
Permissions and Extra Permissions for Task 1. This was ex-
pected given that there was only one Missing permission and
one Extraneous permission. For Task 2, the mean Number of
Missing Permissions for non-plugin users was 2.7, and 0 for
plugin users. Using a Wilcoxon test, we found statistically
signiﬁcant diﬀerence between the two groups (p < 0.001).
The mean Number of Extra Permissions for non-plugin users
was 1.1, and 0.4 for plugin users. Using a Wilcoxon test, we
found statistical signiﬁcance between the two groups (p <
0.05). Table 1 shows the diﬀerence in performance between
the two groups. This too supports our Hypothesis’ claim of
eﬀectiveness.

Table 1: Comparison Results for Tasks 1 and 2

Measure

Without Plugin With Plugin p-value

(µ, σ)

(µ, σ)

Task 1
Time (seconds)
No. Missing Perms
No. Extra Perms
Task 2
Time (seconds)
No. Missing Perms
No. Extra Perms

(722.5, 194.75)

(0.1, 0.32)
(0.1, 0.32)

(792.3, 239.51)

(2.7, 1.16)
(1.1, 0.88)

(234.8, 35.14) < 0.001
0.3434

(0.0, 0.0)
(0.1, 0.32)

1

(406.6, 115.41) < 0.001
< 0.001

(0.0, 0.0)
(0.4, 0.52)

0.046

5.2 Survey Results

Analyzing the 5-point Likert-scale exit survey questions,
there was no signiﬁcant diﬀerence between our plugin and
online forum resources with regard to Trustworthiness, Ef-
fectiveness, and Readability. However, there was a signiﬁ-
cant diﬀerence (p-value<0.05) for Ease of Use (4.5 compared
to 3.86). This can be attributed to the diﬃculty involved in
navigating responses sites like Stack Overﬂow. Overall, the
plugin is as good as available online resources with regards
to those ﬁrst three measures, and signiﬁcantly better as far
as Ease of Use.

Considering the comparison between PermitMe and Log-
Cat, the measures that proved signiﬁcantly diﬀerent in favor
of the plugin were Ease of Use (p-value=0.009), Eﬀectiveness
(p-value=0.0258), and Readability (p-value=0.0024). This
is an expected result as it is very diﬃcult to read and use the
Android LogCat output. Since Trustworthiness of LogCat
and the plugin had means of 4.1 and 4.3 respectively, this

2

Table 2: Comparison with other Help Resources

Measure
(5 Point Likert-Scale)
Ease of Use
Trustworthiness
Eﬀectiveness
Readability
Measure
(5 Point Likert-Scale)
Ease of Use
Trustworthiness
Eﬀectiveness
Readability

Online Resources Our Plugin p-value

(µ, σ)

(3.86, 0.51)
(4.38, 0.72)
(4.38, 0.81)
(4.50, 0.73)

LogCat

(µ, σ)

(3.10, 1.29)
(4.10, 0.74)
(3.60, 1.07)
(2.80, 1.14)

(µ, σ)

0.0239
(4.50, 0.71)
0.8154
(4.30, 0.82)
0.4602
(4.60, 0.69)
0.7607
(4.40, 0.84)
Our Plugin p-value

(µ, σ)

(4.50, 0.71)
(4.30, 0.82)
(4.60, 0.67)
(4.40, 0.84)

0.0090
0.5744
0.0258
0.0024

meant the suggestions our plugin oﬀered were as trusted by
the users as that of the Android logging platform. Table
2 shows the usability comparisons between assistance from
PermitMe plugin and LogCat. Overall, the feedback pro-
vided by the plugin was received as well as or better than
many of the common resources that developers rely for assis-
tance, so this supports the usability claim of our Hypothesis.
6. CONCLUSION

In this paper, we presented PermitMe, a tool developed
for integration within the Eclipse IDE for the purpose of de-
veloping more privacy aware Android applications. This is
accomplished by enforcing the principle of “least privilege”
through minimization of permissions requested by an app.
We hypothesized that the PermitMe plugin would prove
more eﬃcient, eﬀective, and usable for developers than other
resources. Through an empirical analysis of 20 Android de-
velopers, we found that the plugin was indeed successful in
this endeavor.
7. ACKNOWLEDGMENTS

We thank Swapnil Thorat for his assistance in developing
the PermitMe plugin. We would also like to thank Dr.
Zachary Wartell and Osarieme Omokaro for reviewing and
providing feedback on this paper.
8. REFERENCES
[1] A. Acquisti and J. Grossklags. Privacy and rationality

in individual decision making. Security & Privacy,
IEEE, 3(1):26–33, 2005.

[2] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie.

Pscout: analyzing the android permission speciﬁcation.
In Proceedings of the 2012 ACM conference on
Computer and communications security, pages 217–228.
ACM, 2012.

[3] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner.

Android permissions demystiﬁed. In Proceedings of the
18th ACM conference on Computer and
communications security, pages 627–638. ACM, 2011.
[4] N. Sadeh, L. F. Cranor, and P. G. Kelley. Privacy as

part of the app decision-making process, 2013.

[5] J. H. Saltzer and M. D. Schroeder. The protection of
information in computer systems. Proceedings of the
IEEE, 63(9):1278–1308, 1975.

[6] T. Vidas, N. Christin, and L. Cranor. Curbing android
permission creep. In Proceedings of the Web, volume 2,
2011.

