Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

truthfulness and economical efﬁciency (social welfare maxi-
mization). Unfortunately, a VCG auction requires solving the
NP-hard problem of social welfare optimization multiple times
for calculating externalities as user payments, and becomes
computationally infeasible as the system size grows.

We design a randomized combinatorial auction for dy-
namic resource provisioning, which is computationally efﬁ-
cient, truthful in expectation, and surprisingly, simultaneously
guarantees the same social welfare approximation factor of α
as does the cooperative approximation algorithm. Note that the
latter assumes truthful bidding for free, and can afford to focus
on algorithmically maximizing the social welfare by ignoring
potential strategic bidding from selﬁsh cloud users, while the
former is bound to pay close attention at the same time to
eliciting truth-telling, a property not usually attained without
a compromise in social welfare [7], [8], [9].

Below is a high-level overview of the structure of the
randomized VM auction. We ﬁrst simulate a fractional VCG
auction based on the linear programming relaxation (LPR) of
the social welfare maximization integer program (IP). Then
we utilize a pair of tailored primal and dual linear programs
(LPs) to decompose the optimal fractional solution of the
LPR into a weighted combination of integer solutions to the
IP. This pair of LPs exploit the underlying packing nature
of the social welfare maximization IP, and are solved using
the ellipsoid algorithm with the cooperative α-approximation
algorithm acting as a separation oracle. In this process, we
prove and utilize the fact that the approximation algorithm also
veriﬁes an integrality gap of α between the IP and the LPR.
Each integer solution is selected randomly with probability
equal to its weight calculated during the decomposition, and
contains information for instructing the cloud provider to
conduct both VM provisioning and VM allocation. Fractional
VCG payments calculated at the beginning are ﬁnally scaled
down by the approximation factor α, for ensuring that the
resulting randomized auction inherits its truthfulness from the
fractional VCG auction.

We have implemented the randomized auction and evaluated
it against traces from Google Cluster Data [10] through exten-
sive simulation studies. We found that dynamic provisioning
usually outperforms static provisioning in terms of social
welfare by a ratio on the order of 50%. An exciting observation
is that the primal-dual cooperative approximation algorithm
approaches optimal social welfare within a gap of 10% in all
the scenarios tested, performing much better beyond the the-
oretically proven approximation factor of α ∼ 2.72 in typical
scenarios. Consequently, the randomized auction can provide
better guarantee in social welfare guarantee in practice. Such
empirical observation further motivates our discussions on
improving the cloud’s revenue by scaling fractional VCG
payments with a ratio smaller than 2.72, for striking a ﬂexible
balance between absolute truthfulness and seller revenue.

In the rest of the paper, we discuss related work in Sec.
II, and introduce the system model in Sec. III. We design
a primal-dual approximation algorithm and analyze its ap-
proximation ratio in Sec. IV, and further utilize it in Sec.

V to design the randomized VM auction, evaluated through
simulation studies in Sec. VI. Sec. VII concludes the paper.

II. PREVIOUS LITERATURE

As an efﬁcient resource allocation mechanism in economic
markets, auctions have been studied substantially over the
past few decades. The celebrated VCG auction [11], [12],
[13] represents a general truthful auction framework, under
which buyers have no incentive to submit falsiﬁed bids. A
VCG auction requires solving the social welfare maximization
problem to optimum, for calculating payments of winning
buyers. Consequently, it becomes computationally infeasible
when exact social welfare maximization is NP-hard, as is the
case for dynamic cloud resource provisioning in this work.
A VCG auction loses its truthful property if approximation
algorithms are applied for social welfare maximization.

For non-VCG style of auction design, custom techniques
speciﬁc to the problem at hand are required for guaranteeing
truthfulness of the resulting auction mechanism. In a sequence
of recent work that originated from theoretical computer sci-
ence [14], [8], [9], [15], a decomposition technique is designed
for translating fractional solutions to integer solutions, for
packing type integer programs. The key technique lies in a
pair of tailored primal and dual LPs that exploit such packing
property, which can be solved with an efﬁcient approximation
algorithm that can verify the integrality gap between the IP
and its LPR. To the authors’ knowledge, this work is the ﬁrst
in the ﬁeld of cloud computing that successfully applies such
a primal-dual decomposition technique.

The design of VM auctions has been studied in a series of
work in recent cloud computing literature. For instance, Zhang
et al. [16] study the resource allocation problem with realtime
demand arrivals, and propose a truthful online auction-based
allocation policy. Auctions also take an important role in
the exchange of computing resources among members in a
federated cloud in number of recent work [17], [18].

Zaman et al. [6] propose an auction-based VM alloca-
tion mechanism, named CA-GREEDY, for the case of static
resource provisioning, where the cloud provider has a pre-
determined number of VMs for sale in each VM type.
However,
the approximation ratio of the mechanism they
designed is rather large, especially when a large number of VM
instances are provisioned, a rather common scenario in real-
world cloud computing. The authors also consider the dynamic
provisioning case [5], and present a truthful mechanism. No
guarantee is provided on the social welfare approximation ratio
of their mechanism, though. In contrast, the randomized VM
auction we design is not only truthful, but also achieves close-
to-optimum social welfare maximization.

III. SYSTEM MODEL AND PRELIMINARIES

We consider auction-based resource provisioning and VM
allocation in a cloud market. The cloud provider (auctioneer)
leases resources packed in VMs to cloud users through round-
by-round auctions. The cloud provider has a pool of t types
of resources. The total amount of type k resource is ck. The

Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

truthfulness and economical efﬁciency (social welfare maxi-
mization). Unfortunately, a VCG auction requires solving the
NP-hard problem of social welfare optimization multiple times
for calculating externalities as user payments, and becomes
computationally infeasible as the system size grows.

We design a randomized combinatorial auction for dy-
namic resource provisioning, which is computationally efﬁ-
cient, truthful in expectation, and surprisingly, simultaneously
guarantees the same social welfare approximation factor of α
as does the cooperative approximation algorithm. Note that the
latter assumes truthful bidding for free, and can afford to focus
on algorithmically maximizing the social welfare by ignoring
potential strategic bidding from selﬁsh cloud users, while the
former is bound to pay close attention at the same time to
eliciting truth-telling, a property not usually attained without
a compromise in social welfare [7], [8], [9].

Below is a high-level overview of the structure of the
randomized VM auction. We ﬁrst simulate a fractional VCG
auction based on the linear programming relaxation (LPR) of
the social welfare maximization integer program (IP). Then
we utilize a pair of tailored primal and dual linear programs
(LPs) to decompose the optimal fractional solution of the
LPR into a weighted combination of integer solutions to the
IP. This pair of LPs exploit the underlying packing nature
of the social welfare maximization IP, and are solved using
the ellipsoid algorithm with the cooperative α-approximation
algorithm acting as a separation oracle. In this process, we
prove and utilize the fact that the approximation algorithm also
veriﬁes an integrality gap of α between the IP and the LPR.
Each integer solution is selected randomly with probability
equal to its weight calculated during the decomposition, and
contains information for instructing the cloud provider to
conduct both VM provisioning and VM allocation. Fractional
VCG payments calculated at the beginning are ﬁnally scaled
down by the approximation factor α, for ensuring that the
resulting randomized auction inherits its truthfulness from the
fractional VCG auction.

We have implemented the randomized auction and evaluated
it against traces from Google Cluster Data [10] through exten-
sive simulation studies. We found that dynamic provisioning
usually outperforms static provisioning in terms of social
welfare by a ratio on the order of 50%. An exciting observation
is that the primal-dual cooperative approximation algorithm
approaches optimal social welfare within a gap of 10% in all
the scenarios tested, performing much better beyond the the-
oretically proven approximation factor of α ∼ 2.72 in typical
scenarios. Consequently, the randomized auction can provide
better guarantee in social welfare guarantee in practice. Such
empirical observation further motivates our discussions on
improving the cloud’s revenue by scaling fractional VCG
payments with a ratio smaller than 2.72, for striking a ﬂexible
balance between absolute truthfulness and seller revenue.

In the rest of the paper, we discuss related work in Sec.
II, and introduce the system model in Sec. III. We design
a primal-dual approximation algorithm and analyze its ap-
proximation ratio in Sec. IV, and further utilize it in Sec.

V to design the randomized VM auction, evaluated through
simulation studies in Sec. VI. Sec. VII concludes the paper.

II. PREVIOUS LITERATURE

As an efﬁcient resource allocation mechanism in economic
markets, auctions have been studied substantially over the
past few decades. The celebrated VCG auction [11], [12],
[13] represents a general truthful auction framework, under
which buyers have no incentive to submit falsiﬁed bids. A
VCG auction requires solving the social welfare maximization
problem to optimum, for calculating payments of winning
buyers. Consequently, it becomes computationally infeasible
when exact social welfare maximization is NP-hard, as is the
case for dynamic cloud resource provisioning in this work.
A VCG auction loses its truthful property if approximation
algorithms are applied for social welfare maximization.

For non-VCG style of auction design, custom techniques
speciﬁc to the problem at hand are required for guaranteeing
truthfulness of the resulting auction mechanism. In a sequence
of recent work that originated from theoretical computer sci-
ence [14], [8], [9], [15], a decomposition technique is designed
for translating fractional solutions to integer solutions, for
packing type integer programs. The key technique lies in a
pair of tailored primal and dual LPs that exploit such packing
property, which can be solved with an efﬁcient approximation
algorithm that can verify the integrality gap between the IP
and its LPR. To the authors’ knowledge, this work is the ﬁrst
in the ﬁeld of cloud computing that successfully applies such
a primal-dual decomposition technique.

The design of VM auctions has been studied in a series of
work in recent cloud computing literature. For instance, Zhang
et al. [16] study the resource allocation problem with realtime
demand arrivals, and propose a truthful online auction-based
allocation policy. Auctions also take an important role in
the exchange of computing resources among members in a
federated cloud in number of recent work [17], [18].

Zaman et al. [6] propose an auction-based VM alloca-
tion mechanism, named CA-GREEDY, for the case of static
resource provisioning, where the cloud provider has a pre-
determined number of VMs for sale in each VM type.
However,
the approximation ratio of the mechanism they
designed is rather large, especially when a large number of VM
instances are provisioned, a rather common scenario in real-
world cloud computing. The authors also consider the dynamic
provisioning case [5], and present a truthful mechanism. No
guarantee is provided on the social welfare approximation ratio
of their mechanism, though. In contrast, the randomized VM
auction we design is not only truthful, but also achieves close-
to-optimum social welfare maximization.

III. SYSTEM MODEL AND PRELIMINARIES

We consider auction-based resource provisioning and VM
allocation in a cloud market. The cloud provider (auctioneer)
leases resources packed in VMs to cloud users through round-
by-round auctions. The cloud provider has a pool of t types
of resources. The total amount of type k resource is ck. The

cloud provider offers m types of VMs, VM1, ..., VMm. A
VMj instance consumes rk

j amount of type k resource.

Let B denote the set of cloud users, acting as bidders in the
auction. Each user i ∈B can submit as many bids as it wishes.
Let Bi denote the set of bids submitted by cloud user i, and
{Bi}i∈B contains all bids from all users. Each bid speciﬁes
a desired VM bundle S = (nS1 ,··· , nSm) along with the
bidding price bi(S), where nSj is the number of VMj instances
that cloud user i requests in S. We assume that a single bid
alone does not exceed the capacity constraint for any type of
resource, i.e., ∀1 ≤ k ≤ t, Rk ! maxi∈B,S∈Bi!m
j <
ck. Let xi(S) be a binary variable indicating whether user
i wins bundle S. Then x = {xi(S)}i∈B,S∈Bi represents an
allocation outcome. Let vi(x) denote the true valuation of
cloud user i, known only to i itself. Let Πi be the priced
charged to a winning user i. Then the utility ui for user i is:

j=1 nSj rk

if i receives a VM bundle
otherwsie

ui(Bi, B−i) =! vi(x) − Πi
where B−i = {Bj}j∈B\{i} is a set of all the bids except Bi.
Deﬁnition A (randomized) auction is truthful (in expectation)
if for any bidder i, reporting its true valuation in the bid max-
imizes its (expected) utility, regardless of the bids submitted by
other bidders.

(1)

0

We adopt the XOR bidding language, in which a user can
win at most one bid even if it submits multiple bids [15],
leading to the ﬁrst constraint for VM allocation:

xi(S) ≤ 1,∀i ∈B

(2)

The ﬁnite supply of each type of cloud resource translates

into the capacity constraint at the cloud provider:
"i∈B "S∈Bi
xi(S)nSj ≤ Nj,∀1 ≤ j ≤ m
m"j=1

j ≤ ck,∀1 ≤ k ≤ t

Njrk

where Nj is the number of VMj instances provisioned. The
two groups of inequalities in (3) can be merged into an
equivalent, more compact capacity constraint:

"S∈Bi

The social welfare maximization problem can now be

j ) ≤ ck,∀1 ≤ k ≤ t

(4)

nSj rk

xi(S)(

m"j=1

"i∈B "S∈Bi
maximize DP (B) ="i∈B "S∈Bi

formulated:

subject to:

bi(S)xi(S)

(5)

"S∈Bi
m"j=1

xi(S) ≤ 1,

∀i ∈B

"i∈B "S∈Bi

xi(S)(

nSj rk

j ) ≤ ck,

∀1 ≤ k ≤ t
xi(S) ∈{ 0, 1}, ∀i ∈B ,S∈ Bi

(5a)

(5b)

(5c)

where DP (B) denotes the objective function of IP (5). Note
that in a truthful auction, the bid bi(S) can be assumed to be
user i’s valuation of VM bundle S.
Theorem 1. The social welfare maximization problem deﬁned
in IP (5) is NP-hard.

Proof: We construct a polynomial-time reduction to IP (5)
from the knapsack problem, a classic combinatorial optimiza-
tion problem that is proven NP-hard [19]:

max

x # n"i=1

vixi subject to

n"i=1

wixi ≤ W, xi ∈{ 0, 1}$

j=1 nSj rk

Given an instance A = (v1,··· , vn, w1,··· , wn, n, W )
of the knapsack problem, we map it to an instance of the
social welfare maximization problem A# = (|B| = n,|Bi| =
1, bi(S) = vi, t = 1,!m
j = wi, ci = W ), in which
each cloud user submits a single bid, and the resource pool
contains one type of resource. Such mapping can clearly be
done in polynomial time. If there exists an algorithm solving
the social welfare maximization problem A#, then it solves
the corresponding knapsack problem A as well, and vice
versa. Consequently, the knapsack problem can be viewed as
a special case of the social welfare maximization problem,
which must be NP-hard as well.

Theorem 1 reveals that solving IP (5) is NP-hard, and is
computationally infeasible for a large input. Nonetheless, we
may consider the LP relaxation of IP (5) by relaxing its last
constraint (5c) to 1:

xi(S) ≥ 0,∀i ∈B ,S∈ Bi

(5c’)

Introducing dual variable vectors y and z to constraints (5a)
and (5b) respectively, we can formulate the dual of the LPR,
to be used in the primal-dual algorithm design in Sec. IV:

minimize "i∈B

t"k=1

yi +

ckzk

(6)

yi +

t"k=1

m"j=1

nSj rk

j zk ≥ bi(S)
∀i ∈B ,S∈ Bi
yi ≥ 0, zk ≥ 0 ∀i ∈B , 1 ≤ k ≤ t

(6a)

(6b)

IV. A PRIMAL-DUAL COOPERATIVE APPROXIMATION

ALGORITHM

We ﬁrst design a polynomial-time approximation algorithm
for the social welfare maximization problem in IP (5), by
assuming that truthful bids are already known and targeting a
small approximation ratio in social welfare. Such a cooperative
approximation algorithm serves as an important building block
in the design of the randomized VM auction in Sec. V, which
further elicits truthful bids from strategic cloud users.
A. The Primal-Dual Approximation Algorithm

We design a greedy primal-dual algorithm for IP (5),
partially inspired by the primal-dual framework due to Briest et
1Constraint xi(S) ≤ 1,∀i ∈B ,S∈ Bi is redundant (implied by (5a) and
(5c’)) and removed from the LPR.

(3)

subject to:

Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

truthfulness and economical efﬁciency (social welfare maxi-
mization). Unfortunately, a VCG auction requires solving the
NP-hard problem of social welfare optimization multiple times
for calculating externalities as user payments, and becomes
computationally infeasible as the system size grows.

We design a randomized combinatorial auction for dy-
namic resource provisioning, which is computationally efﬁ-
cient, truthful in expectation, and surprisingly, simultaneously
guarantees the same social welfare approximation factor of α
as does the cooperative approximation algorithm. Note that the
latter assumes truthful bidding for free, and can afford to focus
on algorithmically maximizing the social welfare by ignoring
potential strategic bidding from selﬁsh cloud users, while the
former is bound to pay close attention at the same time to
eliciting truth-telling, a property not usually attained without
a compromise in social welfare [7], [8], [9].

Below is a high-level overview of the structure of the
randomized VM auction. We ﬁrst simulate a fractional VCG
auction based on the linear programming relaxation (LPR) of
the social welfare maximization integer program (IP). Then
we utilize a pair of tailored primal and dual linear programs
(LPs) to decompose the optimal fractional solution of the
LPR into a weighted combination of integer solutions to the
IP. This pair of LPs exploit the underlying packing nature
of the social welfare maximization IP, and are solved using
the ellipsoid algorithm with the cooperative α-approximation
algorithm acting as a separation oracle. In this process, we
prove and utilize the fact that the approximation algorithm also
veriﬁes an integrality gap of α between the IP and the LPR.
Each integer solution is selected randomly with probability
equal to its weight calculated during the decomposition, and
contains information for instructing the cloud provider to
conduct both VM provisioning and VM allocation. Fractional
VCG payments calculated at the beginning are ﬁnally scaled
down by the approximation factor α, for ensuring that the
resulting randomized auction inherits its truthfulness from the
fractional VCG auction.

We have implemented the randomized auction and evaluated
it against traces from Google Cluster Data [10] through exten-
sive simulation studies. We found that dynamic provisioning
usually outperforms static provisioning in terms of social
welfare by a ratio on the order of 50%. An exciting observation
is that the primal-dual cooperative approximation algorithm
approaches optimal social welfare within a gap of 10% in all
the scenarios tested, performing much better beyond the the-
oretically proven approximation factor of α ∼ 2.72 in typical
scenarios. Consequently, the randomized auction can provide
better guarantee in social welfare guarantee in practice. Such
empirical observation further motivates our discussions on
improving the cloud’s revenue by scaling fractional VCG
payments with a ratio smaller than 2.72, for striking a ﬂexible
balance between absolute truthfulness and seller revenue.

In the rest of the paper, we discuss related work in Sec.
II, and introduce the system model in Sec. III. We design
a primal-dual approximation algorithm and analyze its ap-
proximation ratio in Sec. IV, and further utilize it in Sec.

V to design the randomized VM auction, evaluated through
simulation studies in Sec. VI. Sec. VII concludes the paper.

II. PREVIOUS LITERATURE

As an efﬁcient resource allocation mechanism in economic
markets, auctions have been studied substantially over the
past few decades. The celebrated VCG auction [11], [12],
[13] represents a general truthful auction framework, under
which buyers have no incentive to submit falsiﬁed bids. A
VCG auction requires solving the social welfare maximization
problem to optimum, for calculating payments of winning
buyers. Consequently, it becomes computationally infeasible
when exact social welfare maximization is NP-hard, as is the
case for dynamic cloud resource provisioning in this work.
A VCG auction loses its truthful property if approximation
algorithms are applied for social welfare maximization.

For non-VCG style of auction design, custom techniques
speciﬁc to the problem at hand are required for guaranteeing
truthfulness of the resulting auction mechanism. In a sequence
of recent work that originated from theoretical computer sci-
ence [14], [8], [9], [15], a decomposition technique is designed
for translating fractional solutions to integer solutions, for
packing type integer programs. The key technique lies in a
pair of tailored primal and dual LPs that exploit such packing
property, which can be solved with an efﬁcient approximation
algorithm that can verify the integrality gap between the IP
and its LPR. To the authors’ knowledge, this work is the ﬁrst
in the ﬁeld of cloud computing that successfully applies such
a primal-dual decomposition technique.

The design of VM auctions has been studied in a series of
work in recent cloud computing literature. For instance, Zhang
et al. [16] study the resource allocation problem with realtime
demand arrivals, and propose a truthful online auction-based
allocation policy. Auctions also take an important role in
the exchange of computing resources among members in a
federated cloud in number of recent work [17], [18].

Zaman et al. [6] propose an auction-based VM alloca-
tion mechanism, named CA-GREEDY, for the case of static
resource provisioning, where the cloud provider has a pre-
determined number of VMs for sale in each VM type.
However,
the approximation ratio of the mechanism they
designed is rather large, especially when a large number of VM
instances are provisioned, a rather common scenario in real-
world cloud computing. The authors also consider the dynamic
provisioning case [5], and present a truthful mechanism. No
guarantee is provided on the social welfare approximation ratio
of their mechanism, though. In contrast, the randomized VM
auction we design is not only truthful, but also achieves close-
to-optimum social welfare maximization.

III. SYSTEM MODEL AND PRELIMINARIES

We consider auction-based resource provisioning and VM
allocation in a cloud market. The cloud provider (auctioneer)
leases resources packed in VMs to cloud users through round-
by-round auctions. The cloud provider has a pool of t types
of resources. The total amount of type k resource is ck. The

cloud provider offers m types of VMs, VM1, ..., VMm. A
VMj instance consumes rk

j amount of type k resource.

Let B denote the set of cloud users, acting as bidders in the
auction. Each user i ∈B can submit as many bids as it wishes.
Let Bi denote the set of bids submitted by cloud user i, and
{Bi}i∈B contains all bids from all users. Each bid speciﬁes
a desired VM bundle S = (nS1 ,··· , nSm) along with the
bidding price bi(S), where nSj is the number of VMj instances
that cloud user i requests in S. We assume that a single bid
alone does not exceed the capacity constraint for any type of
resource, i.e., ∀1 ≤ k ≤ t, Rk ! maxi∈B,S∈Bi!m
j <
ck. Let xi(S) be a binary variable indicating whether user
i wins bundle S. Then x = {xi(S)}i∈B,S∈Bi represents an
allocation outcome. Let vi(x) denote the true valuation of
cloud user i, known only to i itself. Let Πi be the priced
charged to a winning user i. Then the utility ui for user i is:

j=1 nSj rk

if i receives a VM bundle
otherwsie

ui(Bi, B−i) =! vi(x) − Πi
where B−i = {Bj}j∈B\{i} is a set of all the bids except Bi.
Deﬁnition A (randomized) auction is truthful (in expectation)
if for any bidder i, reporting its true valuation in the bid max-
imizes its (expected) utility, regardless of the bids submitted by
other bidders.

(1)

0

We adopt the XOR bidding language, in which a user can
win at most one bid even if it submits multiple bids [15],
leading to the ﬁrst constraint for VM allocation:

xi(S) ≤ 1,∀i ∈B

(2)

The ﬁnite supply of each type of cloud resource translates

into the capacity constraint at the cloud provider:
"i∈B "S∈Bi
xi(S)nSj ≤ Nj,∀1 ≤ j ≤ m
m"j=1

j ≤ ck,∀1 ≤ k ≤ t

Njrk

where Nj is the number of VMj instances provisioned. The
two groups of inequalities in (3) can be merged into an
equivalent, more compact capacity constraint:

"S∈Bi

The social welfare maximization problem can now be

j ) ≤ ck,∀1 ≤ k ≤ t

(4)

nSj rk

xi(S)(

m"j=1

"i∈B "S∈Bi
maximize DP (B) ="i∈B "S∈Bi

formulated:

subject to:

bi(S)xi(S)

(5)

"S∈Bi
m"j=1

xi(S) ≤ 1,

∀i ∈B

"i∈B "S∈Bi

xi(S)(

nSj rk

j ) ≤ ck,

∀1 ≤ k ≤ t
xi(S) ∈{ 0, 1}, ∀i ∈B ,S∈ Bi

(5a)

(5b)

(5c)

where DP (B) denotes the objective function of IP (5). Note
that in a truthful auction, the bid bi(S) can be assumed to be
user i’s valuation of VM bundle S.
Theorem 1. The social welfare maximization problem deﬁned
in IP (5) is NP-hard.

Proof: We construct a polynomial-time reduction to IP (5)
from the knapsack problem, a classic combinatorial optimiza-
tion problem that is proven NP-hard [19]:

max

x # n"i=1

vixi subject to

n"i=1

wixi ≤ W, xi ∈{ 0, 1}$

j=1 nSj rk

Given an instance A = (v1,··· , vn, w1,··· , wn, n, W )
of the knapsack problem, we map it to an instance of the
social welfare maximization problem A# = (|B| = n,|Bi| =
1, bi(S) = vi, t = 1,!m
j = wi, ci = W ), in which
each cloud user submits a single bid, and the resource pool
contains one type of resource. Such mapping can clearly be
done in polynomial time. If there exists an algorithm solving
the social welfare maximization problem A#, then it solves
the corresponding knapsack problem A as well, and vice
versa. Consequently, the knapsack problem can be viewed as
a special case of the social welfare maximization problem,
which must be NP-hard as well.

Theorem 1 reveals that solving IP (5) is NP-hard, and is
computationally infeasible for a large input. Nonetheless, we
may consider the LP relaxation of IP (5) by relaxing its last
constraint (5c) to 1:

xi(S) ≥ 0,∀i ∈B ,S∈ Bi

(5c’)

Introducing dual variable vectors y and z to constraints (5a)
and (5b) respectively, we can formulate the dual of the LPR,
to be used in the primal-dual algorithm design in Sec. IV:

minimize "i∈B

t"k=1

yi +

ckzk

(6)

yi +

t"k=1

m"j=1

nSj rk

j zk ≥ bi(S)
∀i ∈B ,S∈ Bi
yi ≥ 0, zk ≥ 0 ∀i ∈B , 1 ≤ k ≤ t

(6a)

(6b)

IV. A PRIMAL-DUAL COOPERATIVE APPROXIMATION

ALGORITHM

We ﬁrst design a polynomial-time approximation algorithm
for the social welfare maximization problem in IP (5), by
assuming that truthful bids are already known and targeting a
small approximation ratio in social welfare. Such a cooperative
approximation algorithm serves as an important building block
in the design of the randomized VM auction in Sec. V, which
further elicits truthful bids from strategic cloud users.
A. The Primal-Dual Approximation Algorithm

We design a greedy primal-dual algorithm for IP (5),
partially inspired by the primal-dual framework due to Briest et
1Constraint xi(S) ≤ 1,∀i ∈B ,S∈ Bi is redundant (implied by (5a) and
(5c’)) and removed from the LPR.

(3)

subject to:

al. [20] and the classic dual ﬁtting technique in approximation
algorithm design [21], as shown in Algorithm 1. Based on a
certain value per unit resource, the algorithm iteratively selects
the current best bid from the remaining users B who have
not received any VM bundle yet. This bid is appended to the
solution set, and its corresponding user is removed from B.
Meanwhile the algorithm updates the dual variables y and z,
along with the primal variable x, to reﬂect changes in set B.
The ﬁrst part of Algorithm 1 (line 2-6) initializes the primal
variable x as well as the dual variables y and z. Speciﬁcally,
it sets x to 0 (no VM is allocated at the beginning). Values
of y and z are initialized to 0 and 1/ck, respectively. While
other positive values are also possible, choosing 0 and 1/ck
simpliﬁes the algorithm analysis, as later discussed in the
algorithm analysis in the Appendix.

j=1 nSk rk

A while loop (line 9-19) iteratively reﬁnes the primal and
dual variables in x, y and z. It has two stopping conditions:
!t
k=1 ckzk ≥ t exp(Λ − 1) and B = ∅. The ﬁrst ensures the
feasibility of the generated primal solution x, as discussed
in the proof of Theorem 2. The second terminates the loop
and hence Algorithm 1 when every cloud user has received
a bundle of VMs. Since the size of the candidate set B
the while loop is
decrements by one in each iteration,
executed at most |B| times.
!t
k=1!m
j zk in line 13 can be viewed as the
weighted total resource requested by bid S, with zk acting
as a weight for the type k resource. Thus
j zk
can be interpreted as the value for a unit-weight resource. For
each cloud user i, the for loop in lines 10-12 searches for a
bid with the maximum bidding price, from all bids that user
i submits. Line 13 selects the best bid Sµ with the maximum
unit resource value from the pre-selection results in lines 10-
12 across all cloud users. Lines 14-15 update the primal and
dual variables and the set B. In particular, we update the
dual variable y using yµ = bµ(Sµ) so that !µ yµ = p in
all iterations. This helps ensure primal optimality when the
while loop terminates upon B = ∅. Lines 16-18 update the
dual variable z to reﬂect changes to the available resources.
B. Solution Feasibility and Approximation Ratio

!t
k=1!m

bi(S)
j=1 nSk rk

We ﬁrst show feasibility of solutions returned by Algorithm
i , zτ
k

1. At the end of the τ-th iteration of the while loop, let yτ
be the dual variables, and pτ be the primal objective.
Theorem 2. Algorithm 1 computes a feasible solution to IP
(5).

Proof: Values in x are initialized to 0 (line 4) and updated
to 1 only (line 14), so the solution is always binary valued.
Therefore, constraint (5c) will not be violated by Algorithm
1. Constraint (5a) will not be violated either because once
Algorithm 1 ﬁnds a VM bundle for cloud user i ∈B , no more
bundles are allocated to i in the future.
Let us examine the second constraint (5b). Suppose that
the solution is feasible so far. Let ˜S∈ B˜i be the ﬁrst set that
breaks the feasibility when added to the current solution, say,
in iteration τ. That is, ∃1 ≤ k ≤ t, such that

Algorithm 1 The Primal-Dual Approximation Algorithm
1: // Initialization
2: Λ= min 1≤k≤t ck/Rk;
3: p = 0; U = ∅;
4: ∀i,∀S : xi(S) = 0;
5: ∀i : yi = 0;
6: ∀k : zk = 1/ck;
7:
8: // Iterative update of primal and dual variables:
9: while %t

k=1 ckzk < t exp(Λ − 1) AND U( = B do
for all i ∈B \ U do
Si = arg maxS∈Bi{bi(S)};
end for
µ = arg maxi∈B\U#
bi(Si)
!t
k=1!m
j=1 nSi
xµ(Sµ) = 1; yµ = bµ(Sµ);
14:
p = p + bµ(Sµ); U = U∪{ µ};
15:
for all 1 ≤ k ≤ t do
16:
zk = zk · (t exp(Λ − 1))(!m
17:
end for
18:
19: end while

j zk$;

10:
11:
12:
13:

j=1 nSµ

j rk

j rk

j )/(ck−Rk);

"S!∈Γ
j + "S!∈Γ

˜Sj rk

m"j=1
m"j=1

n

m"j=1

nS!
j rk

j ≤ ck

nS!
j rk

j ≥ ck

nS!
j rk

j=1 nS!

j rk

nS!
j rk

j=1 n ˜Sj rk

j , we have

j /(ck − Rk) ≥ 1

and that leads to:
ckzτ−1

where Γ is the family of sets added to the solution before set
˜S. Since each single bid cannot exceed the capacity constraint,
i.e., ck > Rk ≥!m
m"j=1
j ≥ ck − Rk ⇒ "S!∈Γ
"S!∈Γ
k = (t exp(Λ−1))!S!∈Γ!m

m"j=1
j /(ck−Rk) ≥ t exp(Λ−1)
which satisﬁes the ﬁrst stopping condition in line 14. This
implies that iteration τ − 1 is the last iteration, and ˜S would
not be added to the solution at all.
Even if the primal solution is always feasible during the
execution, the dual is not necessarily so. The following lemma
shows that the dual variables can be made feasible through
scaling by a carefully chosen factor. Such posterior dual
scaling is known as dual ﬁtting in the primal-dual optimization
literature, and has proven effective in helping pursue good
approximation ratios in algorithm design [21].
Lemma 1.
is the (possibly infeasible)
dual solution at
then
(yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the dual
(6), where f (z,S) ! bi(S)/(!t
j zk),  !
j=1 nSj rk
maxS1,S2∈Bi,i∈B,k∈[1,t]!m
j=1 nS2
j .
j rk

Please refer to Appendix A for the proof of Lemma 1.
Employing the dual ﬁtting result in Lemma 1 and LP duality,
we next prove that Algorithm 1 guarantees an α-approximation

k=1!m
j /!m

(yτ−1, zτ−1)
the beginning of

the τ-th iteration,

j=1 nS1

j rk

If

Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

truthfulness and economical efﬁciency (social welfare maxi-
mization). Unfortunately, a VCG auction requires solving the
NP-hard problem of social welfare optimization multiple times
for calculating externalities as user payments, and becomes
computationally infeasible as the system size grows.

We design a randomized combinatorial auction for dy-
namic resource provisioning, which is computationally efﬁ-
cient, truthful in expectation, and surprisingly, simultaneously
guarantees the same social welfare approximation factor of α
as does the cooperative approximation algorithm. Note that the
latter assumes truthful bidding for free, and can afford to focus
on algorithmically maximizing the social welfare by ignoring
potential strategic bidding from selﬁsh cloud users, while the
former is bound to pay close attention at the same time to
eliciting truth-telling, a property not usually attained without
a compromise in social welfare [7], [8], [9].

Below is a high-level overview of the structure of the
randomized VM auction. We ﬁrst simulate a fractional VCG
auction based on the linear programming relaxation (LPR) of
the social welfare maximization integer program (IP). Then
we utilize a pair of tailored primal and dual linear programs
(LPs) to decompose the optimal fractional solution of the
LPR into a weighted combination of integer solutions to the
IP. This pair of LPs exploit the underlying packing nature
of the social welfare maximization IP, and are solved using
the ellipsoid algorithm with the cooperative α-approximation
algorithm acting as a separation oracle. In this process, we
prove and utilize the fact that the approximation algorithm also
veriﬁes an integrality gap of α between the IP and the LPR.
Each integer solution is selected randomly with probability
equal to its weight calculated during the decomposition, and
contains information for instructing the cloud provider to
conduct both VM provisioning and VM allocation. Fractional
VCG payments calculated at the beginning are ﬁnally scaled
down by the approximation factor α, for ensuring that the
resulting randomized auction inherits its truthfulness from the
fractional VCG auction.

We have implemented the randomized auction and evaluated
it against traces from Google Cluster Data [10] through exten-
sive simulation studies. We found that dynamic provisioning
usually outperforms static provisioning in terms of social
welfare by a ratio on the order of 50%. An exciting observation
is that the primal-dual cooperative approximation algorithm
approaches optimal social welfare within a gap of 10% in all
the scenarios tested, performing much better beyond the the-
oretically proven approximation factor of α ∼ 2.72 in typical
scenarios. Consequently, the randomized auction can provide
better guarantee in social welfare guarantee in practice. Such
empirical observation further motivates our discussions on
improving the cloud’s revenue by scaling fractional VCG
payments with a ratio smaller than 2.72, for striking a ﬂexible
balance between absolute truthfulness and seller revenue.

In the rest of the paper, we discuss related work in Sec.
II, and introduce the system model in Sec. III. We design
a primal-dual approximation algorithm and analyze its ap-
proximation ratio in Sec. IV, and further utilize it in Sec.

V to design the randomized VM auction, evaluated through
simulation studies in Sec. VI. Sec. VII concludes the paper.

II. PREVIOUS LITERATURE

As an efﬁcient resource allocation mechanism in economic
markets, auctions have been studied substantially over the
past few decades. The celebrated VCG auction [11], [12],
[13] represents a general truthful auction framework, under
which buyers have no incentive to submit falsiﬁed bids. A
VCG auction requires solving the social welfare maximization
problem to optimum, for calculating payments of winning
buyers. Consequently, it becomes computationally infeasible
when exact social welfare maximization is NP-hard, as is the
case for dynamic cloud resource provisioning in this work.
A VCG auction loses its truthful property if approximation
algorithms are applied for social welfare maximization.

For non-VCG style of auction design, custom techniques
speciﬁc to the problem at hand are required for guaranteeing
truthfulness of the resulting auction mechanism. In a sequence
of recent work that originated from theoretical computer sci-
ence [14], [8], [9], [15], a decomposition technique is designed
for translating fractional solutions to integer solutions, for
packing type integer programs. The key technique lies in a
pair of tailored primal and dual LPs that exploit such packing
property, which can be solved with an efﬁcient approximation
algorithm that can verify the integrality gap between the IP
and its LPR. To the authors’ knowledge, this work is the ﬁrst
in the ﬁeld of cloud computing that successfully applies such
a primal-dual decomposition technique.

The design of VM auctions has been studied in a series of
work in recent cloud computing literature. For instance, Zhang
et al. [16] study the resource allocation problem with realtime
demand arrivals, and propose a truthful online auction-based
allocation policy. Auctions also take an important role in
the exchange of computing resources among members in a
federated cloud in number of recent work [17], [18].

Zaman et al. [6] propose an auction-based VM alloca-
tion mechanism, named CA-GREEDY, for the case of static
resource provisioning, where the cloud provider has a pre-
determined number of VMs for sale in each VM type.
However,
the approximation ratio of the mechanism they
designed is rather large, especially when a large number of VM
instances are provisioned, a rather common scenario in real-
world cloud computing. The authors also consider the dynamic
provisioning case [5], and present a truthful mechanism. No
guarantee is provided on the social welfare approximation ratio
of their mechanism, though. In contrast, the randomized VM
auction we design is not only truthful, but also achieves close-
to-optimum social welfare maximization.

III. SYSTEM MODEL AND PRELIMINARIES

We consider auction-based resource provisioning and VM
allocation in a cloud market. The cloud provider (auctioneer)
leases resources packed in VMs to cloud users through round-
by-round auctions. The cloud provider has a pool of t types
of resources. The total amount of type k resource is ck. The

cloud provider offers m types of VMs, VM1, ..., VMm. A
VMj instance consumes rk

j amount of type k resource.

Let B denote the set of cloud users, acting as bidders in the
auction. Each user i ∈B can submit as many bids as it wishes.
Let Bi denote the set of bids submitted by cloud user i, and
{Bi}i∈B contains all bids from all users. Each bid speciﬁes
a desired VM bundle S = (nS1 ,··· , nSm) along with the
bidding price bi(S), where nSj is the number of VMj instances
that cloud user i requests in S. We assume that a single bid
alone does not exceed the capacity constraint for any type of
resource, i.e., ∀1 ≤ k ≤ t, Rk ! maxi∈B,S∈Bi!m
j <
ck. Let xi(S) be a binary variable indicating whether user
i wins bundle S. Then x = {xi(S)}i∈B,S∈Bi represents an
allocation outcome. Let vi(x) denote the true valuation of
cloud user i, known only to i itself. Let Πi be the priced
charged to a winning user i. Then the utility ui for user i is:

j=1 nSj rk

if i receives a VM bundle
otherwsie

ui(Bi, B−i) =! vi(x) − Πi
where B−i = {Bj}j∈B\{i} is a set of all the bids except Bi.
Deﬁnition A (randomized) auction is truthful (in expectation)
if for any bidder i, reporting its true valuation in the bid max-
imizes its (expected) utility, regardless of the bids submitted by
other bidders.

(1)

0

We adopt the XOR bidding language, in which a user can
win at most one bid even if it submits multiple bids [15],
leading to the ﬁrst constraint for VM allocation:

xi(S) ≤ 1,∀i ∈B

(2)

The ﬁnite supply of each type of cloud resource translates

into the capacity constraint at the cloud provider:
"i∈B "S∈Bi
xi(S)nSj ≤ Nj,∀1 ≤ j ≤ m
m"j=1

j ≤ ck,∀1 ≤ k ≤ t

Njrk

where Nj is the number of VMj instances provisioned. The
two groups of inequalities in (3) can be merged into an
equivalent, more compact capacity constraint:

"S∈Bi

The social welfare maximization problem can now be

j ) ≤ ck,∀1 ≤ k ≤ t

(4)

nSj rk

xi(S)(

m"j=1

"i∈B "S∈Bi
maximize DP (B) ="i∈B "S∈Bi

formulated:

subject to:

bi(S)xi(S)

(5)

"S∈Bi
m"j=1

xi(S) ≤ 1,

∀i ∈B

"i∈B "S∈Bi

xi(S)(

nSj rk

j ) ≤ ck,

∀1 ≤ k ≤ t
xi(S) ∈{ 0, 1}, ∀i ∈B ,S∈ Bi

(5a)

(5b)

(5c)

where DP (B) denotes the objective function of IP (5). Note
that in a truthful auction, the bid bi(S) can be assumed to be
user i’s valuation of VM bundle S.
Theorem 1. The social welfare maximization problem deﬁned
in IP (5) is NP-hard.

Proof: We construct a polynomial-time reduction to IP (5)
from the knapsack problem, a classic combinatorial optimiza-
tion problem that is proven NP-hard [19]:

max

x # n"i=1

vixi subject to

n"i=1

wixi ≤ W, xi ∈{ 0, 1}$

j=1 nSj rk

Given an instance A = (v1,··· , vn, w1,··· , wn, n, W )
of the knapsack problem, we map it to an instance of the
social welfare maximization problem A# = (|B| = n,|Bi| =
1, bi(S) = vi, t = 1,!m
j = wi, ci = W ), in which
each cloud user submits a single bid, and the resource pool
contains one type of resource. Such mapping can clearly be
done in polynomial time. If there exists an algorithm solving
the social welfare maximization problem A#, then it solves
the corresponding knapsack problem A as well, and vice
versa. Consequently, the knapsack problem can be viewed as
a special case of the social welfare maximization problem,
which must be NP-hard as well.

Theorem 1 reveals that solving IP (5) is NP-hard, and is
computationally infeasible for a large input. Nonetheless, we
may consider the LP relaxation of IP (5) by relaxing its last
constraint (5c) to 1:

xi(S) ≥ 0,∀i ∈B ,S∈ Bi

(5c’)

Introducing dual variable vectors y and z to constraints (5a)
and (5b) respectively, we can formulate the dual of the LPR,
to be used in the primal-dual algorithm design in Sec. IV:

minimize "i∈B

t"k=1

yi +

ckzk

(6)

yi +

t"k=1

m"j=1

nSj rk

j zk ≥ bi(S)
∀i ∈B ,S∈ Bi
yi ≥ 0, zk ≥ 0 ∀i ∈B , 1 ≤ k ≤ t

(6a)

(6b)

IV. A PRIMAL-DUAL COOPERATIVE APPROXIMATION

ALGORITHM

We ﬁrst design a polynomial-time approximation algorithm
for the social welfare maximization problem in IP (5), by
assuming that truthful bids are already known and targeting a
small approximation ratio in social welfare. Such a cooperative
approximation algorithm serves as an important building block
in the design of the randomized VM auction in Sec. V, which
further elicits truthful bids from strategic cloud users.
A. The Primal-Dual Approximation Algorithm

We design a greedy primal-dual algorithm for IP (5),
partially inspired by the primal-dual framework due to Briest et
1Constraint xi(S) ≤ 1,∀i ∈B ,S∈ Bi is redundant (implied by (5a) and
(5c’)) and removed from the LPR.

(3)

subject to:

al. [20] and the classic dual ﬁtting technique in approximation
algorithm design [21], as shown in Algorithm 1. Based on a
certain value per unit resource, the algorithm iteratively selects
the current best bid from the remaining users B who have
not received any VM bundle yet. This bid is appended to the
solution set, and its corresponding user is removed from B.
Meanwhile the algorithm updates the dual variables y and z,
along with the primal variable x, to reﬂect changes in set B.
The ﬁrst part of Algorithm 1 (line 2-6) initializes the primal
variable x as well as the dual variables y and z. Speciﬁcally,
it sets x to 0 (no VM is allocated at the beginning). Values
of y and z are initialized to 0 and 1/ck, respectively. While
other positive values are also possible, choosing 0 and 1/ck
simpliﬁes the algorithm analysis, as later discussed in the
algorithm analysis in the Appendix.

j=1 nSk rk

A while loop (line 9-19) iteratively reﬁnes the primal and
dual variables in x, y and z. It has two stopping conditions:
!t
k=1 ckzk ≥ t exp(Λ − 1) and B = ∅. The ﬁrst ensures the
feasibility of the generated primal solution x, as discussed
in the proof of Theorem 2. The second terminates the loop
and hence Algorithm 1 when every cloud user has received
a bundle of VMs. Since the size of the candidate set B
the while loop is
decrements by one in each iteration,
executed at most |B| times.
!t
k=1!m
j zk in line 13 can be viewed as the
weighted total resource requested by bid S, with zk acting
as a weight for the type k resource. Thus
j zk
can be interpreted as the value for a unit-weight resource. For
each cloud user i, the for loop in lines 10-12 searches for a
bid with the maximum bidding price, from all bids that user
i submits. Line 13 selects the best bid Sµ with the maximum
unit resource value from the pre-selection results in lines 10-
12 across all cloud users. Lines 14-15 update the primal and
dual variables and the set B. In particular, we update the
dual variable y using yµ = bµ(Sµ) so that !µ yµ = p in
all iterations. This helps ensure primal optimality when the
while loop terminates upon B = ∅. Lines 16-18 update the
dual variable z to reﬂect changes to the available resources.
B. Solution Feasibility and Approximation Ratio

!t
k=1!m

bi(S)
j=1 nSk rk

We ﬁrst show feasibility of solutions returned by Algorithm
i , zτ
k

1. At the end of the τ-th iteration of the while loop, let yτ
be the dual variables, and pτ be the primal objective.
Theorem 2. Algorithm 1 computes a feasible solution to IP
(5).

Proof: Values in x are initialized to 0 (line 4) and updated
to 1 only (line 14), so the solution is always binary valued.
Therefore, constraint (5c) will not be violated by Algorithm
1. Constraint (5a) will not be violated either because once
Algorithm 1 ﬁnds a VM bundle for cloud user i ∈B , no more
bundles are allocated to i in the future.
Let us examine the second constraint (5b). Suppose that
the solution is feasible so far. Let ˜S∈ B˜i be the ﬁrst set that
breaks the feasibility when added to the current solution, say,
in iteration τ. That is, ∃1 ≤ k ≤ t, such that

Algorithm 1 The Primal-Dual Approximation Algorithm
1: // Initialization
2: Λ= min 1≤k≤t ck/Rk;
3: p = 0; U = ∅;
4: ∀i,∀S : xi(S) = 0;
5: ∀i : yi = 0;
6: ∀k : zk = 1/ck;
7:
8: // Iterative update of primal and dual variables:
9: while %t

k=1 ckzk < t exp(Λ − 1) AND U( = B do
for all i ∈B \ U do
Si = arg maxS∈Bi{bi(S)};
end for
µ = arg maxi∈B\U#
bi(Si)
!t
k=1!m
j=1 nSi
xµ(Sµ) = 1; yµ = bµ(Sµ);
14:
p = p + bµ(Sµ); U = U∪{ µ};
15:
for all 1 ≤ k ≤ t do
16:
zk = zk · (t exp(Λ − 1))(!m
17:
end for
18:
19: end while

j zk$;

10:
11:
12:
13:

j=1 nSµ

j rk

j rk

j )/(ck−Rk);

"S!∈Γ
j + "S!∈Γ

˜Sj rk

m"j=1
m"j=1

n

m"j=1

nS!
j rk

j ≤ ck

nS!
j rk

j ≥ ck

nS!
j rk

j=1 nS!

j rk

nS!
j rk

j=1 n ˜Sj rk

j , we have

j /(ck − Rk) ≥ 1

and that leads to:
ckzτ−1

where Γ is the family of sets added to the solution before set
˜S. Since each single bid cannot exceed the capacity constraint,
i.e., ck > Rk ≥!m
m"j=1
j ≥ ck − Rk ⇒ "S!∈Γ
"S!∈Γ
k = (t exp(Λ−1))!S!∈Γ!m

m"j=1
j /(ck−Rk) ≥ t exp(Λ−1)
which satisﬁes the ﬁrst stopping condition in line 14. This
implies that iteration τ − 1 is the last iteration, and ˜S would
not be added to the solution at all.
Even if the primal solution is always feasible during the
execution, the dual is not necessarily so. The following lemma
shows that the dual variables can be made feasible through
scaling by a carefully chosen factor. Such posterior dual
scaling is known as dual ﬁtting in the primal-dual optimization
literature, and has proven effective in helping pursue good
approximation ratios in algorithm design [21].
Lemma 1.
is the (possibly infeasible)
dual solution at
then
(yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the dual
(6), where f (z,S) ! bi(S)/(!t
j zk),  !
j=1 nSj rk
maxS1,S2∈Bi,i∈B,k∈[1,t]!m
j=1 nS2
j .
j rk

Please refer to Appendix A for the proof of Lemma 1.
Employing the dual ﬁtting result in Lemma 1 and LP duality,
we next prove that Algorithm 1 guarantees an α-approximation

k=1!m
j /!m

(yτ−1, zτ−1)
the beginning of

the τ-th iteration,

j=1 nS1

j rk

If

of social welfare, where α = 1 +  Λ
Λ−1 (et1/(Λ−1) − 1). In
practice, the volume of a cloud provider’s resource pool is
substantially larger than a single user demand, i.e., Λ * 1.
The number of resource types t is a small constant (3 to
5). Consequently, we can conduct the following quantitative
estimation on the approximation ratio:

Λ
Λ − 1

(1 + 

α = lim
Λ→∞

(et1/(Λ−1) − 1)) = 1 + (e − 1)

lim
Λ→∞
If we further consider the case where each user only submits
one bid, then  = 1, and the approximation ratio α is close
to e ≈ 2.72, as illustrated in the 3D plot of the function α =
1 +  Λ

Λ−1 (et1/(Λ−1) − 1) in Fig. 1.

o

i
t

a
R
n
o

 

i
t

i

a
m
x
o
r
p
p
A

7

6

5

4

3

2
5

10

15

20

Λ

25

0

5

15

10

20

No. of resource types

Fig. 1. The approximation ratio α quickly decreases as Λ increases, and
closely approaches e ∼ 2.72 as long as the number of resource types t is not
too large and each user only submits one bid.
Theorem 3. Algorithm 1 computes an α-approximate solution
to IP (5) in polynomial-time, where α = 1+ Λ
Λ−1 (et1/(Λ−1)−1).

Please refer to Appendix B for the proof of Theorem 3.

V. A RANDOMZIED AUCTION MECHANISM

Capitalizing on Algorithm 1 for approximate social welfare
maximization under dynamic resource provisioning, we now
design a randomized combinatorial VM auction that achieves
the same social welfare approximation ratio α, while simulta-
neously ensuring truthful bidding from cloud users. Algorithm
2 outlines the key steps in the randomized auction mechanism.

Algorithm 2 A Randomized Combinatorial VM Auction
1: Simulating the fractional VCG auction.
2: — Compute the fractional VCG allocation x∗ and payment

ΠF , through solving the LPR of IP (5).

%l∈I

3: Decomposing fractional solution into integer solutions
4: — Decompose the scaled down fractional solution x∗/α to
a convex combination of integer solutions, i.e., x∗/α =
βlx(l), through solving a pair of primal-dual LPs in
(8) and (9) using the ellipsoid method, leveraging Algorithm
1 as a separation oracle.
5: Randomized VM allocation
6: — Select each x(l) randomly with probability βl.
7: Charging scaled fractional VCG prices
8: — for each winning cloud user i ∈B : charge a price Πi =

ΠF

i /α.

A. The Fractional VCG Auction

Theorem 1 reveals that solving IP (5) to optimal is NP-
hard, implying that applying the VCG auction for truthfulness
is computationally expensive. We ﬁrst resort to a fractional
version of the VCG auction for achieving both computational
efﬁciency (polynomial time complexity) and economic efﬁ-
ciency (social welfare maximization), by applying the VCG
mechanism to the LPR instead of IP (5).

The optimal solution x∗ to the LPR constitutes the VM
allocation solution in the fractional VCG auction. The frac-
tional VCG payment for user i equals i’s externality, or the
difference in social welfare with and without i’s bid [9], [11]:
(7)

ΠF

bi! (S)x∗i! (S)

i = Vi − "i!’=i,i!∈B "S∈Bi!

where Vi is the optimal DP F (B) to the LPR when cloud user
i bids zero.
The VM bundle allocation scheme in x∗ has fractional
instead of binary values and is hence not practically applicable.
This is to be resolved using the primal-dual decomposition
technique, in Sec. V-B.

B. Decomposing the Fractional Solution

We ﬁrst prepare for the decomposition by showing that
Algorithm 1 veriﬁes the integrality gap between IP (5) and
the LPR in the sense that the integrality gap is also bounded
by α. This is true because for any bidding proﬁle, Algorithm
1 computes an integer solution whose social welfare is at
least 1/α times the optimal solution to the LPR, due to
the following two facts: (i) the approximation ratio does not
depend on the bidding prices bi(S),∀i ∈B ,S∈ Bi; (ii) the
ratio is proven through using d/pω as an upper bound.
Integrality gap = LP R∗/DP (B)∗ ≤ d/pω = α

where DP (B)∗ is the value of the optimal solution to IP (5).
The inequality is due to LP R∗ ≤ d and pω ≤ DP (B)∗. Thus
d/pω also works as an upper bound of the integrality gap.
We next decompose x∗ into a convex combination of integer
solutions, using a LP duality based decomposition technique
for packing type of optimization problems due to Carr et al.
[14] and Lavi et al. [8]. Our goal is to ﬁnd βl and x(l) such

that x∗/α = !l∈I βlx(l), where Z(DP ) = {x(l)}l∈I is
the set of integer solutions to IP (5), I is the index set, and
βl ≥ 0,!l∈I βl = 1. Since the integrality gap is at most
α, there exists at least one integer solution, e.g., DP (B)∗,
dominating the scaled down fractional solution. Consequently,
scaling down the fractional solution x∗ by α can guarantee the
existence of such a decomposition.

The following primal and dual LPs are solved for decom-

posing x∗:

Primal:

minimize "l∈I

βl

(8)

Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

truthfulness and economical efﬁciency (social welfare maxi-
mization). Unfortunately, a VCG auction requires solving the
NP-hard problem of social welfare optimization multiple times
for calculating externalities as user payments, and becomes
computationally infeasible as the system size grows.

We design a randomized combinatorial auction for dy-
namic resource provisioning, which is computationally efﬁ-
cient, truthful in expectation, and surprisingly, simultaneously
guarantees the same social welfare approximation factor of α
as does the cooperative approximation algorithm. Note that the
latter assumes truthful bidding for free, and can afford to focus
on algorithmically maximizing the social welfare by ignoring
potential strategic bidding from selﬁsh cloud users, while the
former is bound to pay close attention at the same time to
eliciting truth-telling, a property not usually attained without
a compromise in social welfare [7], [8], [9].

Below is a high-level overview of the structure of the
randomized VM auction. We ﬁrst simulate a fractional VCG
auction based on the linear programming relaxation (LPR) of
the social welfare maximization integer program (IP). Then
we utilize a pair of tailored primal and dual linear programs
(LPs) to decompose the optimal fractional solution of the
LPR into a weighted combination of integer solutions to the
IP. This pair of LPs exploit the underlying packing nature
of the social welfare maximization IP, and are solved using
the ellipsoid algorithm with the cooperative α-approximation
algorithm acting as a separation oracle. In this process, we
prove and utilize the fact that the approximation algorithm also
veriﬁes an integrality gap of α between the IP and the LPR.
Each integer solution is selected randomly with probability
equal to its weight calculated during the decomposition, and
contains information for instructing the cloud provider to
conduct both VM provisioning and VM allocation. Fractional
VCG payments calculated at the beginning are ﬁnally scaled
down by the approximation factor α, for ensuring that the
resulting randomized auction inherits its truthfulness from the
fractional VCG auction.

We have implemented the randomized auction and evaluated
it against traces from Google Cluster Data [10] through exten-
sive simulation studies. We found that dynamic provisioning
usually outperforms static provisioning in terms of social
welfare by a ratio on the order of 50%. An exciting observation
is that the primal-dual cooperative approximation algorithm
approaches optimal social welfare within a gap of 10% in all
the scenarios tested, performing much better beyond the the-
oretically proven approximation factor of α ∼ 2.72 in typical
scenarios. Consequently, the randomized auction can provide
better guarantee in social welfare guarantee in practice. Such
empirical observation further motivates our discussions on
improving the cloud’s revenue by scaling fractional VCG
payments with a ratio smaller than 2.72, for striking a ﬂexible
balance between absolute truthfulness and seller revenue.

In the rest of the paper, we discuss related work in Sec.
II, and introduce the system model in Sec. III. We design
a primal-dual approximation algorithm and analyze its ap-
proximation ratio in Sec. IV, and further utilize it in Sec.

V to design the randomized VM auction, evaluated through
simulation studies in Sec. VI. Sec. VII concludes the paper.

II. PREVIOUS LITERATURE

As an efﬁcient resource allocation mechanism in economic
markets, auctions have been studied substantially over the
past few decades. The celebrated VCG auction [11], [12],
[13] represents a general truthful auction framework, under
which buyers have no incentive to submit falsiﬁed bids. A
VCG auction requires solving the social welfare maximization
problem to optimum, for calculating payments of winning
buyers. Consequently, it becomes computationally infeasible
when exact social welfare maximization is NP-hard, as is the
case for dynamic cloud resource provisioning in this work.
A VCG auction loses its truthful property if approximation
algorithms are applied for social welfare maximization.

For non-VCG style of auction design, custom techniques
speciﬁc to the problem at hand are required for guaranteeing
truthfulness of the resulting auction mechanism. In a sequence
of recent work that originated from theoretical computer sci-
ence [14], [8], [9], [15], a decomposition technique is designed
for translating fractional solutions to integer solutions, for
packing type integer programs. The key technique lies in a
pair of tailored primal and dual LPs that exploit such packing
property, which can be solved with an efﬁcient approximation
algorithm that can verify the integrality gap between the IP
and its LPR. To the authors’ knowledge, this work is the ﬁrst
in the ﬁeld of cloud computing that successfully applies such
a primal-dual decomposition technique.

The design of VM auctions has been studied in a series of
work in recent cloud computing literature. For instance, Zhang
et al. [16] study the resource allocation problem with realtime
demand arrivals, and propose a truthful online auction-based
allocation policy. Auctions also take an important role in
the exchange of computing resources among members in a
federated cloud in number of recent work [17], [18].

Zaman et al. [6] propose an auction-based VM alloca-
tion mechanism, named CA-GREEDY, for the case of static
resource provisioning, where the cloud provider has a pre-
determined number of VMs for sale in each VM type.
However,
the approximation ratio of the mechanism they
designed is rather large, especially when a large number of VM
instances are provisioned, a rather common scenario in real-
world cloud computing. The authors also consider the dynamic
provisioning case [5], and present a truthful mechanism. No
guarantee is provided on the social welfare approximation ratio
of their mechanism, though. In contrast, the randomized VM
auction we design is not only truthful, but also achieves close-
to-optimum social welfare maximization.

III. SYSTEM MODEL AND PRELIMINARIES

We consider auction-based resource provisioning and VM
allocation in a cloud market. The cloud provider (auctioneer)
leases resources packed in VMs to cloud users through round-
by-round auctions. The cloud provider has a pool of t types
of resources. The total amount of type k resource is ck. The

cloud provider offers m types of VMs, VM1, ..., VMm. A
VMj instance consumes rk

j amount of type k resource.

Let B denote the set of cloud users, acting as bidders in the
auction. Each user i ∈B can submit as many bids as it wishes.
Let Bi denote the set of bids submitted by cloud user i, and
{Bi}i∈B contains all bids from all users. Each bid speciﬁes
a desired VM bundle S = (nS1 ,··· , nSm) along with the
bidding price bi(S), where nSj is the number of VMj instances
that cloud user i requests in S. We assume that a single bid
alone does not exceed the capacity constraint for any type of
resource, i.e., ∀1 ≤ k ≤ t, Rk ! maxi∈B,S∈Bi!m
j <
ck. Let xi(S) be a binary variable indicating whether user
i wins bundle S. Then x = {xi(S)}i∈B,S∈Bi represents an
allocation outcome. Let vi(x) denote the true valuation of
cloud user i, known only to i itself. Let Πi be the priced
charged to a winning user i. Then the utility ui for user i is:

j=1 nSj rk

if i receives a VM bundle
otherwsie

ui(Bi, B−i) =! vi(x) − Πi
where B−i = {Bj}j∈B\{i} is a set of all the bids except Bi.
Deﬁnition A (randomized) auction is truthful (in expectation)
if for any bidder i, reporting its true valuation in the bid max-
imizes its (expected) utility, regardless of the bids submitted by
other bidders.

(1)

0

We adopt the XOR bidding language, in which a user can
win at most one bid even if it submits multiple bids [15],
leading to the ﬁrst constraint for VM allocation:

xi(S) ≤ 1,∀i ∈B

(2)

The ﬁnite supply of each type of cloud resource translates

into the capacity constraint at the cloud provider:
"i∈B "S∈Bi
xi(S)nSj ≤ Nj,∀1 ≤ j ≤ m
m"j=1

j ≤ ck,∀1 ≤ k ≤ t

Njrk

where Nj is the number of VMj instances provisioned. The
two groups of inequalities in (3) can be merged into an
equivalent, more compact capacity constraint:

"S∈Bi

The social welfare maximization problem can now be

j ) ≤ ck,∀1 ≤ k ≤ t

(4)

nSj rk

xi(S)(

m"j=1

"i∈B "S∈Bi
maximize DP (B) ="i∈B "S∈Bi

formulated:

subject to:

bi(S)xi(S)

(5)

"S∈Bi
m"j=1

xi(S) ≤ 1,

∀i ∈B

"i∈B "S∈Bi

xi(S)(

nSj rk

j ) ≤ ck,

∀1 ≤ k ≤ t
xi(S) ∈{ 0, 1}, ∀i ∈B ,S∈ Bi

(5a)

(5b)

(5c)

where DP (B) denotes the objective function of IP (5). Note
that in a truthful auction, the bid bi(S) can be assumed to be
user i’s valuation of VM bundle S.
Theorem 1. The social welfare maximization problem deﬁned
in IP (5) is NP-hard.

Proof: We construct a polynomial-time reduction to IP (5)
from the knapsack problem, a classic combinatorial optimiza-
tion problem that is proven NP-hard [19]:

max

x # n"i=1

vixi subject to

n"i=1

wixi ≤ W, xi ∈{ 0, 1}$

j=1 nSj rk

Given an instance A = (v1,··· , vn, w1,··· , wn, n, W )
of the knapsack problem, we map it to an instance of the
social welfare maximization problem A# = (|B| = n,|Bi| =
1, bi(S) = vi, t = 1,!m
j = wi, ci = W ), in which
each cloud user submits a single bid, and the resource pool
contains one type of resource. Such mapping can clearly be
done in polynomial time. If there exists an algorithm solving
the social welfare maximization problem A#, then it solves
the corresponding knapsack problem A as well, and vice
versa. Consequently, the knapsack problem can be viewed as
a special case of the social welfare maximization problem,
which must be NP-hard as well.

Theorem 1 reveals that solving IP (5) is NP-hard, and is
computationally infeasible for a large input. Nonetheless, we
may consider the LP relaxation of IP (5) by relaxing its last
constraint (5c) to 1:

xi(S) ≥ 0,∀i ∈B ,S∈ Bi

(5c’)

Introducing dual variable vectors y and z to constraints (5a)
and (5b) respectively, we can formulate the dual of the LPR,
to be used in the primal-dual algorithm design in Sec. IV:

minimize "i∈B

t"k=1

yi +

ckzk

(6)

yi +

t"k=1

m"j=1

nSj rk

j zk ≥ bi(S)
∀i ∈B ,S∈ Bi
yi ≥ 0, zk ≥ 0 ∀i ∈B , 1 ≤ k ≤ t

(6a)

(6b)

IV. A PRIMAL-DUAL COOPERATIVE APPROXIMATION

ALGORITHM

We ﬁrst design a polynomial-time approximation algorithm
for the social welfare maximization problem in IP (5), by
assuming that truthful bids are already known and targeting a
small approximation ratio in social welfare. Such a cooperative
approximation algorithm serves as an important building block
in the design of the randomized VM auction in Sec. V, which
further elicits truthful bids from strategic cloud users.
A. The Primal-Dual Approximation Algorithm

We design a greedy primal-dual algorithm for IP (5),
partially inspired by the primal-dual framework due to Briest et
1Constraint xi(S) ≤ 1,∀i ∈B ,S∈ Bi is redundant (implied by (5a) and
(5c’)) and removed from the LPR.

(3)

subject to:

al. [20] and the classic dual ﬁtting technique in approximation
algorithm design [21], as shown in Algorithm 1. Based on a
certain value per unit resource, the algorithm iteratively selects
the current best bid from the remaining users B who have
not received any VM bundle yet. This bid is appended to the
solution set, and its corresponding user is removed from B.
Meanwhile the algorithm updates the dual variables y and z,
along with the primal variable x, to reﬂect changes in set B.
The ﬁrst part of Algorithm 1 (line 2-6) initializes the primal
variable x as well as the dual variables y and z. Speciﬁcally,
it sets x to 0 (no VM is allocated at the beginning). Values
of y and z are initialized to 0 and 1/ck, respectively. While
other positive values are also possible, choosing 0 and 1/ck
simpliﬁes the algorithm analysis, as later discussed in the
algorithm analysis in the Appendix.

j=1 nSk rk

A while loop (line 9-19) iteratively reﬁnes the primal and
dual variables in x, y and z. It has two stopping conditions:
!t
k=1 ckzk ≥ t exp(Λ − 1) and B = ∅. The ﬁrst ensures the
feasibility of the generated primal solution x, as discussed
in the proof of Theorem 2. The second terminates the loop
and hence Algorithm 1 when every cloud user has received
a bundle of VMs. Since the size of the candidate set B
the while loop is
decrements by one in each iteration,
executed at most |B| times.
!t
k=1!m
j zk in line 13 can be viewed as the
weighted total resource requested by bid S, with zk acting
as a weight for the type k resource. Thus
j zk
can be interpreted as the value for a unit-weight resource. For
each cloud user i, the for loop in lines 10-12 searches for a
bid with the maximum bidding price, from all bids that user
i submits. Line 13 selects the best bid Sµ with the maximum
unit resource value from the pre-selection results in lines 10-
12 across all cloud users. Lines 14-15 update the primal and
dual variables and the set B. In particular, we update the
dual variable y using yµ = bµ(Sµ) so that !µ yµ = p in
all iterations. This helps ensure primal optimality when the
while loop terminates upon B = ∅. Lines 16-18 update the
dual variable z to reﬂect changes to the available resources.
B. Solution Feasibility and Approximation Ratio

!t
k=1!m

bi(S)
j=1 nSk rk

We ﬁrst show feasibility of solutions returned by Algorithm
i , zτ
k

1. At the end of the τ-th iteration of the while loop, let yτ
be the dual variables, and pτ be the primal objective.
Theorem 2. Algorithm 1 computes a feasible solution to IP
(5).

Proof: Values in x are initialized to 0 (line 4) and updated
to 1 only (line 14), so the solution is always binary valued.
Therefore, constraint (5c) will not be violated by Algorithm
1. Constraint (5a) will not be violated either because once
Algorithm 1 ﬁnds a VM bundle for cloud user i ∈B , no more
bundles are allocated to i in the future.
Let us examine the second constraint (5b). Suppose that
the solution is feasible so far. Let ˜S∈ B˜i be the ﬁrst set that
breaks the feasibility when added to the current solution, say,
in iteration τ. That is, ∃1 ≤ k ≤ t, such that

Algorithm 1 The Primal-Dual Approximation Algorithm
1: // Initialization
2: Λ= min 1≤k≤t ck/Rk;
3: p = 0; U = ∅;
4: ∀i,∀S : xi(S) = 0;
5: ∀i : yi = 0;
6: ∀k : zk = 1/ck;
7:
8: // Iterative update of primal and dual variables:
9: while %t

k=1 ckzk < t exp(Λ − 1) AND U( = B do
for all i ∈B \ U do
Si = arg maxS∈Bi{bi(S)};
end for
µ = arg maxi∈B\U#
bi(Si)
!t
k=1!m
j=1 nSi
xµ(Sµ) = 1; yµ = bµ(Sµ);
14:
p = p + bµ(Sµ); U = U∪{ µ};
15:
for all 1 ≤ k ≤ t do
16:
zk = zk · (t exp(Λ − 1))(!m
17:
end for
18:
19: end while

j zk$;

10:
11:
12:
13:

j=1 nSµ

j rk

j rk

j )/(ck−Rk);

"S!∈Γ
j + "S!∈Γ

˜Sj rk

m"j=1
m"j=1

n

m"j=1

nS!
j rk

j ≤ ck

nS!
j rk

j ≥ ck

nS!
j rk

j=1 nS!

j rk

nS!
j rk

j=1 n ˜Sj rk

j , we have

j /(ck − Rk) ≥ 1

and that leads to:
ckzτ−1

where Γ is the family of sets added to the solution before set
˜S. Since each single bid cannot exceed the capacity constraint,
i.e., ck > Rk ≥!m
m"j=1
j ≥ ck − Rk ⇒ "S!∈Γ
"S!∈Γ
k = (t exp(Λ−1))!S!∈Γ!m

m"j=1
j /(ck−Rk) ≥ t exp(Λ−1)
which satisﬁes the ﬁrst stopping condition in line 14. This
implies that iteration τ − 1 is the last iteration, and ˜S would
not be added to the solution at all.
Even if the primal solution is always feasible during the
execution, the dual is not necessarily so. The following lemma
shows that the dual variables can be made feasible through
scaling by a carefully chosen factor. Such posterior dual
scaling is known as dual ﬁtting in the primal-dual optimization
literature, and has proven effective in helping pursue good
approximation ratios in algorithm design [21].
Lemma 1.
is the (possibly infeasible)
dual solution at
then
(yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the dual
(6), where f (z,S) ! bi(S)/(!t
j zk),  !
j=1 nSj rk
maxS1,S2∈Bi,i∈B,k∈[1,t]!m
j=1 nS2
j .
j rk

Please refer to Appendix A for the proof of Lemma 1.
Employing the dual ﬁtting result in Lemma 1 and LP duality,
we next prove that Algorithm 1 guarantees an α-approximation

k=1!m
j /!m

(yτ−1, zτ−1)
the beginning of

the τ-th iteration,

j=1 nS1

j rk

If

of social welfare, where α = 1 +  Λ
Λ−1 (et1/(Λ−1) − 1). In
practice, the volume of a cloud provider’s resource pool is
substantially larger than a single user demand, i.e., Λ * 1.
The number of resource types t is a small constant (3 to
5). Consequently, we can conduct the following quantitative
estimation on the approximation ratio:

Λ
Λ − 1

(1 + 

α = lim
Λ→∞

(et1/(Λ−1) − 1)) = 1 + (e − 1)

lim
Λ→∞
If we further consider the case where each user only submits
one bid, then  = 1, and the approximation ratio α is close
to e ≈ 2.72, as illustrated in the 3D plot of the function α =
1 +  Λ

Λ−1 (et1/(Λ−1) − 1) in Fig. 1.

o

i
t

a
R
n
o

 

i
t

i

a
m
x
o
r
p
p
A

7

6

5

4

3

2
5

10

15

20

Λ

25

0

5

15

10

20

No. of resource types

Fig. 1. The approximation ratio α quickly decreases as Λ increases, and
closely approaches e ∼ 2.72 as long as the number of resource types t is not
too large and each user only submits one bid.
Theorem 3. Algorithm 1 computes an α-approximate solution
to IP (5) in polynomial-time, where α = 1+ Λ
Λ−1 (et1/(Λ−1)−1).

Please refer to Appendix B for the proof of Theorem 3.

V. A RANDOMZIED AUCTION MECHANISM

Capitalizing on Algorithm 1 for approximate social welfare
maximization under dynamic resource provisioning, we now
design a randomized combinatorial VM auction that achieves
the same social welfare approximation ratio α, while simulta-
neously ensuring truthful bidding from cloud users. Algorithm
2 outlines the key steps in the randomized auction mechanism.

Algorithm 2 A Randomized Combinatorial VM Auction
1: Simulating the fractional VCG auction.
2: — Compute the fractional VCG allocation x∗ and payment

ΠF , through solving the LPR of IP (5).

%l∈I

3: Decomposing fractional solution into integer solutions
4: — Decompose the scaled down fractional solution x∗/α to
a convex combination of integer solutions, i.e., x∗/α =
βlx(l), through solving a pair of primal-dual LPs in
(8) and (9) using the ellipsoid method, leveraging Algorithm
1 as a separation oracle.
5: Randomized VM allocation
6: — Select each x(l) randomly with probability βl.
7: Charging scaled fractional VCG prices
8: — for each winning cloud user i ∈B : charge a price Πi =

ΠF

i /α.

A. The Fractional VCG Auction

Theorem 1 reveals that solving IP (5) to optimal is NP-
hard, implying that applying the VCG auction for truthfulness
is computationally expensive. We ﬁrst resort to a fractional
version of the VCG auction for achieving both computational
efﬁciency (polynomial time complexity) and economic efﬁ-
ciency (social welfare maximization), by applying the VCG
mechanism to the LPR instead of IP (5).

The optimal solution x∗ to the LPR constitutes the VM
allocation solution in the fractional VCG auction. The frac-
tional VCG payment for user i equals i’s externality, or the
difference in social welfare with and without i’s bid [9], [11]:
(7)

ΠF

bi! (S)x∗i! (S)

i = Vi − "i!’=i,i!∈B "S∈Bi!

where Vi is the optimal DP F (B) to the LPR when cloud user
i bids zero.
The VM bundle allocation scheme in x∗ has fractional
instead of binary values and is hence not practically applicable.
This is to be resolved using the primal-dual decomposition
technique, in Sec. V-B.

B. Decomposing the Fractional Solution

We ﬁrst prepare for the decomposition by showing that
Algorithm 1 veriﬁes the integrality gap between IP (5) and
the LPR in the sense that the integrality gap is also bounded
by α. This is true because for any bidding proﬁle, Algorithm
1 computes an integer solution whose social welfare is at
least 1/α times the optimal solution to the LPR, due to
the following two facts: (i) the approximation ratio does not
depend on the bidding prices bi(S),∀i ∈B ,S∈ Bi; (ii) the
ratio is proven through using d/pω as an upper bound.
Integrality gap = LP R∗/DP (B)∗ ≤ d/pω = α

where DP (B)∗ is the value of the optimal solution to IP (5).
The inequality is due to LP R∗ ≤ d and pω ≤ DP (B)∗. Thus
d/pω also works as an upper bound of the integrality gap.
We next decompose x∗ into a convex combination of integer
solutions, using a LP duality based decomposition technique
for packing type of optimization problems due to Carr et al.
[14] and Lavi et al. [8]. Our goal is to ﬁnd βl and x(l) such

that x∗/α = !l∈I βlx(l), where Z(DP ) = {x(l)}l∈I is
the set of integer solutions to IP (5), I is the index set, and
βl ≥ 0,!l∈I βl = 1. Since the integrality gap is at most
α, there exists at least one integer solution, e.g., DP (B)∗,
dominating the scaled down fractional solution. Consequently,
scaling down the fractional solution x∗ by α can guarantee the
existence of such a decomposition.

The following primal and dual LPs are solved for decom-

posing x∗:

Primal:

minimize "l∈I

βl

(8)

subject to:

"l∈I

βlxi(S, l) = x∗i (S)/α ∀i ∈B ,S∈ Bi

"l∈I

βl ≥ 1
βl ≥ 0

∀l ∈I

(8a)

(8b)

(8c)

Dual:

subject to:

"i∈B,S∈Bi

maximize 1

α "i∈B,S∈Bi

x∗i (S)νi(S) + λ

(9)

xi(S, l)νi(S) + λ ≤ 1
λ ≥ 0

∀l ∈I

νi(S) unconstrained ∀i ∈B ,S∈ Bi

(9a)

(9b)
(9c)

The primal decomposition LP has an exponential number
of variables. We resort to the dual. Even though the dual
(9) has an exponential number of constraints, the ellipsoid
method [22] can be applied to solve it in polynomial-time,
with Algorithm 1 acting as a separation oracle for generating
separating hyperplanes for the dual. Once an optimal dual so-
lution is obtained, using a polynomial number of hyperplanes,
the primal (8) can be converted to an optimization problem
with a polynomial number of constraints corresponding to
these hyperplanes. As a result, the convex decomposition can
be solved within polynomial time. However νi(S) may be
negative, making Algorithm 1 work improperly. Instead of
using νi(S) directly, we set νi(S)+ = max(νi(S), 0) to
circumvent this issue. IP (5) satisﬁes the nice packing property,
i.e., if a ∈ Z(DP ), b ≤ a then b ∈ Z(DP ). Using the packing
property, the following lemma ensures that using νi(S)+ does
not violate the constraints in the dual (9).
Lemma 2. Given an integer solution x# ∈ Z(DP ), we can
obtain x(l) ∈ Z(DP ) so that !i∈B,S∈Bi
x#i(S, l)νi(S)+ =
!i∈B,S∈Bi

xi(S, l)νi(S).
xi(S, l) =! x(i(S, l)
is
Since νi(S)+ = max(νi(S), 0),
that
!i∈B,S∈Bi
x#i(S, l)νi(S)+ = !i∈B,S∈Bi
xi(S, l)νi(S). It
follows from x# ≥ 0 that x(l) is no larger than x#. Finally,
due to the packing property, x(l) ∈ Z(DP ).
Lemma 3. If β∗ is an optimal solution to the primal (8), then
!l∈I β∗l = 1.
Proof: Since ν∗ = 0,λ ∗ = 1 is feasible, the optimal solution
to the dual (9) is at least 1. Suppose ∃λ∗ ≥ 0, ν∗ such that

if νi(S) > 0
otherwise
it

Proof: Let

clear

(10)

0

1

α "i∈B,S∈Bi

x∗i (S)ν∗i (S) + λ∗ > 1

Since x∗i (S) is the optimal fractional solution to the LPR,
x∗i (S) ≥ 0. We then have 1
x∗i (S)ν∗i (S)+ ≥
α!i∈B,S∈Bi
x∗i (S)ν∗i (S) > 1 − λ∗. Since the integral-
1
ity gap is at most α, veriﬁed by Algorithm 1 when

α!i∈B,S∈Bi

the objective is ν∗+,

there must be l ∈I

to strong LP duality.
C. The Randomized Auction

satisfying
!i∈B,S∈Bi
x#i(S, l)ν∗i (S)+ > 1 − λ∗. By Lemma 2, we have
∃x ∈ Z(DP ), such that !i∈B,S∈Bi
xi(S, l)ν∗i (S)>1 − λ∗.
This implies that ν∗ and λ∗ violate constraint (9a). Therefore,
the optimal value for the dual (9) is 1, and!l∈I β∗l = 1 due
{βl}l∈I in the convex decomposition can be viewed
feasible integer solu-
as a probability distribution over
tions in Z(DP ). Given the convex decomposition x∗/α =
!l∈I βlx(l), as shown in Algorithm 2, we select each valid

integer solution x(l) randomly with probability βl, and set
the prices Πi =Π F
i /α. The following theorem establishes
expected truthfulness of the randomized auction.
Theorem 4. The randomized auction in Algorithm 2 is truth-
ful in expectation, and achieves an α-approximation to the
optimal social welfare of the cloud market.

Proof: The expected utility of a given bidder i is:

ui("l∈I

βlx(l)) − Πi = ui(x∗/α) − ΠF
= (ui(x∗) − ΠF

i )/α

i /α

The second equality is due to the linearity of ui(x). This
means the expected utility is scaled down by α from the utility
in the fractional VCG auction. Truthfulness of the randomized
auction thus follows from that of the fractional VCG auction.

VI. PERFORMANCE EVALUATION

We have implemented the randomized auction, including
Algorithm 1 and the ellipsoid algorithm as its modules, for
performance evaluation. The target cloud system includes a
medium-sized cloud provisioning six types of VMs, con-
structed from three types of resources (CPU, RAM, and
storage), following the conﬁgurations in Tab. I. Each cloud
user bids for four VM bundles, which are synthesized from
Google Cluster Data [10], while bidding prices are generated
uniformly at random.
A. Performance of the Approximation Algorithm

We ﬁrst study the performance of Algorithm 1 through
varying the number of cloud users from 100 to 900, as
illustrated in Fig. 2. Algorithm 1 achieves a close-to-optimal
performance, much better than the theoretical approximation
ratio proved in Theorem 3. We suspect that the analysis of
Algorithm 1 can be further improved, for a tighter bound on
the approximation ratio. Fig. 2 also shows that Algorithm 1
scales to a large number of bidding requests without sacriﬁcing
the social welfare approximation ratio.
B. Static Provisioning vs Dynamic Provisioning

We next compare static resource provisioning with dynamic
resource provisioning in terms of economic efﬁciency. Two
types of static provisioning are considered: Static Provisioning

Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

truthfulness and economical efﬁciency (social welfare maxi-
mization). Unfortunately, a VCG auction requires solving the
NP-hard problem of social welfare optimization multiple times
for calculating externalities as user payments, and becomes
computationally infeasible as the system size grows.

We design a randomized combinatorial auction for dy-
namic resource provisioning, which is computationally efﬁ-
cient, truthful in expectation, and surprisingly, simultaneously
guarantees the same social welfare approximation factor of α
as does the cooperative approximation algorithm. Note that the
latter assumes truthful bidding for free, and can afford to focus
on algorithmically maximizing the social welfare by ignoring
potential strategic bidding from selﬁsh cloud users, while the
former is bound to pay close attention at the same time to
eliciting truth-telling, a property not usually attained without
a compromise in social welfare [7], [8], [9].

Below is a high-level overview of the structure of the
randomized VM auction. We ﬁrst simulate a fractional VCG
auction based on the linear programming relaxation (LPR) of
the social welfare maximization integer program (IP). Then
we utilize a pair of tailored primal and dual linear programs
(LPs) to decompose the optimal fractional solution of the
LPR into a weighted combination of integer solutions to the
IP. This pair of LPs exploit the underlying packing nature
of the social welfare maximization IP, and are solved using
the ellipsoid algorithm with the cooperative α-approximation
algorithm acting as a separation oracle. In this process, we
prove and utilize the fact that the approximation algorithm also
veriﬁes an integrality gap of α between the IP and the LPR.
Each integer solution is selected randomly with probability
equal to its weight calculated during the decomposition, and
contains information for instructing the cloud provider to
conduct both VM provisioning and VM allocation. Fractional
VCG payments calculated at the beginning are ﬁnally scaled
down by the approximation factor α, for ensuring that the
resulting randomized auction inherits its truthfulness from the
fractional VCG auction.

We have implemented the randomized auction and evaluated
it against traces from Google Cluster Data [10] through exten-
sive simulation studies. We found that dynamic provisioning
usually outperforms static provisioning in terms of social
welfare by a ratio on the order of 50%. An exciting observation
is that the primal-dual cooperative approximation algorithm
approaches optimal social welfare within a gap of 10% in all
the scenarios tested, performing much better beyond the the-
oretically proven approximation factor of α ∼ 2.72 in typical
scenarios. Consequently, the randomized auction can provide
better guarantee in social welfare guarantee in practice. Such
empirical observation further motivates our discussions on
improving the cloud’s revenue by scaling fractional VCG
payments with a ratio smaller than 2.72, for striking a ﬂexible
balance between absolute truthfulness and seller revenue.

In the rest of the paper, we discuss related work in Sec.
II, and introduce the system model in Sec. III. We design
a primal-dual approximation algorithm and analyze its ap-
proximation ratio in Sec. IV, and further utilize it in Sec.

V to design the randomized VM auction, evaluated through
simulation studies in Sec. VI. Sec. VII concludes the paper.

II. PREVIOUS LITERATURE

As an efﬁcient resource allocation mechanism in economic
markets, auctions have been studied substantially over the
past few decades. The celebrated VCG auction [11], [12],
[13] represents a general truthful auction framework, under
which buyers have no incentive to submit falsiﬁed bids. A
VCG auction requires solving the social welfare maximization
problem to optimum, for calculating payments of winning
buyers. Consequently, it becomes computationally infeasible
when exact social welfare maximization is NP-hard, as is the
case for dynamic cloud resource provisioning in this work.
A VCG auction loses its truthful property if approximation
algorithms are applied for social welfare maximization.

For non-VCG style of auction design, custom techniques
speciﬁc to the problem at hand are required for guaranteeing
truthfulness of the resulting auction mechanism. In a sequence
of recent work that originated from theoretical computer sci-
ence [14], [8], [9], [15], a decomposition technique is designed
for translating fractional solutions to integer solutions, for
packing type integer programs. The key technique lies in a
pair of tailored primal and dual LPs that exploit such packing
property, which can be solved with an efﬁcient approximation
algorithm that can verify the integrality gap between the IP
and its LPR. To the authors’ knowledge, this work is the ﬁrst
in the ﬁeld of cloud computing that successfully applies such
a primal-dual decomposition technique.

The design of VM auctions has been studied in a series of
work in recent cloud computing literature. For instance, Zhang
et al. [16] study the resource allocation problem with realtime
demand arrivals, and propose a truthful online auction-based
allocation policy. Auctions also take an important role in
the exchange of computing resources among members in a
federated cloud in number of recent work [17], [18].

Zaman et al. [6] propose an auction-based VM alloca-
tion mechanism, named CA-GREEDY, for the case of static
resource provisioning, where the cloud provider has a pre-
determined number of VMs for sale in each VM type.
However,
the approximation ratio of the mechanism they
designed is rather large, especially when a large number of VM
instances are provisioned, a rather common scenario in real-
world cloud computing. The authors also consider the dynamic
provisioning case [5], and present a truthful mechanism. No
guarantee is provided on the social welfare approximation ratio
of their mechanism, though. In contrast, the randomized VM
auction we design is not only truthful, but also achieves close-
to-optimum social welfare maximization.

III. SYSTEM MODEL AND PRELIMINARIES

We consider auction-based resource provisioning and VM
allocation in a cloud market. The cloud provider (auctioneer)
leases resources packed in VMs to cloud users through round-
by-round auctions. The cloud provider has a pool of t types
of resources. The total amount of type k resource is ck. The

cloud provider offers m types of VMs, VM1, ..., VMm. A
VMj instance consumes rk

j amount of type k resource.

Let B denote the set of cloud users, acting as bidders in the
auction. Each user i ∈B can submit as many bids as it wishes.
Let Bi denote the set of bids submitted by cloud user i, and
{Bi}i∈B contains all bids from all users. Each bid speciﬁes
a desired VM bundle S = (nS1 ,··· , nSm) along with the
bidding price bi(S), where nSj is the number of VMj instances
that cloud user i requests in S. We assume that a single bid
alone does not exceed the capacity constraint for any type of
resource, i.e., ∀1 ≤ k ≤ t, Rk ! maxi∈B,S∈Bi!m
j <
ck. Let xi(S) be a binary variable indicating whether user
i wins bundle S. Then x = {xi(S)}i∈B,S∈Bi represents an
allocation outcome. Let vi(x) denote the true valuation of
cloud user i, known only to i itself. Let Πi be the priced
charged to a winning user i. Then the utility ui for user i is:

j=1 nSj rk

if i receives a VM bundle
otherwsie

ui(Bi, B−i) =! vi(x) − Πi
where B−i = {Bj}j∈B\{i} is a set of all the bids except Bi.
Deﬁnition A (randomized) auction is truthful (in expectation)
if for any bidder i, reporting its true valuation in the bid max-
imizes its (expected) utility, regardless of the bids submitted by
other bidders.

(1)

0

We adopt the XOR bidding language, in which a user can
win at most one bid even if it submits multiple bids [15],
leading to the ﬁrst constraint for VM allocation:

xi(S) ≤ 1,∀i ∈B

(2)

The ﬁnite supply of each type of cloud resource translates

into the capacity constraint at the cloud provider:
"i∈B "S∈Bi
xi(S)nSj ≤ Nj,∀1 ≤ j ≤ m
m"j=1

j ≤ ck,∀1 ≤ k ≤ t

Njrk

where Nj is the number of VMj instances provisioned. The
two groups of inequalities in (3) can be merged into an
equivalent, more compact capacity constraint:

"S∈Bi

The social welfare maximization problem can now be

j ) ≤ ck,∀1 ≤ k ≤ t

(4)

nSj rk

xi(S)(

m"j=1

"i∈B "S∈Bi
maximize DP (B) ="i∈B "S∈Bi

formulated:

subject to:

bi(S)xi(S)

(5)

"S∈Bi
m"j=1

xi(S) ≤ 1,

∀i ∈B

"i∈B "S∈Bi

xi(S)(

nSj rk

j ) ≤ ck,

∀1 ≤ k ≤ t
xi(S) ∈{ 0, 1}, ∀i ∈B ,S∈ Bi

(5a)

(5b)

(5c)

where DP (B) denotes the objective function of IP (5). Note
that in a truthful auction, the bid bi(S) can be assumed to be
user i’s valuation of VM bundle S.
Theorem 1. The social welfare maximization problem deﬁned
in IP (5) is NP-hard.

Proof: We construct a polynomial-time reduction to IP (5)
from the knapsack problem, a classic combinatorial optimiza-
tion problem that is proven NP-hard [19]:

max

x # n"i=1

vixi subject to

n"i=1

wixi ≤ W, xi ∈{ 0, 1}$

j=1 nSj rk

Given an instance A = (v1,··· , vn, w1,··· , wn, n, W )
of the knapsack problem, we map it to an instance of the
social welfare maximization problem A# = (|B| = n,|Bi| =
1, bi(S) = vi, t = 1,!m
j = wi, ci = W ), in which
each cloud user submits a single bid, and the resource pool
contains one type of resource. Such mapping can clearly be
done in polynomial time. If there exists an algorithm solving
the social welfare maximization problem A#, then it solves
the corresponding knapsack problem A as well, and vice
versa. Consequently, the knapsack problem can be viewed as
a special case of the social welfare maximization problem,
which must be NP-hard as well.

Theorem 1 reveals that solving IP (5) is NP-hard, and is
computationally infeasible for a large input. Nonetheless, we
may consider the LP relaxation of IP (5) by relaxing its last
constraint (5c) to 1:

xi(S) ≥ 0,∀i ∈B ,S∈ Bi

(5c’)

Introducing dual variable vectors y and z to constraints (5a)
and (5b) respectively, we can formulate the dual of the LPR,
to be used in the primal-dual algorithm design in Sec. IV:

minimize "i∈B

t"k=1

yi +

ckzk

(6)

yi +

t"k=1

m"j=1

nSj rk

j zk ≥ bi(S)
∀i ∈B ,S∈ Bi
yi ≥ 0, zk ≥ 0 ∀i ∈B , 1 ≤ k ≤ t

(6a)

(6b)

IV. A PRIMAL-DUAL COOPERATIVE APPROXIMATION

ALGORITHM

We ﬁrst design a polynomial-time approximation algorithm
for the social welfare maximization problem in IP (5), by
assuming that truthful bids are already known and targeting a
small approximation ratio in social welfare. Such a cooperative
approximation algorithm serves as an important building block
in the design of the randomized VM auction in Sec. V, which
further elicits truthful bids from strategic cloud users.
A. The Primal-Dual Approximation Algorithm

We design a greedy primal-dual algorithm for IP (5),
partially inspired by the primal-dual framework due to Briest et
1Constraint xi(S) ≤ 1,∀i ∈B ,S∈ Bi is redundant (implied by (5a) and
(5c’)) and removed from the LPR.

(3)

subject to:

al. [20] and the classic dual ﬁtting technique in approximation
algorithm design [21], as shown in Algorithm 1. Based on a
certain value per unit resource, the algorithm iteratively selects
the current best bid from the remaining users B who have
not received any VM bundle yet. This bid is appended to the
solution set, and its corresponding user is removed from B.
Meanwhile the algorithm updates the dual variables y and z,
along with the primal variable x, to reﬂect changes in set B.
The ﬁrst part of Algorithm 1 (line 2-6) initializes the primal
variable x as well as the dual variables y and z. Speciﬁcally,
it sets x to 0 (no VM is allocated at the beginning). Values
of y and z are initialized to 0 and 1/ck, respectively. While
other positive values are also possible, choosing 0 and 1/ck
simpliﬁes the algorithm analysis, as later discussed in the
algorithm analysis in the Appendix.

j=1 nSk rk

A while loop (line 9-19) iteratively reﬁnes the primal and
dual variables in x, y and z. It has two stopping conditions:
!t
k=1 ckzk ≥ t exp(Λ − 1) and B = ∅. The ﬁrst ensures the
feasibility of the generated primal solution x, as discussed
in the proof of Theorem 2. The second terminates the loop
and hence Algorithm 1 when every cloud user has received
a bundle of VMs. Since the size of the candidate set B
the while loop is
decrements by one in each iteration,
executed at most |B| times.
!t
k=1!m
j zk in line 13 can be viewed as the
weighted total resource requested by bid S, with zk acting
as a weight for the type k resource. Thus
j zk
can be interpreted as the value for a unit-weight resource. For
each cloud user i, the for loop in lines 10-12 searches for a
bid with the maximum bidding price, from all bids that user
i submits. Line 13 selects the best bid Sµ with the maximum
unit resource value from the pre-selection results in lines 10-
12 across all cloud users. Lines 14-15 update the primal and
dual variables and the set B. In particular, we update the
dual variable y using yµ = bµ(Sµ) so that !µ yµ = p in
all iterations. This helps ensure primal optimality when the
while loop terminates upon B = ∅. Lines 16-18 update the
dual variable z to reﬂect changes to the available resources.
B. Solution Feasibility and Approximation Ratio

!t
k=1!m

bi(S)
j=1 nSk rk

We ﬁrst show feasibility of solutions returned by Algorithm
i , zτ
k

1. At the end of the τ-th iteration of the while loop, let yτ
be the dual variables, and pτ be the primal objective.
Theorem 2. Algorithm 1 computes a feasible solution to IP
(5).

Proof: Values in x are initialized to 0 (line 4) and updated
to 1 only (line 14), so the solution is always binary valued.
Therefore, constraint (5c) will not be violated by Algorithm
1. Constraint (5a) will not be violated either because once
Algorithm 1 ﬁnds a VM bundle for cloud user i ∈B , no more
bundles are allocated to i in the future.
Let us examine the second constraint (5b). Suppose that
the solution is feasible so far. Let ˜S∈ B˜i be the ﬁrst set that
breaks the feasibility when added to the current solution, say,
in iteration τ. That is, ∃1 ≤ k ≤ t, such that

Algorithm 1 The Primal-Dual Approximation Algorithm
1: // Initialization
2: Λ= min 1≤k≤t ck/Rk;
3: p = 0; U = ∅;
4: ∀i,∀S : xi(S) = 0;
5: ∀i : yi = 0;
6: ∀k : zk = 1/ck;
7:
8: // Iterative update of primal and dual variables:
9: while %t

k=1 ckzk < t exp(Λ − 1) AND U( = B do
for all i ∈B \ U do
Si = arg maxS∈Bi{bi(S)};
end for
µ = arg maxi∈B\U#
bi(Si)
!t
k=1!m
j=1 nSi
xµ(Sµ) = 1; yµ = bµ(Sµ);
14:
p = p + bµ(Sµ); U = U∪{ µ};
15:
for all 1 ≤ k ≤ t do
16:
zk = zk · (t exp(Λ − 1))(!m
17:
end for
18:
19: end while

j zk$;

10:
11:
12:
13:

j=1 nSµ

j rk

j rk

j )/(ck−Rk);

"S!∈Γ
j + "S!∈Γ

˜Sj rk

m"j=1
m"j=1

n

m"j=1

nS!
j rk

j ≤ ck

nS!
j rk

j ≥ ck

nS!
j rk

j=1 nS!

j rk

nS!
j rk

j=1 n ˜Sj rk

j , we have

j /(ck − Rk) ≥ 1

and that leads to:
ckzτ−1

where Γ is the family of sets added to the solution before set
˜S. Since each single bid cannot exceed the capacity constraint,
i.e., ck > Rk ≥!m
m"j=1
j ≥ ck − Rk ⇒ "S!∈Γ
"S!∈Γ
k = (t exp(Λ−1))!S!∈Γ!m

m"j=1
j /(ck−Rk) ≥ t exp(Λ−1)
which satisﬁes the ﬁrst stopping condition in line 14. This
implies that iteration τ − 1 is the last iteration, and ˜S would
not be added to the solution at all.
Even if the primal solution is always feasible during the
execution, the dual is not necessarily so. The following lemma
shows that the dual variables can be made feasible through
scaling by a carefully chosen factor. Such posterior dual
scaling is known as dual ﬁtting in the primal-dual optimization
literature, and has proven effective in helping pursue good
approximation ratios in algorithm design [21].
Lemma 1.
is the (possibly infeasible)
dual solution at
then
(yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the dual
(6), where f (z,S) ! bi(S)/(!t
j zk),  !
j=1 nSj rk
maxS1,S2∈Bi,i∈B,k∈[1,t]!m
j=1 nS2
j .
j rk

Please refer to Appendix A for the proof of Lemma 1.
Employing the dual ﬁtting result in Lemma 1 and LP duality,
we next prove that Algorithm 1 guarantees an α-approximation

k=1!m
j /!m

(yτ−1, zτ−1)
the beginning of

the τ-th iteration,

j=1 nS1

j rk

If

of social welfare, where α = 1 +  Λ
Λ−1 (et1/(Λ−1) − 1). In
practice, the volume of a cloud provider’s resource pool is
substantially larger than a single user demand, i.e., Λ * 1.
The number of resource types t is a small constant (3 to
5). Consequently, we can conduct the following quantitative
estimation on the approximation ratio:

Λ
Λ − 1

(1 + 

α = lim
Λ→∞

(et1/(Λ−1) − 1)) = 1 + (e − 1)

lim
Λ→∞
If we further consider the case where each user only submits
one bid, then  = 1, and the approximation ratio α is close
to e ≈ 2.72, as illustrated in the 3D plot of the function α =
1 +  Λ

Λ−1 (et1/(Λ−1) − 1) in Fig. 1.

o

i
t

a
R
n
o

 

i
t

i

a
m
x
o
r
p
p
A

7

6

5

4

3

2
5

10

15

20

Λ

25

0

5

15

10

20

No. of resource types

Fig. 1. The approximation ratio α quickly decreases as Λ increases, and
closely approaches e ∼ 2.72 as long as the number of resource types t is not
too large and each user only submits one bid.
Theorem 3. Algorithm 1 computes an α-approximate solution
to IP (5) in polynomial-time, where α = 1+ Λ
Λ−1 (et1/(Λ−1)−1).

Please refer to Appendix B for the proof of Theorem 3.

V. A RANDOMZIED AUCTION MECHANISM

Capitalizing on Algorithm 1 for approximate social welfare
maximization under dynamic resource provisioning, we now
design a randomized combinatorial VM auction that achieves
the same social welfare approximation ratio α, while simulta-
neously ensuring truthful bidding from cloud users. Algorithm
2 outlines the key steps in the randomized auction mechanism.

Algorithm 2 A Randomized Combinatorial VM Auction
1: Simulating the fractional VCG auction.
2: — Compute the fractional VCG allocation x∗ and payment

ΠF , through solving the LPR of IP (5).

%l∈I

3: Decomposing fractional solution into integer solutions
4: — Decompose the scaled down fractional solution x∗/α to
a convex combination of integer solutions, i.e., x∗/α =
βlx(l), through solving a pair of primal-dual LPs in
(8) and (9) using the ellipsoid method, leveraging Algorithm
1 as a separation oracle.
5: Randomized VM allocation
6: — Select each x(l) randomly with probability βl.
7: Charging scaled fractional VCG prices
8: — for each winning cloud user i ∈B : charge a price Πi =

ΠF

i /α.

A. The Fractional VCG Auction

Theorem 1 reveals that solving IP (5) to optimal is NP-
hard, implying that applying the VCG auction for truthfulness
is computationally expensive. We ﬁrst resort to a fractional
version of the VCG auction for achieving both computational
efﬁciency (polynomial time complexity) and economic efﬁ-
ciency (social welfare maximization), by applying the VCG
mechanism to the LPR instead of IP (5).

The optimal solution x∗ to the LPR constitutes the VM
allocation solution in the fractional VCG auction. The frac-
tional VCG payment for user i equals i’s externality, or the
difference in social welfare with and without i’s bid [9], [11]:
(7)

ΠF

bi! (S)x∗i! (S)

i = Vi − "i!’=i,i!∈B "S∈Bi!

where Vi is the optimal DP F (B) to the LPR when cloud user
i bids zero.
The VM bundle allocation scheme in x∗ has fractional
instead of binary values and is hence not practically applicable.
This is to be resolved using the primal-dual decomposition
technique, in Sec. V-B.

B. Decomposing the Fractional Solution

We ﬁrst prepare for the decomposition by showing that
Algorithm 1 veriﬁes the integrality gap between IP (5) and
the LPR in the sense that the integrality gap is also bounded
by α. This is true because for any bidding proﬁle, Algorithm
1 computes an integer solution whose social welfare is at
least 1/α times the optimal solution to the LPR, due to
the following two facts: (i) the approximation ratio does not
depend on the bidding prices bi(S),∀i ∈B ,S∈ Bi; (ii) the
ratio is proven through using d/pω as an upper bound.
Integrality gap = LP R∗/DP (B)∗ ≤ d/pω = α

where DP (B)∗ is the value of the optimal solution to IP (5).
The inequality is due to LP R∗ ≤ d and pω ≤ DP (B)∗. Thus
d/pω also works as an upper bound of the integrality gap.
We next decompose x∗ into a convex combination of integer
solutions, using a LP duality based decomposition technique
for packing type of optimization problems due to Carr et al.
[14] and Lavi et al. [8]. Our goal is to ﬁnd βl and x(l) such

that x∗/α = !l∈I βlx(l), where Z(DP ) = {x(l)}l∈I is
the set of integer solutions to IP (5), I is the index set, and
βl ≥ 0,!l∈I βl = 1. Since the integrality gap is at most
α, there exists at least one integer solution, e.g., DP (B)∗,
dominating the scaled down fractional solution. Consequently,
scaling down the fractional solution x∗ by α can guarantee the
existence of such a decomposition.

The following primal and dual LPs are solved for decom-

posing x∗:

Primal:

minimize "l∈I

βl

(8)

subject to:

"l∈I

βlxi(S, l) = x∗i (S)/α ∀i ∈B ,S∈ Bi

"l∈I

βl ≥ 1
βl ≥ 0

∀l ∈I

(8a)

(8b)

(8c)

Dual:

subject to:

"i∈B,S∈Bi

maximize 1

α "i∈B,S∈Bi

x∗i (S)νi(S) + λ

(9)

xi(S, l)νi(S) + λ ≤ 1
λ ≥ 0

∀l ∈I

νi(S) unconstrained ∀i ∈B ,S∈ Bi

(9a)

(9b)
(9c)

The primal decomposition LP has an exponential number
of variables. We resort to the dual. Even though the dual
(9) has an exponential number of constraints, the ellipsoid
method [22] can be applied to solve it in polynomial-time,
with Algorithm 1 acting as a separation oracle for generating
separating hyperplanes for the dual. Once an optimal dual so-
lution is obtained, using a polynomial number of hyperplanes,
the primal (8) can be converted to an optimization problem
with a polynomial number of constraints corresponding to
these hyperplanes. As a result, the convex decomposition can
be solved within polynomial time. However νi(S) may be
negative, making Algorithm 1 work improperly. Instead of
using νi(S) directly, we set νi(S)+ = max(νi(S), 0) to
circumvent this issue. IP (5) satisﬁes the nice packing property,
i.e., if a ∈ Z(DP ), b ≤ a then b ∈ Z(DP ). Using the packing
property, the following lemma ensures that using νi(S)+ does
not violate the constraints in the dual (9).
Lemma 2. Given an integer solution x# ∈ Z(DP ), we can
obtain x(l) ∈ Z(DP ) so that !i∈B,S∈Bi
x#i(S, l)νi(S)+ =
!i∈B,S∈Bi

xi(S, l)νi(S).
xi(S, l) =! x(i(S, l)
is
Since νi(S)+ = max(νi(S), 0),
that
!i∈B,S∈Bi
x#i(S, l)νi(S)+ = !i∈B,S∈Bi
xi(S, l)νi(S). It
follows from x# ≥ 0 that x(l) is no larger than x#. Finally,
due to the packing property, x(l) ∈ Z(DP ).
Lemma 3. If β∗ is an optimal solution to the primal (8), then
!l∈I β∗l = 1.
Proof: Since ν∗ = 0,λ ∗ = 1 is feasible, the optimal solution
to the dual (9) is at least 1. Suppose ∃λ∗ ≥ 0, ν∗ such that

if νi(S) > 0
otherwise
it

Proof: Let

clear

(10)

0

1

α "i∈B,S∈Bi

x∗i (S)ν∗i (S) + λ∗ > 1

Since x∗i (S) is the optimal fractional solution to the LPR,
x∗i (S) ≥ 0. We then have 1
x∗i (S)ν∗i (S)+ ≥
α!i∈B,S∈Bi
x∗i (S)ν∗i (S) > 1 − λ∗. Since the integral-
1
ity gap is at most α, veriﬁed by Algorithm 1 when

α!i∈B,S∈Bi

the objective is ν∗+,

there must be l ∈I

to strong LP duality.
C. The Randomized Auction

satisfying
!i∈B,S∈Bi
x#i(S, l)ν∗i (S)+ > 1 − λ∗. By Lemma 2, we have
∃x ∈ Z(DP ), such that !i∈B,S∈Bi
xi(S, l)ν∗i (S)>1 − λ∗.
This implies that ν∗ and λ∗ violate constraint (9a). Therefore,
the optimal value for the dual (9) is 1, and!l∈I β∗l = 1 due
{βl}l∈I in the convex decomposition can be viewed
feasible integer solu-
as a probability distribution over
tions in Z(DP ). Given the convex decomposition x∗/α =
!l∈I βlx(l), as shown in Algorithm 2, we select each valid

integer solution x(l) randomly with probability βl, and set
the prices Πi =Π F
i /α. The following theorem establishes
expected truthfulness of the randomized auction.
Theorem 4. The randomized auction in Algorithm 2 is truth-
ful in expectation, and achieves an α-approximation to the
optimal social welfare of the cloud market.

Proof: The expected utility of a given bidder i is:

ui("l∈I

βlx(l)) − Πi = ui(x∗/α) − ΠF
= (ui(x∗) − ΠF

i )/α

i /α

The second equality is due to the linearity of ui(x). This
means the expected utility is scaled down by α from the utility
in the fractional VCG auction. Truthfulness of the randomized
auction thus follows from that of the fractional VCG auction.

VI. PERFORMANCE EVALUATION

We have implemented the randomized auction, including
Algorithm 1 and the ellipsoid algorithm as its modules, for
performance evaluation. The target cloud system includes a
medium-sized cloud provisioning six types of VMs, con-
structed from three types of resources (CPU, RAM, and
storage), following the conﬁgurations in Tab. I. Each cloud
user bids for four VM bundles, which are synthesized from
Google Cluster Data [10], while bidding prices are generated
uniformly at random.
A. Performance of the Approximation Algorithm

We ﬁrst study the performance of Algorithm 1 through
varying the number of cloud users from 100 to 900, as
illustrated in Fig. 2. Algorithm 1 achieves a close-to-optimal
performance, much better than the theoretical approximation
ratio proved in Theorem 3. We suspect that the analysis of
Algorithm 1 can be further improved, for a tighter bound on
the approximation ratio. Fig. 2 also shows that Algorithm 1
scales to a large number of bidding requests without sacriﬁcing
the social welfare approximation ratio.
B. Static Provisioning vs Dynamic Provisioning

We next compare static resource provisioning with dynamic
resource provisioning in terms of economic efﬁciency. Two
types of static provisioning are considered: Static Provisioning

o

i
t

a
R
n
o

 

i
t

i

a
m
x
o
r
p
p
A

4

3

2

1

0

 

100

Ratio calculated by Therorem 3
Real Ratio

 

300

500

700

Number of Bidders

900

Fig. 2. A comparison between theoretical ratios and real ratios.

I where all six types of VMs are provisioned with the
same number; Static Provisioning II where a large amount
of resources have been packed into the entry-level VM,
m1.medium, meanwhile only relatively small numbers of the
high-end VMs are provisioned.

We consider the following three performance metrics: (i)
social welfare, (ii) CPU utilization, the ratio of the number of
allocated CPUs to the total number of CPUs, and (iii) user
satisfaction, the ratio of the number of winning cloud users to
the total number of cloud users. We run VCG auction for all
three styles of provisioning. The results for the three metrics
are illustrated in Fig. 3(a), Fig. 3(b) and Fig. 3(c), respectively.
We observe that dynamic resource provisioning can achieve
higher social welfare over both static alternatives. The social
welfare increases as the number of cloud users increases.
Regarding CPU utilization, dynamic resource provisioning
enables almost full allocation of CPU resources, while static
resource provisioning under-utilizes CPU resources due to its
unresponsiveness to realtime user demands. With regard of
user satisfaction, the overall trend is that user satisfaction
decreases as the number of cloud users grows. For a given
number of cloud users, dynamic resource provisioning perfor-
mances better than the two static resource provisioning styles.
C. The Randomized Auction

We implemented the randomized auction that composes of
the ellipsoid method and the primal-dual approximation algo-
rithm. Given the randomized nature of the auction, we simulate
each auction scenario for 50 times and compute the average
social welfare. Fig. 4(a) compares the randomized auction
with the classic VCG auction in terms of economic efﬁciency
(social welfare). The black curve in Fig. 4(a) is the expected
social welfare calculated according to Theorem 4. The results
of the randomized auction ﬂuctuate around the curve, verifying
the correctness of the proposed randomized algorithm. Fig.
4(b) illustrates the total payment of the randomized auction,
which matches 1/α fraction of the VCG payment.
D. An Even Better Randomized Auction?

The bound α proven in Theorem 3 can be loose, as
suggested by simulation results
from Sec. VI-A. This
might make the randomized auction pessimistic, over-
scaling the
and compromising
revenue of the cloud provider. We are curious to know
whether
convex
In Fig. 4(a) and Fig. 4(b), α =
decomposition (8).

smaller α can still work with the

fractional VCG prices

3.179, 3.184, 3.219, 3.334, 3.333, 3.333, 3.330, 3.333, 3.333
for these 9 points respectively. We experiment with α = 2 in
the convex decomposition (8), and run the ellipsoid method
for the dual (9) again. After obtaining the results, we check
all candidate integer solutions with the constraints (5a) and
(5b), to ensure that all these solutions are feasible. The results
shown in Fig. 5(a) and Fig. 5(b), are rather surprising. α = 2
works well with the randomized auction, producing a much
better approximation ratio for our proposed auction. However
this is not always the case if we employ a smaller α such
as α = 1.5. The approximation ratio given by Theorem 3
guarantees the existence of such integer solution which is at
least 1/α times of the fractional solution in the worst case.

VII. CONCLUSION

Focusing on dynamic resource provisioning and heteroge-
neous types of VMs, we ﬁrst propose a cooperative primal
dual approximation algorithm with approximation ratio close
to 2.72. Employing the cooperative approximation algorithm
as a building block, we then design a novel randomized auction
using a pair of tailed primal and dual LPs to decompose
an optimal fractional solution into a summation of a series
of weighted valid integer solutions. The randomized auction
achieves the same approximation ratio in social welfare as the
cooperative algorithm does. Simulation studies verify the efﬁ-
cacy of the proposed auction and the effectiveness of dynamic
resource provisioning over static resource provisioning.

APPENDIX A

PROOF OF LEMMA 1

Proof: Since the set {Si}i∈B is selected by line 11, where
each Si belongs to the corresponding Bi, i.e., the correspond-
ing cloud user, we have ∀i ∈B ,S∈ Bi:
(11)
Because yµ is set to bµ(Sµ) where bµ(Sµ) ≥ bµ(S),∀µ ∈

bi(S) ≤ bi(Si)

U,S∈ Bµ. That is:

yµ ≥ bµ(S),∀µ ∈U ,S∈ Bµ

which implies that constraint (6a) is satisﬁed ∀µ ∈U ,S∈ Bµ.
Next we examine the users µ ∈B \ U . Note that Sτ is
decided by line 13, which is a maximization. Therefore,

bτ (Sτ )
j=1 nSτ
bi(Si)
j=1 nSi

≥

j rk

j zτ−1

k

f (zτ−1, Sτ ) =

%t
k=1%m
%t
k=1%m
m"j=1
t"k=1
Since !m
B, k ∈ [1, t], (12) further implies that ∀i ∈B \ U ,S∈ Bi,

k ≥ bi(Si),

∀i ∈B \ U⇔

f (zτ−1, Sτ )

∀i ∈B \ U

j=1 nS1

j rk

j=1 nS2

j rk

nSi
k rk

j zτ−1

j rk

j zτ−1

k

,

j ,∀S1,S2 ∈ Bi, i ∈

(12)

f (zτ−1, Sτ )

j zτ−1

k ≥ bi(Si) ≥ bi(S)

j ≥ !m
m"j=1
t"k=1

nSk rk

Thus (yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the

dual (6).

Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

truthfulness and economical efﬁciency (social welfare maxi-
mization). Unfortunately, a VCG auction requires solving the
NP-hard problem of social welfare optimization multiple times
for calculating externalities as user payments, and becomes
computationally infeasible as the system size grows.

We design a randomized combinatorial auction for dy-
namic resource provisioning, which is computationally efﬁ-
cient, truthful in expectation, and surprisingly, simultaneously
guarantees the same social welfare approximation factor of α
as does the cooperative approximation algorithm. Note that the
latter assumes truthful bidding for free, and can afford to focus
on algorithmically maximizing the social welfare by ignoring
potential strategic bidding from selﬁsh cloud users, while the
former is bound to pay close attention at the same time to
eliciting truth-telling, a property not usually attained without
a compromise in social welfare [7], [8], [9].

Below is a high-level overview of the structure of the
randomized VM auction. We ﬁrst simulate a fractional VCG
auction based on the linear programming relaxation (LPR) of
the social welfare maximization integer program (IP). Then
we utilize a pair of tailored primal and dual linear programs
(LPs) to decompose the optimal fractional solution of the
LPR into a weighted combination of integer solutions to the
IP. This pair of LPs exploit the underlying packing nature
of the social welfare maximization IP, and are solved using
the ellipsoid algorithm with the cooperative α-approximation
algorithm acting as a separation oracle. In this process, we
prove and utilize the fact that the approximation algorithm also
veriﬁes an integrality gap of α between the IP and the LPR.
Each integer solution is selected randomly with probability
equal to its weight calculated during the decomposition, and
contains information for instructing the cloud provider to
conduct both VM provisioning and VM allocation. Fractional
VCG payments calculated at the beginning are ﬁnally scaled
down by the approximation factor α, for ensuring that the
resulting randomized auction inherits its truthfulness from the
fractional VCG auction.

We have implemented the randomized auction and evaluated
it against traces from Google Cluster Data [10] through exten-
sive simulation studies. We found that dynamic provisioning
usually outperforms static provisioning in terms of social
welfare by a ratio on the order of 50%. An exciting observation
is that the primal-dual cooperative approximation algorithm
approaches optimal social welfare within a gap of 10% in all
the scenarios tested, performing much better beyond the the-
oretically proven approximation factor of α ∼ 2.72 in typical
scenarios. Consequently, the randomized auction can provide
better guarantee in social welfare guarantee in practice. Such
empirical observation further motivates our discussions on
improving the cloud’s revenue by scaling fractional VCG
payments with a ratio smaller than 2.72, for striking a ﬂexible
balance between absolute truthfulness and seller revenue.

In the rest of the paper, we discuss related work in Sec.
II, and introduce the system model in Sec. III. We design
a primal-dual approximation algorithm and analyze its ap-
proximation ratio in Sec. IV, and further utilize it in Sec.

V to design the randomized VM auction, evaluated through
simulation studies in Sec. VI. Sec. VII concludes the paper.

II. PREVIOUS LITERATURE

As an efﬁcient resource allocation mechanism in economic
markets, auctions have been studied substantially over the
past few decades. The celebrated VCG auction [11], [12],
[13] represents a general truthful auction framework, under
which buyers have no incentive to submit falsiﬁed bids. A
VCG auction requires solving the social welfare maximization
problem to optimum, for calculating payments of winning
buyers. Consequently, it becomes computationally infeasible
when exact social welfare maximization is NP-hard, as is the
case for dynamic cloud resource provisioning in this work.
A VCG auction loses its truthful property if approximation
algorithms are applied for social welfare maximization.

For non-VCG style of auction design, custom techniques
speciﬁc to the problem at hand are required for guaranteeing
truthfulness of the resulting auction mechanism. In a sequence
of recent work that originated from theoretical computer sci-
ence [14], [8], [9], [15], a decomposition technique is designed
for translating fractional solutions to integer solutions, for
packing type integer programs. The key technique lies in a
pair of tailored primal and dual LPs that exploit such packing
property, which can be solved with an efﬁcient approximation
algorithm that can verify the integrality gap between the IP
and its LPR. To the authors’ knowledge, this work is the ﬁrst
in the ﬁeld of cloud computing that successfully applies such
a primal-dual decomposition technique.

The design of VM auctions has been studied in a series of
work in recent cloud computing literature. For instance, Zhang
et al. [16] study the resource allocation problem with realtime
demand arrivals, and propose a truthful online auction-based
allocation policy. Auctions also take an important role in
the exchange of computing resources among members in a
federated cloud in number of recent work [17], [18].

Zaman et al. [6] propose an auction-based VM alloca-
tion mechanism, named CA-GREEDY, for the case of static
resource provisioning, where the cloud provider has a pre-
determined number of VMs for sale in each VM type.
However,
the approximation ratio of the mechanism they
designed is rather large, especially when a large number of VM
instances are provisioned, a rather common scenario in real-
world cloud computing. The authors also consider the dynamic
provisioning case [5], and present a truthful mechanism. No
guarantee is provided on the social welfare approximation ratio
of their mechanism, though. In contrast, the randomized VM
auction we design is not only truthful, but also achieves close-
to-optimum social welfare maximization.

III. SYSTEM MODEL AND PRELIMINARIES

We consider auction-based resource provisioning and VM
allocation in a cloud market. The cloud provider (auctioneer)
leases resources packed in VMs to cloud users through round-
by-round auctions. The cloud provider has a pool of t types
of resources. The total amount of type k resource is ck. The

cloud provider offers m types of VMs, VM1, ..., VMm. A
VMj instance consumes rk

j amount of type k resource.

Let B denote the set of cloud users, acting as bidders in the
auction. Each user i ∈B can submit as many bids as it wishes.
Let Bi denote the set of bids submitted by cloud user i, and
{Bi}i∈B contains all bids from all users. Each bid speciﬁes
a desired VM bundle S = (nS1 ,··· , nSm) along with the
bidding price bi(S), where nSj is the number of VMj instances
that cloud user i requests in S. We assume that a single bid
alone does not exceed the capacity constraint for any type of
resource, i.e., ∀1 ≤ k ≤ t, Rk ! maxi∈B,S∈Bi!m
j <
ck. Let xi(S) be a binary variable indicating whether user
i wins bundle S. Then x = {xi(S)}i∈B,S∈Bi represents an
allocation outcome. Let vi(x) denote the true valuation of
cloud user i, known only to i itself. Let Πi be the priced
charged to a winning user i. Then the utility ui for user i is:

j=1 nSj rk

if i receives a VM bundle
otherwsie

ui(Bi, B−i) =! vi(x) − Πi
where B−i = {Bj}j∈B\{i} is a set of all the bids except Bi.
Deﬁnition A (randomized) auction is truthful (in expectation)
if for any bidder i, reporting its true valuation in the bid max-
imizes its (expected) utility, regardless of the bids submitted by
other bidders.

(1)

0

We adopt the XOR bidding language, in which a user can
win at most one bid even if it submits multiple bids [15],
leading to the ﬁrst constraint for VM allocation:

xi(S) ≤ 1,∀i ∈B

(2)

The ﬁnite supply of each type of cloud resource translates

into the capacity constraint at the cloud provider:
"i∈B "S∈Bi
xi(S)nSj ≤ Nj,∀1 ≤ j ≤ m
m"j=1

j ≤ ck,∀1 ≤ k ≤ t

Njrk

where Nj is the number of VMj instances provisioned. The
two groups of inequalities in (3) can be merged into an
equivalent, more compact capacity constraint:

"S∈Bi

The social welfare maximization problem can now be

j ) ≤ ck,∀1 ≤ k ≤ t

(4)

nSj rk

xi(S)(

m"j=1

"i∈B "S∈Bi
maximize DP (B) ="i∈B "S∈Bi

formulated:

subject to:

bi(S)xi(S)

(5)

"S∈Bi
m"j=1

xi(S) ≤ 1,

∀i ∈B

"i∈B "S∈Bi

xi(S)(

nSj rk

j ) ≤ ck,

∀1 ≤ k ≤ t
xi(S) ∈{ 0, 1}, ∀i ∈B ,S∈ Bi

(5a)

(5b)

(5c)

where DP (B) denotes the objective function of IP (5). Note
that in a truthful auction, the bid bi(S) can be assumed to be
user i’s valuation of VM bundle S.
Theorem 1. The social welfare maximization problem deﬁned
in IP (5) is NP-hard.

Proof: We construct a polynomial-time reduction to IP (5)
from the knapsack problem, a classic combinatorial optimiza-
tion problem that is proven NP-hard [19]:

max

x # n"i=1

vixi subject to

n"i=1

wixi ≤ W, xi ∈{ 0, 1}$

j=1 nSj rk

Given an instance A = (v1,··· , vn, w1,··· , wn, n, W )
of the knapsack problem, we map it to an instance of the
social welfare maximization problem A# = (|B| = n,|Bi| =
1, bi(S) = vi, t = 1,!m
j = wi, ci = W ), in which
each cloud user submits a single bid, and the resource pool
contains one type of resource. Such mapping can clearly be
done in polynomial time. If there exists an algorithm solving
the social welfare maximization problem A#, then it solves
the corresponding knapsack problem A as well, and vice
versa. Consequently, the knapsack problem can be viewed as
a special case of the social welfare maximization problem,
which must be NP-hard as well.

Theorem 1 reveals that solving IP (5) is NP-hard, and is
computationally infeasible for a large input. Nonetheless, we
may consider the LP relaxation of IP (5) by relaxing its last
constraint (5c) to 1:

xi(S) ≥ 0,∀i ∈B ,S∈ Bi

(5c’)

Introducing dual variable vectors y and z to constraints (5a)
and (5b) respectively, we can formulate the dual of the LPR,
to be used in the primal-dual algorithm design in Sec. IV:

minimize "i∈B

t"k=1

yi +

ckzk

(6)

yi +

t"k=1

m"j=1

nSj rk

j zk ≥ bi(S)
∀i ∈B ,S∈ Bi
yi ≥ 0, zk ≥ 0 ∀i ∈B , 1 ≤ k ≤ t

(6a)

(6b)

IV. A PRIMAL-DUAL COOPERATIVE APPROXIMATION

ALGORITHM

We ﬁrst design a polynomial-time approximation algorithm
for the social welfare maximization problem in IP (5), by
assuming that truthful bids are already known and targeting a
small approximation ratio in social welfare. Such a cooperative
approximation algorithm serves as an important building block
in the design of the randomized VM auction in Sec. V, which
further elicits truthful bids from strategic cloud users.
A. The Primal-Dual Approximation Algorithm

We design a greedy primal-dual algorithm for IP (5),
partially inspired by the primal-dual framework due to Briest et
1Constraint xi(S) ≤ 1,∀i ∈B ,S∈ Bi is redundant (implied by (5a) and
(5c’)) and removed from the LPR.

(3)

subject to:

al. [20] and the classic dual ﬁtting technique in approximation
algorithm design [21], as shown in Algorithm 1. Based on a
certain value per unit resource, the algorithm iteratively selects
the current best bid from the remaining users B who have
not received any VM bundle yet. This bid is appended to the
solution set, and its corresponding user is removed from B.
Meanwhile the algorithm updates the dual variables y and z,
along with the primal variable x, to reﬂect changes in set B.
The ﬁrst part of Algorithm 1 (line 2-6) initializes the primal
variable x as well as the dual variables y and z. Speciﬁcally,
it sets x to 0 (no VM is allocated at the beginning). Values
of y and z are initialized to 0 and 1/ck, respectively. While
other positive values are also possible, choosing 0 and 1/ck
simpliﬁes the algorithm analysis, as later discussed in the
algorithm analysis in the Appendix.

j=1 nSk rk

A while loop (line 9-19) iteratively reﬁnes the primal and
dual variables in x, y and z. It has two stopping conditions:
!t
k=1 ckzk ≥ t exp(Λ − 1) and B = ∅. The ﬁrst ensures the
feasibility of the generated primal solution x, as discussed
in the proof of Theorem 2. The second terminates the loop
and hence Algorithm 1 when every cloud user has received
a bundle of VMs. Since the size of the candidate set B
the while loop is
decrements by one in each iteration,
executed at most |B| times.
!t
k=1!m
j zk in line 13 can be viewed as the
weighted total resource requested by bid S, with zk acting
as a weight for the type k resource. Thus
j zk
can be interpreted as the value for a unit-weight resource. For
each cloud user i, the for loop in lines 10-12 searches for a
bid with the maximum bidding price, from all bids that user
i submits. Line 13 selects the best bid Sµ with the maximum
unit resource value from the pre-selection results in lines 10-
12 across all cloud users. Lines 14-15 update the primal and
dual variables and the set B. In particular, we update the
dual variable y using yµ = bµ(Sµ) so that !µ yµ = p in
all iterations. This helps ensure primal optimality when the
while loop terminates upon B = ∅. Lines 16-18 update the
dual variable z to reﬂect changes to the available resources.
B. Solution Feasibility and Approximation Ratio

!t
k=1!m

bi(S)
j=1 nSk rk

We ﬁrst show feasibility of solutions returned by Algorithm
i , zτ
k

1. At the end of the τ-th iteration of the while loop, let yτ
be the dual variables, and pτ be the primal objective.
Theorem 2. Algorithm 1 computes a feasible solution to IP
(5).

Proof: Values in x are initialized to 0 (line 4) and updated
to 1 only (line 14), so the solution is always binary valued.
Therefore, constraint (5c) will not be violated by Algorithm
1. Constraint (5a) will not be violated either because once
Algorithm 1 ﬁnds a VM bundle for cloud user i ∈B , no more
bundles are allocated to i in the future.
Let us examine the second constraint (5b). Suppose that
the solution is feasible so far. Let ˜S∈ B˜i be the ﬁrst set that
breaks the feasibility when added to the current solution, say,
in iteration τ. That is, ∃1 ≤ k ≤ t, such that

Algorithm 1 The Primal-Dual Approximation Algorithm
1: // Initialization
2: Λ= min 1≤k≤t ck/Rk;
3: p = 0; U = ∅;
4: ∀i,∀S : xi(S) = 0;
5: ∀i : yi = 0;
6: ∀k : zk = 1/ck;
7:
8: // Iterative update of primal and dual variables:
9: while %t

k=1 ckzk < t exp(Λ − 1) AND U( = B do
for all i ∈B \ U do
Si = arg maxS∈Bi{bi(S)};
end for
µ = arg maxi∈B\U#
bi(Si)
!t
k=1!m
j=1 nSi
xµ(Sµ) = 1; yµ = bµ(Sµ);
14:
p = p + bµ(Sµ); U = U∪{ µ};
15:
for all 1 ≤ k ≤ t do
16:
zk = zk · (t exp(Λ − 1))(!m
17:
end for
18:
19: end while

j zk$;

10:
11:
12:
13:

j=1 nSµ

j rk

j rk

j )/(ck−Rk);

"S!∈Γ
j + "S!∈Γ

˜Sj rk

m"j=1
m"j=1

n

m"j=1

nS!
j rk

j ≤ ck

nS!
j rk

j ≥ ck

nS!
j rk

j=1 nS!

j rk

nS!
j rk

j=1 n ˜Sj rk

j , we have

j /(ck − Rk) ≥ 1

and that leads to:
ckzτ−1

where Γ is the family of sets added to the solution before set
˜S. Since each single bid cannot exceed the capacity constraint,
i.e., ck > Rk ≥!m
m"j=1
j ≥ ck − Rk ⇒ "S!∈Γ
"S!∈Γ
k = (t exp(Λ−1))!S!∈Γ!m

m"j=1
j /(ck−Rk) ≥ t exp(Λ−1)
which satisﬁes the ﬁrst stopping condition in line 14. This
implies that iteration τ − 1 is the last iteration, and ˜S would
not be added to the solution at all.
Even if the primal solution is always feasible during the
execution, the dual is not necessarily so. The following lemma
shows that the dual variables can be made feasible through
scaling by a carefully chosen factor. Such posterior dual
scaling is known as dual ﬁtting in the primal-dual optimization
literature, and has proven effective in helping pursue good
approximation ratios in algorithm design [21].
Lemma 1.
is the (possibly infeasible)
dual solution at
then
(yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the dual
(6), where f (z,S) ! bi(S)/(!t
j zk),  !
j=1 nSj rk
maxS1,S2∈Bi,i∈B,k∈[1,t]!m
j=1 nS2
j .
j rk

Please refer to Appendix A for the proof of Lemma 1.
Employing the dual ﬁtting result in Lemma 1 and LP duality,
we next prove that Algorithm 1 guarantees an α-approximation

k=1!m
j /!m

(yτ−1, zτ−1)
the beginning of

the τ-th iteration,

j=1 nS1

j rk

If

of social welfare, where α = 1 +  Λ
Λ−1 (et1/(Λ−1) − 1). In
practice, the volume of a cloud provider’s resource pool is
substantially larger than a single user demand, i.e., Λ * 1.
The number of resource types t is a small constant (3 to
5). Consequently, we can conduct the following quantitative
estimation on the approximation ratio:

Λ
Λ − 1

(1 + 

α = lim
Λ→∞

(et1/(Λ−1) − 1)) = 1 + (e − 1)

lim
Λ→∞
If we further consider the case where each user only submits
one bid, then  = 1, and the approximation ratio α is close
to e ≈ 2.72, as illustrated in the 3D plot of the function α =
1 +  Λ

Λ−1 (et1/(Λ−1) − 1) in Fig. 1.

o

i
t

a
R
n
o

 

i
t

i

a
m
x
o
r
p
p
A

7

6

5

4

3

2
5

10

15

20

Λ

25

0

5

15

10

20

No. of resource types

Fig. 1. The approximation ratio α quickly decreases as Λ increases, and
closely approaches e ∼ 2.72 as long as the number of resource types t is not
too large and each user only submits one bid.
Theorem 3. Algorithm 1 computes an α-approximate solution
to IP (5) in polynomial-time, where α = 1+ Λ
Λ−1 (et1/(Λ−1)−1).

Please refer to Appendix B for the proof of Theorem 3.

V. A RANDOMZIED AUCTION MECHANISM

Capitalizing on Algorithm 1 for approximate social welfare
maximization under dynamic resource provisioning, we now
design a randomized combinatorial VM auction that achieves
the same social welfare approximation ratio α, while simulta-
neously ensuring truthful bidding from cloud users. Algorithm
2 outlines the key steps in the randomized auction mechanism.

Algorithm 2 A Randomized Combinatorial VM Auction
1: Simulating the fractional VCG auction.
2: — Compute the fractional VCG allocation x∗ and payment

ΠF , through solving the LPR of IP (5).

%l∈I

3: Decomposing fractional solution into integer solutions
4: — Decompose the scaled down fractional solution x∗/α to
a convex combination of integer solutions, i.e., x∗/α =
βlx(l), through solving a pair of primal-dual LPs in
(8) and (9) using the ellipsoid method, leveraging Algorithm
1 as a separation oracle.
5: Randomized VM allocation
6: — Select each x(l) randomly with probability βl.
7: Charging scaled fractional VCG prices
8: — for each winning cloud user i ∈B : charge a price Πi =

ΠF

i /α.

A. The Fractional VCG Auction

Theorem 1 reveals that solving IP (5) to optimal is NP-
hard, implying that applying the VCG auction for truthfulness
is computationally expensive. We ﬁrst resort to a fractional
version of the VCG auction for achieving both computational
efﬁciency (polynomial time complexity) and economic efﬁ-
ciency (social welfare maximization), by applying the VCG
mechanism to the LPR instead of IP (5).

The optimal solution x∗ to the LPR constitutes the VM
allocation solution in the fractional VCG auction. The frac-
tional VCG payment for user i equals i’s externality, or the
difference in social welfare with and without i’s bid [9], [11]:
(7)

ΠF

bi! (S)x∗i! (S)

i = Vi − "i!’=i,i!∈B "S∈Bi!

where Vi is the optimal DP F (B) to the LPR when cloud user
i bids zero.
The VM bundle allocation scheme in x∗ has fractional
instead of binary values and is hence not practically applicable.
This is to be resolved using the primal-dual decomposition
technique, in Sec. V-B.

B. Decomposing the Fractional Solution

We ﬁrst prepare for the decomposition by showing that
Algorithm 1 veriﬁes the integrality gap between IP (5) and
the LPR in the sense that the integrality gap is also bounded
by α. This is true because for any bidding proﬁle, Algorithm
1 computes an integer solution whose social welfare is at
least 1/α times the optimal solution to the LPR, due to
the following two facts: (i) the approximation ratio does not
depend on the bidding prices bi(S),∀i ∈B ,S∈ Bi; (ii) the
ratio is proven through using d/pω as an upper bound.
Integrality gap = LP R∗/DP (B)∗ ≤ d/pω = α

where DP (B)∗ is the value of the optimal solution to IP (5).
The inequality is due to LP R∗ ≤ d and pω ≤ DP (B)∗. Thus
d/pω also works as an upper bound of the integrality gap.
We next decompose x∗ into a convex combination of integer
solutions, using a LP duality based decomposition technique
for packing type of optimization problems due to Carr et al.
[14] and Lavi et al. [8]. Our goal is to ﬁnd βl and x(l) such

that x∗/α = !l∈I βlx(l), where Z(DP ) = {x(l)}l∈I is
the set of integer solutions to IP (5), I is the index set, and
βl ≥ 0,!l∈I βl = 1. Since the integrality gap is at most
α, there exists at least one integer solution, e.g., DP (B)∗,
dominating the scaled down fractional solution. Consequently,
scaling down the fractional solution x∗ by α can guarantee the
existence of such a decomposition.

The following primal and dual LPs are solved for decom-

posing x∗:

Primal:

minimize "l∈I

βl

(8)

subject to:

"l∈I

βlxi(S, l) = x∗i (S)/α ∀i ∈B ,S∈ Bi

"l∈I

βl ≥ 1
βl ≥ 0

∀l ∈I

(8a)

(8b)

(8c)

Dual:

subject to:

"i∈B,S∈Bi

maximize 1

α "i∈B,S∈Bi

x∗i (S)νi(S) + λ

(9)

xi(S, l)νi(S) + λ ≤ 1
λ ≥ 0

∀l ∈I

νi(S) unconstrained ∀i ∈B ,S∈ Bi

(9a)

(9b)
(9c)

The primal decomposition LP has an exponential number
of variables. We resort to the dual. Even though the dual
(9) has an exponential number of constraints, the ellipsoid
method [22] can be applied to solve it in polynomial-time,
with Algorithm 1 acting as a separation oracle for generating
separating hyperplanes for the dual. Once an optimal dual so-
lution is obtained, using a polynomial number of hyperplanes,
the primal (8) can be converted to an optimization problem
with a polynomial number of constraints corresponding to
these hyperplanes. As a result, the convex decomposition can
be solved within polynomial time. However νi(S) may be
negative, making Algorithm 1 work improperly. Instead of
using νi(S) directly, we set νi(S)+ = max(νi(S), 0) to
circumvent this issue. IP (5) satisﬁes the nice packing property,
i.e., if a ∈ Z(DP ), b ≤ a then b ∈ Z(DP ). Using the packing
property, the following lemma ensures that using νi(S)+ does
not violate the constraints in the dual (9).
Lemma 2. Given an integer solution x# ∈ Z(DP ), we can
obtain x(l) ∈ Z(DP ) so that !i∈B,S∈Bi
x#i(S, l)νi(S)+ =
!i∈B,S∈Bi

xi(S, l)νi(S).
xi(S, l) =! x(i(S, l)
is
Since νi(S)+ = max(νi(S), 0),
that
!i∈B,S∈Bi
x#i(S, l)νi(S)+ = !i∈B,S∈Bi
xi(S, l)νi(S). It
follows from x# ≥ 0 that x(l) is no larger than x#. Finally,
due to the packing property, x(l) ∈ Z(DP ).
Lemma 3. If β∗ is an optimal solution to the primal (8), then
!l∈I β∗l = 1.
Proof: Since ν∗ = 0,λ ∗ = 1 is feasible, the optimal solution
to the dual (9) is at least 1. Suppose ∃λ∗ ≥ 0, ν∗ such that

if νi(S) > 0
otherwise
it

Proof: Let

clear

(10)

0

1

α "i∈B,S∈Bi

x∗i (S)ν∗i (S) + λ∗ > 1

Since x∗i (S) is the optimal fractional solution to the LPR,
x∗i (S) ≥ 0. We then have 1
x∗i (S)ν∗i (S)+ ≥
α!i∈B,S∈Bi
x∗i (S)ν∗i (S) > 1 − λ∗. Since the integral-
1
ity gap is at most α, veriﬁed by Algorithm 1 when

α!i∈B,S∈Bi

the objective is ν∗+,

there must be l ∈I

to strong LP duality.
C. The Randomized Auction

satisfying
!i∈B,S∈Bi
x#i(S, l)ν∗i (S)+ > 1 − λ∗. By Lemma 2, we have
∃x ∈ Z(DP ), such that !i∈B,S∈Bi
xi(S, l)ν∗i (S)>1 − λ∗.
This implies that ν∗ and λ∗ violate constraint (9a). Therefore,
the optimal value for the dual (9) is 1, and!l∈I β∗l = 1 due
{βl}l∈I in the convex decomposition can be viewed
feasible integer solu-
as a probability distribution over
tions in Z(DP ). Given the convex decomposition x∗/α =
!l∈I βlx(l), as shown in Algorithm 2, we select each valid

integer solution x(l) randomly with probability βl, and set
the prices Πi =Π F
i /α. The following theorem establishes
expected truthfulness of the randomized auction.
Theorem 4. The randomized auction in Algorithm 2 is truth-
ful in expectation, and achieves an α-approximation to the
optimal social welfare of the cloud market.

Proof: The expected utility of a given bidder i is:

ui("l∈I

βlx(l)) − Πi = ui(x∗/α) − ΠF
= (ui(x∗) − ΠF

i )/α

i /α

The second equality is due to the linearity of ui(x). This
means the expected utility is scaled down by α from the utility
in the fractional VCG auction. Truthfulness of the randomized
auction thus follows from that of the fractional VCG auction.

VI. PERFORMANCE EVALUATION

We have implemented the randomized auction, including
Algorithm 1 and the ellipsoid algorithm as its modules, for
performance evaluation. The target cloud system includes a
medium-sized cloud provisioning six types of VMs, con-
structed from three types of resources (CPU, RAM, and
storage), following the conﬁgurations in Tab. I. Each cloud
user bids for four VM bundles, which are synthesized from
Google Cluster Data [10], while bidding prices are generated
uniformly at random.
A. Performance of the Approximation Algorithm

We ﬁrst study the performance of Algorithm 1 through
varying the number of cloud users from 100 to 900, as
illustrated in Fig. 2. Algorithm 1 achieves a close-to-optimal
performance, much better than the theoretical approximation
ratio proved in Theorem 3. We suspect that the analysis of
Algorithm 1 can be further improved, for a tighter bound on
the approximation ratio. Fig. 2 also shows that Algorithm 1
scales to a large number of bidding requests without sacriﬁcing
the social welfare approximation ratio.
B. Static Provisioning vs Dynamic Provisioning

We next compare static resource provisioning with dynamic
resource provisioning in terms of economic efﬁciency. Two
types of static provisioning are considered: Static Provisioning

o

i
t

a
R
n
o

 

i
t

i

a
m
x
o
r
p
p
A

4

3

2

1

0

 

100

Ratio calculated by Therorem 3
Real Ratio

 

300

500

700

Number of Bidders

900

Fig. 2. A comparison between theoretical ratios and real ratios.

I where all six types of VMs are provisioned with the
same number; Static Provisioning II where a large amount
of resources have been packed into the entry-level VM,
m1.medium, meanwhile only relatively small numbers of the
high-end VMs are provisioned.

We consider the following three performance metrics: (i)
social welfare, (ii) CPU utilization, the ratio of the number of
allocated CPUs to the total number of CPUs, and (iii) user
satisfaction, the ratio of the number of winning cloud users to
the total number of cloud users. We run VCG auction for all
three styles of provisioning. The results for the three metrics
are illustrated in Fig. 3(a), Fig. 3(b) and Fig. 3(c), respectively.
We observe that dynamic resource provisioning can achieve
higher social welfare over both static alternatives. The social
welfare increases as the number of cloud users increases.
Regarding CPU utilization, dynamic resource provisioning
enables almost full allocation of CPU resources, while static
resource provisioning under-utilizes CPU resources due to its
unresponsiveness to realtime user demands. With regard of
user satisfaction, the overall trend is that user satisfaction
decreases as the number of cloud users grows. For a given
number of cloud users, dynamic resource provisioning perfor-
mances better than the two static resource provisioning styles.
C. The Randomized Auction

We implemented the randomized auction that composes of
the ellipsoid method and the primal-dual approximation algo-
rithm. Given the randomized nature of the auction, we simulate
each auction scenario for 50 times and compute the average
social welfare. Fig. 4(a) compares the randomized auction
with the classic VCG auction in terms of economic efﬁciency
(social welfare). The black curve in Fig. 4(a) is the expected
social welfare calculated according to Theorem 4. The results
of the randomized auction ﬂuctuate around the curve, verifying
the correctness of the proposed randomized algorithm. Fig.
4(b) illustrates the total payment of the randomized auction,
which matches 1/α fraction of the VCG payment.
D. An Even Better Randomized Auction?

The bound α proven in Theorem 3 can be loose, as
suggested by simulation results
from Sec. VI-A. This
might make the randomized auction pessimistic, over-
scaling the
and compromising
revenue of the cloud provider. We are curious to know
whether
convex
In Fig. 4(a) and Fig. 4(b), α =
decomposition (8).

smaller α can still work with the

fractional VCG prices

3.179, 3.184, 3.219, 3.334, 3.333, 3.333, 3.330, 3.333, 3.333
for these 9 points respectively. We experiment with α = 2 in
the convex decomposition (8), and run the ellipsoid method
for the dual (9) again. After obtaining the results, we check
all candidate integer solutions with the constraints (5a) and
(5b), to ensure that all these solutions are feasible. The results
shown in Fig. 5(a) and Fig. 5(b), are rather surprising. α = 2
works well with the randomized auction, producing a much
better approximation ratio for our proposed auction. However
this is not always the case if we employ a smaller α such
as α = 1.5. The approximation ratio given by Theorem 3
guarantees the existence of such integer solution which is at
least 1/α times of the fractional solution in the worst case.

VII. CONCLUSION

Focusing on dynamic resource provisioning and heteroge-
neous types of VMs, we ﬁrst propose a cooperative primal
dual approximation algorithm with approximation ratio close
to 2.72. Employing the cooperative approximation algorithm
as a building block, we then design a novel randomized auction
using a pair of tailed primal and dual LPs to decompose
an optimal fractional solution into a summation of a series
of weighted valid integer solutions. The randomized auction
achieves the same approximation ratio in social welfare as the
cooperative algorithm does. Simulation studies verify the efﬁ-
cacy of the proposed auction and the effectiveness of dynamic
resource provisioning over static resource provisioning.

APPENDIX A

PROOF OF LEMMA 1

Proof: Since the set {Si}i∈B is selected by line 11, where
each Si belongs to the corresponding Bi, i.e., the correspond-
ing cloud user, we have ∀i ∈B ,S∈ Bi:
(11)
Because yµ is set to bµ(Sµ) where bµ(Sµ) ≥ bµ(S),∀µ ∈

bi(S) ≤ bi(Si)

U,S∈ Bµ. That is:

yµ ≥ bµ(S),∀µ ∈U ,S∈ Bµ

which implies that constraint (6a) is satisﬁed ∀µ ∈U ,S∈ Bµ.
Next we examine the users µ ∈B \ U . Note that Sτ is
decided by line 13, which is a maximization. Therefore,

bτ (Sτ )
j=1 nSτ
bi(Si)
j=1 nSi

≥

j rk

j zτ−1

k

f (zτ−1, Sτ ) =

%t
k=1%m
%t
k=1%m
m"j=1
t"k=1
Since !m
B, k ∈ [1, t], (12) further implies that ∀i ∈B \ U ,S∈ Bi,

k ≥ bi(Si),

∀i ∈B \ U⇔

f (zτ−1, Sτ )

∀i ∈B \ U

j=1 nS1

j rk

j=1 nS2

j rk

nSi
k rk

j zτ−1

j rk

j zτ−1

k

,

j ,∀S1,S2 ∈ Bi, i ∈

(12)

f (zτ−1, Sτ )

j zτ−1

k ≥ bi(Si) ≥ bi(S)

j ≥ !m
m"j=1
t"k=1

nSk rk

Thus (yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the

dual (6).

2.5 x 105

e
r
a

f
l

e
W

 
l

i

a
c
o
S

2

1.5

1

0.5

0

 

10

 

Static Provisioning I
Static Provisioning II
Dynamic Provisioning

30

Number of Bidders

50

70

90

)

%

(
 

n
o

i
t

a
z

i
l
i
t

 

U
U
P
C

140
120
100
80
60
40
20
0

 

10

Static Provisioning I
Static Provisioning II
Dynamic Provisioning

30

50

70

Number of Bidders

90

 

100

)

%

(
 

n
o

i
t
c
a
f
s
i
t

a
S

 
r
e
s
U

80

60

40

20

0

 

10

 

Static Provisioning I
Static Provisioning II
Dynamic Provisioning

30

50

70

Number of Bidders

90

(a) Social Welfare

(b) CPU Utilization

(c) User Satisfaction

Fig. 3. Comparisons of social welfare, CPU utilization and user satisfaction among different provisioning styles.

3 x 105
2.5

2

1.5

1

0.5

 

VCG Auction
Expected Social Welfare
Algorithm 2

3 x 105
2.5

)
$
(
 
t

n
e
m
y
a
P

 
l

t

a
o
T

2

1.5

1

0.5

 

VCG Auction
Algorithm 2

e
r
a

f
l

e
W

 
l

i

 

a
c
o
S
e
g
a
r
e
v
A

0
 
20

30

40

50
70
Number of Bidders

60

80

90

100

0
 
20

30

40

50
70
Number of Bidders

60

80

90

100

(a) Social Welfare

(b) Total Payment

Fig. 4. Social welfare and total payments of the randomized auction, compared with the VCG auction.

3 x 105
2.5

2

1.5

1

0.5

e
r
a
f
l
e
W

i

 
l
a
c
o
S
 
e
g
a
r
e
v
A

 

VCG Auction
Expected Social Welfare
Algorithm 2

3 x 105
2.5

)
$
(
 
t
n
e
m
y
a
P

 
l
a
t
o
T

2

1.5

1

0.5

 

VCG Auction
Algorithm 2

0
 
20

30

40

50
70
Number of Bidders

60

80

90

100

0
 
20

30

40

50
70
Number of Bidders

60

80

90

100

(a) Social Welfare

(b) Total Payment

Fig. 5. Social welfare and total payments of the randomized auction when scaled down by α = 2, compared with the VCG auction.

APPENDIX B

PROOF OF THEOREM 3

Proof: We ﬁrst examine the complexity of Algorithm 1. Due
to the stopping conditions, the while loop will iterate at most
|B| times, linear to the input size. Within loop body, lines 10-
12 can be ﬁnished within O(mt|B| · |S|) even using a simple
brute-force search. Similarly, line 13 and lines 16-18 can also
be done in polynomial time. Therefore, Algorithm 1 runs in
polynomial time overall.

k=1 ckzτ

i , d2(τ ) =!t

Next we analyze the approximation ratio of Algorithm 1. Let
d1(τ ) =!i∈B yτ
k. Let d be the optimal
solution to the dual (6). Let Sτ denote the set selected in the
τ-th iteration. ω is denoted the last iteration of the loop.
Case 1: Algorithm 1 stops at ω-th iteration where U = B and
!t
k=1 ckzk < t exp(Λ − 1). We know that each cloud user
wins one bid. We here prove that the algorithm produces an
optimal solution to IP (5). Theorem 2 guarantees that pω is
the value of a feasible solution to IP (5). Meanwhile since

µ = maxS∈Bµ{bµ(S)}≥ bµ(S),∀µ ∈U ,S∈ Bµ, thus
yω
constraint (6a) is satisﬁed regardless of z,∀i ∈B ,S∈ Bi,
i.e., (yω, z = 0) is a feasible solution, whose value is exactly
pω as well, to the dual of the LPR. By weak duality for the
LP relaxation, any feasible solution to the dual (6) is an upper
bound of IP (5). Therefore pω is the optimal value to IP (5).
In this case, the approximation ratio is 1.

k=1 ckzω

ratio in following two sub-cases.

Case 2: Algorithm 1 stops at ω-th iteration where d2(ω) =
k ≥ t exp(Λ − 1). We analyze the approximation

!t
Sub Case 2.1: ∃ an iteration τ ≤ ω, such that α ≥

d1(τ−1).
That means we already found an α-approximate ratio, since (a)
d1(τ − 1) = pτ−1, which is the value of the primal solution;
(b) d1(τ ) is a non-decreasing function of τ because it becomes
larger when the iteration continues.

d

Sub Case 2.2: α<

any iteration τ ≥ 1, we have:

d

d1(τ−1), for all iterations τ ≤ ω. For

Dynamic Resource Provisioning in Cloud

Computing: A Randomized Auction Approach

Linquan Zhang∗, Zongpeng Li∗, Chuan Wu†

∗Department of Computer Science, University of Calgary, {linqzhan,zongpeng}@ucalgary.ca

†Department of Computer Science, The University of Hong Kong, cwu@cs.hku.hk

Abstract—This work studies resource allocation in a cloud
market through the auction of Virtual Machine (VM) instances.
It generalizes the existing literature by introducing combinatorial
auctions of heterogeneous VMs, and models dynamic VM pro-
visioning. Social welfare maximization under dynamic resource
provisioning is proven NP-hard, and modeled with a linear inte-
ger program. An efﬁcient α-approximation algorithm is designed,
with α ∼ 2.72 in typical scenarios. We then employ this algorithm
as a building block for designing a randomized combinatorial
auction that is computationally efﬁcient, truthful in expectation,
and guarantees the same social welfare approximation factor α. A
key technique in the design is to utilize a pair of tailored primal
and dual LPs for exploiting the underlying packing structure
of the social welfare maximization problem, to decompose its
fractional solution into a convex combination of integral solutions.
Empirical studies driven by Google Cluster traces verify the
efﬁcacy of the randomized auction.

I.

INTRODUCTION

The cloud computing paradigm offers users rapid on-
demand access to computing resources such as CPU, RAM
and storage, with minimal management overhead. Recent
commercial cloud platforms, exempliﬁed by Amazon EC2 [1],
Microsoft Azure and Linode [2], organize a shared resource
pool for serving their users. Virtualization technologies help
cloud providers pack their resources into different types of
virtual machines (VMs), for allocation to cloud users. For
example, Tab. I illustrates a number of VMs types available
at Amazon EC2 [1].

AMAZON EC2 VIRTUAL MACHINE INSTANCE TYPES

TABLE I

VM type
m1.medium
m1.xlarge
c1.medium
c1.xlarge
m2.xlarge
hi1.4xlarge

CPU

2 EC2 Compute Units
8 EC2 Compute Units
5 EC2 Compute Units
20 EC2 Compute Units
6.5 EC2 Compute Units
35 EC2 Compute Units

Memory
Storage
3.75 GB
410 GB
15 GB
1680 GB
1.7 GB
350 GB
7 GB
1680 GB
17.1 GB
420 GB
60.5 GB 2048 GB

The underlying reason for such VM heterogeneity is that
a cloud user’s job often requires cooperation among multiple
VM instances, each with its own focus and forte. For example,
social games [3] and enterprise applications [4] are often
composed of a front-end web server tier, a load balancing
tier and a back-end data storage tier, each suited for execution

This work is supported in part by the Natural Sciences and Engineering
Research Council of Canada (NSERC), and grants from Hong Kong RGC
under the contracts HKU 717812 and HKU 718513.

978-1-4799-3360-0/14/$31.00 ©2014 IEEE

on a VM that is abundant in a particular type of resource:
bandwidth, CPU, or storage.

Unfortunately, existing allocation mechanisms in cloud mar-
kets either are based on ﬁxed pricing, which is economically
inefﬁcient, or resort to simple, static auctions that treat VMs
as type-oblivious commodities. More speciﬁcally, it is usually
assumed that either a single type of VMs exists in the cloud
market, or VMs are substitutes in that a high-end VM is
equivalent to a number of low-end VMs, e.g., a Type II (2
× Core, 2 GB RAM, 40 GB Disk) VM equals two Type I
(1 × Core, 1 GB RAM, 20 GB Disk) VMs [5], [6]. Such
type-oblivious VM auctions do not handle the existing VM
heterogeneity in today’s cloud computing platforms, and can
not be adapted in a straightforward way to do so.

This work generalizes such simple auction design in the
cloud market by proposing combinatorial auctions that are
expressive enough for cloud users to request bundles of VM
instances belonging to distinct types. It further departs from
the existing literature by explicitly modelling the dynamic
provisioning of VM instances from cloud resources. Under
static provisioning, the cloud assembles its available resources
into different types of VMs based on simple heuristics or his-
torical VM demand patterns, before the auction starts. Under
dynamic provisioning, the cloud conducts VM assembling in
an online fashion upon receiving VM bundle bids [5], targeting
maximum possible social welfare given the current bid proﬁle.
We show that social welfare maximization under dynamic
resource provisioning is NP-hard due to its combinatorial
optimization nature. Nonetheless, such maximization can be
cast into a linear integer program, based on which we design
an efﬁcient cooperative primal-dual approximation algorithm
that achieves a small approximation factor α. The factor α
depends on the diversity of resource demands within all bids
submitted by one user, the normalized volume of the cloud
resource pool and the number of resource types, and is shown
to be close to 2.72 in most practical settings. However, such an
approximation algorithm assumes that truthful bids are given
for free, and is not applicable in a cloud market with strategic
users driven by their own economical interests, who may not
voluntarily reveal their true evaluation of a desired VM bundle.
The crux of many auction design in the literature indeed lies
in the careful custom tuning of the auction mechanism, for
eliciting truthful bids from selﬁsh buyers [7], [8]. A well-
known type of truthful auctions is the celebrated Vickrey-
Clarke-Groves (VCG) mechanism, which is proven to be
the only type of auctions that can simultaneously guarantee

truthfulness and economical efﬁciency (social welfare maxi-
mization). Unfortunately, a VCG auction requires solving the
NP-hard problem of social welfare optimization multiple times
for calculating externalities as user payments, and becomes
computationally infeasible as the system size grows.

We design a randomized combinatorial auction for dy-
namic resource provisioning, which is computationally efﬁ-
cient, truthful in expectation, and surprisingly, simultaneously
guarantees the same social welfare approximation factor of α
as does the cooperative approximation algorithm. Note that the
latter assumes truthful bidding for free, and can afford to focus
on algorithmically maximizing the social welfare by ignoring
potential strategic bidding from selﬁsh cloud users, while the
former is bound to pay close attention at the same time to
eliciting truth-telling, a property not usually attained without
a compromise in social welfare [7], [8], [9].

Below is a high-level overview of the structure of the
randomized VM auction. We ﬁrst simulate a fractional VCG
auction based on the linear programming relaxation (LPR) of
the social welfare maximization integer program (IP). Then
we utilize a pair of tailored primal and dual linear programs
(LPs) to decompose the optimal fractional solution of the
LPR into a weighted combination of integer solutions to the
IP. This pair of LPs exploit the underlying packing nature
of the social welfare maximization IP, and are solved using
the ellipsoid algorithm with the cooperative α-approximation
algorithm acting as a separation oracle. In this process, we
prove and utilize the fact that the approximation algorithm also
veriﬁes an integrality gap of α between the IP and the LPR.
Each integer solution is selected randomly with probability
equal to its weight calculated during the decomposition, and
contains information for instructing the cloud provider to
conduct both VM provisioning and VM allocation. Fractional
VCG payments calculated at the beginning are ﬁnally scaled
down by the approximation factor α, for ensuring that the
resulting randomized auction inherits its truthfulness from the
fractional VCG auction.

We have implemented the randomized auction and evaluated
it against traces from Google Cluster Data [10] through exten-
sive simulation studies. We found that dynamic provisioning
usually outperforms static provisioning in terms of social
welfare by a ratio on the order of 50%. An exciting observation
is that the primal-dual cooperative approximation algorithm
approaches optimal social welfare within a gap of 10% in all
the scenarios tested, performing much better beyond the the-
oretically proven approximation factor of α ∼ 2.72 in typical
scenarios. Consequently, the randomized auction can provide
better guarantee in social welfare guarantee in practice. Such
empirical observation further motivates our discussions on
improving the cloud’s revenue by scaling fractional VCG
payments with a ratio smaller than 2.72, for striking a ﬂexible
balance between absolute truthfulness and seller revenue.

In the rest of the paper, we discuss related work in Sec.
II, and introduce the system model in Sec. III. We design
a primal-dual approximation algorithm and analyze its ap-
proximation ratio in Sec. IV, and further utilize it in Sec.

V to design the randomized VM auction, evaluated through
simulation studies in Sec. VI. Sec. VII concludes the paper.

II. PREVIOUS LITERATURE

As an efﬁcient resource allocation mechanism in economic
markets, auctions have been studied substantially over the
past few decades. The celebrated VCG auction [11], [12],
[13] represents a general truthful auction framework, under
which buyers have no incentive to submit falsiﬁed bids. A
VCG auction requires solving the social welfare maximization
problem to optimum, for calculating payments of winning
buyers. Consequently, it becomes computationally infeasible
when exact social welfare maximization is NP-hard, as is the
case for dynamic cloud resource provisioning in this work.
A VCG auction loses its truthful property if approximation
algorithms are applied for social welfare maximization.

For non-VCG style of auction design, custom techniques
speciﬁc to the problem at hand are required for guaranteeing
truthfulness of the resulting auction mechanism. In a sequence
of recent work that originated from theoretical computer sci-
ence [14], [8], [9], [15], a decomposition technique is designed
for translating fractional solutions to integer solutions, for
packing type integer programs. The key technique lies in a
pair of tailored primal and dual LPs that exploit such packing
property, which can be solved with an efﬁcient approximation
algorithm that can verify the integrality gap between the IP
and its LPR. To the authors’ knowledge, this work is the ﬁrst
in the ﬁeld of cloud computing that successfully applies such
a primal-dual decomposition technique.

The design of VM auctions has been studied in a series of
work in recent cloud computing literature. For instance, Zhang
et al. [16] study the resource allocation problem with realtime
demand arrivals, and propose a truthful online auction-based
allocation policy. Auctions also take an important role in
the exchange of computing resources among members in a
federated cloud in number of recent work [17], [18].

Zaman et al. [6] propose an auction-based VM alloca-
tion mechanism, named CA-GREEDY, for the case of static
resource provisioning, where the cloud provider has a pre-
determined number of VMs for sale in each VM type.
However,
the approximation ratio of the mechanism they
designed is rather large, especially when a large number of VM
instances are provisioned, a rather common scenario in real-
world cloud computing. The authors also consider the dynamic
provisioning case [5], and present a truthful mechanism. No
guarantee is provided on the social welfare approximation ratio
of their mechanism, though. In contrast, the randomized VM
auction we design is not only truthful, but also achieves close-
to-optimum social welfare maximization.

III. SYSTEM MODEL AND PRELIMINARIES

We consider auction-based resource provisioning and VM
allocation in a cloud market. The cloud provider (auctioneer)
leases resources packed in VMs to cloud users through round-
by-round auctions. The cloud provider has a pool of t types
of resources. The total amount of type k resource is ck. The

cloud provider offers m types of VMs, VM1, ..., VMm. A
VMj instance consumes rk

j amount of type k resource.

Let B denote the set of cloud users, acting as bidders in the
auction. Each user i ∈B can submit as many bids as it wishes.
Let Bi denote the set of bids submitted by cloud user i, and
{Bi}i∈B contains all bids from all users. Each bid speciﬁes
a desired VM bundle S = (nS1 ,··· , nSm) along with the
bidding price bi(S), where nSj is the number of VMj instances
that cloud user i requests in S. We assume that a single bid
alone does not exceed the capacity constraint for any type of
resource, i.e., ∀1 ≤ k ≤ t, Rk ! maxi∈B,S∈Bi!m
j <
ck. Let xi(S) be a binary variable indicating whether user
i wins bundle S. Then x = {xi(S)}i∈B,S∈Bi represents an
allocation outcome. Let vi(x) denote the true valuation of
cloud user i, known only to i itself. Let Πi be the priced
charged to a winning user i. Then the utility ui for user i is:

j=1 nSj rk

if i receives a VM bundle
otherwsie

ui(Bi, B−i) =! vi(x) − Πi
where B−i = {Bj}j∈B\{i} is a set of all the bids except Bi.
Deﬁnition A (randomized) auction is truthful (in expectation)
if for any bidder i, reporting its true valuation in the bid max-
imizes its (expected) utility, regardless of the bids submitted by
other bidders.

(1)

0

We adopt the XOR bidding language, in which a user can
win at most one bid even if it submits multiple bids [15],
leading to the ﬁrst constraint for VM allocation:

xi(S) ≤ 1,∀i ∈B

(2)

The ﬁnite supply of each type of cloud resource translates

into the capacity constraint at the cloud provider:
"i∈B "S∈Bi
xi(S)nSj ≤ Nj,∀1 ≤ j ≤ m
m"j=1

j ≤ ck,∀1 ≤ k ≤ t

Njrk

where Nj is the number of VMj instances provisioned. The
two groups of inequalities in (3) can be merged into an
equivalent, more compact capacity constraint:

"S∈Bi

The social welfare maximization problem can now be

j ) ≤ ck,∀1 ≤ k ≤ t

(4)

nSj rk

xi(S)(

m"j=1

"i∈B "S∈Bi
maximize DP (B) ="i∈B "S∈Bi

formulated:

subject to:

bi(S)xi(S)

(5)

"S∈Bi
m"j=1

xi(S) ≤ 1,

∀i ∈B

"i∈B "S∈Bi

xi(S)(

nSj rk

j ) ≤ ck,

∀1 ≤ k ≤ t
xi(S) ∈{ 0, 1}, ∀i ∈B ,S∈ Bi

(5a)

(5b)

(5c)

where DP (B) denotes the objective function of IP (5). Note
that in a truthful auction, the bid bi(S) can be assumed to be
user i’s valuation of VM bundle S.
Theorem 1. The social welfare maximization problem deﬁned
in IP (5) is NP-hard.

Proof: We construct a polynomial-time reduction to IP (5)
from the knapsack problem, a classic combinatorial optimiza-
tion problem that is proven NP-hard [19]:

max

x # n"i=1

vixi subject to

n"i=1

wixi ≤ W, xi ∈{ 0, 1}$

j=1 nSj rk

Given an instance A = (v1,··· , vn, w1,··· , wn, n, W )
of the knapsack problem, we map it to an instance of the
social welfare maximization problem A# = (|B| = n,|Bi| =
1, bi(S) = vi, t = 1,!m
j = wi, ci = W ), in which
each cloud user submits a single bid, and the resource pool
contains one type of resource. Such mapping can clearly be
done in polynomial time. If there exists an algorithm solving
the social welfare maximization problem A#, then it solves
the corresponding knapsack problem A as well, and vice
versa. Consequently, the knapsack problem can be viewed as
a special case of the social welfare maximization problem,
which must be NP-hard as well.

Theorem 1 reveals that solving IP (5) is NP-hard, and is
computationally infeasible for a large input. Nonetheless, we
may consider the LP relaxation of IP (5) by relaxing its last
constraint (5c) to 1:

xi(S) ≥ 0,∀i ∈B ,S∈ Bi

(5c’)

Introducing dual variable vectors y and z to constraints (5a)
and (5b) respectively, we can formulate the dual of the LPR,
to be used in the primal-dual algorithm design in Sec. IV:

minimize "i∈B

t"k=1

yi +

ckzk

(6)

yi +

t"k=1

m"j=1

nSj rk

j zk ≥ bi(S)
∀i ∈B ,S∈ Bi
yi ≥ 0, zk ≥ 0 ∀i ∈B , 1 ≤ k ≤ t

(6a)

(6b)

IV. A PRIMAL-DUAL COOPERATIVE APPROXIMATION

ALGORITHM

We ﬁrst design a polynomial-time approximation algorithm
for the social welfare maximization problem in IP (5), by
assuming that truthful bids are already known and targeting a
small approximation ratio in social welfare. Such a cooperative
approximation algorithm serves as an important building block
in the design of the randomized VM auction in Sec. V, which
further elicits truthful bids from strategic cloud users.
A. The Primal-Dual Approximation Algorithm

We design a greedy primal-dual algorithm for IP (5),
partially inspired by the primal-dual framework due to Briest et
1Constraint xi(S) ≤ 1,∀i ∈B ,S∈ Bi is redundant (implied by (5a) and
(5c’)) and removed from the LPR.

(3)

subject to:

al. [20] and the classic dual ﬁtting technique in approximation
algorithm design [21], as shown in Algorithm 1. Based on a
certain value per unit resource, the algorithm iteratively selects
the current best bid from the remaining users B who have
not received any VM bundle yet. This bid is appended to the
solution set, and its corresponding user is removed from B.
Meanwhile the algorithm updates the dual variables y and z,
along with the primal variable x, to reﬂect changes in set B.
The ﬁrst part of Algorithm 1 (line 2-6) initializes the primal
variable x as well as the dual variables y and z. Speciﬁcally,
it sets x to 0 (no VM is allocated at the beginning). Values
of y and z are initialized to 0 and 1/ck, respectively. While
other positive values are also possible, choosing 0 and 1/ck
simpliﬁes the algorithm analysis, as later discussed in the
algorithm analysis in the Appendix.

j=1 nSk rk

A while loop (line 9-19) iteratively reﬁnes the primal and
dual variables in x, y and z. It has two stopping conditions:
!t
k=1 ckzk ≥ t exp(Λ − 1) and B = ∅. The ﬁrst ensures the
feasibility of the generated primal solution x, as discussed
in the proof of Theorem 2. The second terminates the loop
and hence Algorithm 1 when every cloud user has received
a bundle of VMs. Since the size of the candidate set B
the while loop is
decrements by one in each iteration,
executed at most |B| times.
!t
k=1!m
j zk in line 13 can be viewed as the
weighted total resource requested by bid S, with zk acting
as a weight for the type k resource. Thus
j zk
can be interpreted as the value for a unit-weight resource. For
each cloud user i, the for loop in lines 10-12 searches for a
bid with the maximum bidding price, from all bids that user
i submits. Line 13 selects the best bid Sµ with the maximum
unit resource value from the pre-selection results in lines 10-
12 across all cloud users. Lines 14-15 update the primal and
dual variables and the set B. In particular, we update the
dual variable y using yµ = bµ(Sµ) so that !µ yµ = p in
all iterations. This helps ensure primal optimality when the
while loop terminates upon B = ∅. Lines 16-18 update the
dual variable z to reﬂect changes to the available resources.
B. Solution Feasibility and Approximation Ratio

!t
k=1!m

bi(S)
j=1 nSk rk

We ﬁrst show feasibility of solutions returned by Algorithm
i , zτ
k

1. At the end of the τ-th iteration of the while loop, let yτ
be the dual variables, and pτ be the primal objective.
Theorem 2. Algorithm 1 computes a feasible solution to IP
(5).

Proof: Values in x are initialized to 0 (line 4) and updated
to 1 only (line 14), so the solution is always binary valued.
Therefore, constraint (5c) will not be violated by Algorithm
1. Constraint (5a) will not be violated either because once
Algorithm 1 ﬁnds a VM bundle for cloud user i ∈B , no more
bundles are allocated to i in the future.
Let us examine the second constraint (5b). Suppose that
the solution is feasible so far. Let ˜S∈ B˜i be the ﬁrst set that
breaks the feasibility when added to the current solution, say,
in iteration τ. That is, ∃1 ≤ k ≤ t, such that

Algorithm 1 The Primal-Dual Approximation Algorithm
1: // Initialization
2: Λ= min 1≤k≤t ck/Rk;
3: p = 0; U = ∅;
4: ∀i,∀S : xi(S) = 0;
5: ∀i : yi = 0;
6: ∀k : zk = 1/ck;
7:
8: // Iterative update of primal and dual variables:
9: while %t

k=1 ckzk < t exp(Λ − 1) AND U( = B do
for all i ∈B \ U do
Si = arg maxS∈Bi{bi(S)};
end for
µ = arg maxi∈B\U#
bi(Si)
!t
k=1!m
j=1 nSi
xµ(Sµ) = 1; yµ = bµ(Sµ);
14:
p = p + bµ(Sµ); U = U∪{ µ};
15:
for all 1 ≤ k ≤ t do
16:
zk = zk · (t exp(Λ − 1))(!m
17:
end for
18:
19: end while

j zk$;

10:
11:
12:
13:

j=1 nSµ

j rk

j rk

j )/(ck−Rk);

"S!∈Γ
j + "S!∈Γ

˜Sj rk

m"j=1
m"j=1

n

m"j=1

nS!
j rk

j ≤ ck

nS!
j rk

j ≥ ck

nS!
j rk

j=1 nS!

j rk

nS!
j rk

j=1 n ˜Sj rk

j , we have

j /(ck − Rk) ≥ 1

and that leads to:
ckzτ−1

where Γ is the family of sets added to the solution before set
˜S. Since each single bid cannot exceed the capacity constraint,
i.e., ck > Rk ≥!m
m"j=1
j ≥ ck − Rk ⇒ "S!∈Γ
"S!∈Γ
k = (t exp(Λ−1))!S!∈Γ!m

m"j=1
j /(ck−Rk) ≥ t exp(Λ−1)
which satisﬁes the ﬁrst stopping condition in line 14. This
implies that iteration τ − 1 is the last iteration, and ˜S would
not be added to the solution at all.
Even if the primal solution is always feasible during the
execution, the dual is not necessarily so. The following lemma
shows that the dual variables can be made feasible through
scaling by a carefully chosen factor. Such posterior dual
scaling is known as dual ﬁtting in the primal-dual optimization
literature, and has proven effective in helping pursue good
approximation ratios in algorithm design [21].
Lemma 1.
is the (possibly infeasible)
dual solution at
then
(yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the dual
(6), where f (z,S) ! bi(S)/(!t
j zk),  !
j=1 nSj rk
maxS1,S2∈Bi,i∈B,k∈[1,t]!m
j=1 nS2
j .
j rk

Please refer to Appendix A for the proof of Lemma 1.
Employing the dual ﬁtting result in Lemma 1 and LP duality,
we next prove that Algorithm 1 guarantees an α-approximation

k=1!m
j /!m

(yτ−1, zτ−1)
the beginning of

the τ-th iteration,

j=1 nS1

j rk

If

of social welfare, where α = 1 +  Λ
Λ−1 (et1/(Λ−1) − 1). In
practice, the volume of a cloud provider’s resource pool is
substantially larger than a single user demand, i.e., Λ * 1.
The number of resource types t is a small constant (3 to
5). Consequently, we can conduct the following quantitative
estimation on the approximation ratio:

Λ
Λ − 1

(1 + 

α = lim
Λ→∞

(et1/(Λ−1) − 1)) = 1 + (e − 1)

lim
Λ→∞
If we further consider the case where each user only submits
one bid, then  = 1, and the approximation ratio α is close
to e ≈ 2.72, as illustrated in the 3D plot of the function α =
1 +  Λ

Λ−1 (et1/(Λ−1) − 1) in Fig. 1.

o

i
t

a
R
n
o

 

i
t

i

a
m
x
o
r
p
p
A

7

6

5

4

3

2
5

10

15

20

Λ

25

0

5

15

10

20

No. of resource types

Fig. 1. The approximation ratio α quickly decreases as Λ increases, and
closely approaches e ∼ 2.72 as long as the number of resource types t is not
too large and each user only submits one bid.
Theorem 3. Algorithm 1 computes an α-approximate solution
to IP (5) in polynomial-time, where α = 1+ Λ
Λ−1 (et1/(Λ−1)−1).

Please refer to Appendix B for the proof of Theorem 3.

V. A RANDOMZIED AUCTION MECHANISM

Capitalizing on Algorithm 1 for approximate social welfare
maximization under dynamic resource provisioning, we now
design a randomized combinatorial VM auction that achieves
the same social welfare approximation ratio α, while simulta-
neously ensuring truthful bidding from cloud users. Algorithm
2 outlines the key steps in the randomized auction mechanism.

Algorithm 2 A Randomized Combinatorial VM Auction
1: Simulating the fractional VCG auction.
2: — Compute the fractional VCG allocation x∗ and payment

ΠF , through solving the LPR of IP (5).

%l∈I

3: Decomposing fractional solution into integer solutions
4: — Decompose the scaled down fractional solution x∗/α to
a convex combination of integer solutions, i.e., x∗/α =
βlx(l), through solving a pair of primal-dual LPs in
(8) and (9) using the ellipsoid method, leveraging Algorithm
1 as a separation oracle.
5: Randomized VM allocation
6: — Select each x(l) randomly with probability βl.
7: Charging scaled fractional VCG prices
8: — for each winning cloud user i ∈B : charge a price Πi =

ΠF

i /α.

A. The Fractional VCG Auction

Theorem 1 reveals that solving IP (5) to optimal is NP-
hard, implying that applying the VCG auction for truthfulness
is computationally expensive. We ﬁrst resort to a fractional
version of the VCG auction for achieving both computational
efﬁciency (polynomial time complexity) and economic efﬁ-
ciency (social welfare maximization), by applying the VCG
mechanism to the LPR instead of IP (5).

The optimal solution x∗ to the LPR constitutes the VM
allocation solution in the fractional VCG auction. The frac-
tional VCG payment for user i equals i’s externality, or the
difference in social welfare with and without i’s bid [9], [11]:
(7)

ΠF

bi! (S)x∗i! (S)

i = Vi − "i!’=i,i!∈B "S∈Bi!

where Vi is the optimal DP F (B) to the LPR when cloud user
i bids zero.
The VM bundle allocation scheme in x∗ has fractional
instead of binary values and is hence not practically applicable.
This is to be resolved using the primal-dual decomposition
technique, in Sec. V-B.

B. Decomposing the Fractional Solution

We ﬁrst prepare for the decomposition by showing that
Algorithm 1 veriﬁes the integrality gap between IP (5) and
the LPR in the sense that the integrality gap is also bounded
by α. This is true because for any bidding proﬁle, Algorithm
1 computes an integer solution whose social welfare is at
least 1/α times the optimal solution to the LPR, due to
the following two facts: (i) the approximation ratio does not
depend on the bidding prices bi(S),∀i ∈B ,S∈ Bi; (ii) the
ratio is proven through using d/pω as an upper bound.
Integrality gap = LP R∗/DP (B)∗ ≤ d/pω = α

where DP (B)∗ is the value of the optimal solution to IP (5).
The inequality is due to LP R∗ ≤ d and pω ≤ DP (B)∗. Thus
d/pω also works as an upper bound of the integrality gap.
We next decompose x∗ into a convex combination of integer
solutions, using a LP duality based decomposition technique
for packing type of optimization problems due to Carr et al.
[14] and Lavi et al. [8]. Our goal is to ﬁnd βl and x(l) such

that x∗/α = !l∈I βlx(l), where Z(DP ) = {x(l)}l∈I is
the set of integer solutions to IP (5), I is the index set, and
βl ≥ 0,!l∈I βl = 1. Since the integrality gap is at most
α, there exists at least one integer solution, e.g., DP (B)∗,
dominating the scaled down fractional solution. Consequently,
scaling down the fractional solution x∗ by α can guarantee the
existence of such a decomposition.

The following primal and dual LPs are solved for decom-

posing x∗:

Primal:

minimize "l∈I

βl

(8)

subject to:

"l∈I

βlxi(S, l) = x∗i (S)/α ∀i ∈B ,S∈ Bi

"l∈I

βl ≥ 1
βl ≥ 0

∀l ∈I

(8a)

(8b)

(8c)

Dual:

subject to:

"i∈B,S∈Bi

maximize 1

α "i∈B,S∈Bi

x∗i (S)νi(S) + λ

(9)

xi(S, l)νi(S) + λ ≤ 1
λ ≥ 0

∀l ∈I

νi(S) unconstrained ∀i ∈B ,S∈ Bi

(9a)

(9b)
(9c)

The primal decomposition LP has an exponential number
of variables. We resort to the dual. Even though the dual
(9) has an exponential number of constraints, the ellipsoid
method [22] can be applied to solve it in polynomial-time,
with Algorithm 1 acting as a separation oracle for generating
separating hyperplanes for the dual. Once an optimal dual so-
lution is obtained, using a polynomial number of hyperplanes,
the primal (8) can be converted to an optimization problem
with a polynomial number of constraints corresponding to
these hyperplanes. As a result, the convex decomposition can
be solved within polynomial time. However νi(S) may be
negative, making Algorithm 1 work improperly. Instead of
using νi(S) directly, we set νi(S)+ = max(νi(S), 0) to
circumvent this issue. IP (5) satisﬁes the nice packing property,
i.e., if a ∈ Z(DP ), b ≤ a then b ∈ Z(DP ). Using the packing
property, the following lemma ensures that using νi(S)+ does
not violate the constraints in the dual (9).
Lemma 2. Given an integer solution x# ∈ Z(DP ), we can
obtain x(l) ∈ Z(DP ) so that !i∈B,S∈Bi
x#i(S, l)νi(S)+ =
!i∈B,S∈Bi

xi(S, l)νi(S).
xi(S, l) =! x(i(S, l)
is
Since νi(S)+ = max(νi(S), 0),
that
!i∈B,S∈Bi
x#i(S, l)νi(S)+ = !i∈B,S∈Bi
xi(S, l)νi(S). It
follows from x# ≥ 0 that x(l) is no larger than x#. Finally,
due to the packing property, x(l) ∈ Z(DP ).
Lemma 3. If β∗ is an optimal solution to the primal (8), then
!l∈I β∗l = 1.
Proof: Since ν∗ = 0,λ ∗ = 1 is feasible, the optimal solution
to the dual (9) is at least 1. Suppose ∃λ∗ ≥ 0, ν∗ such that

if νi(S) > 0
otherwise
it

Proof: Let

clear

(10)

0

1

α "i∈B,S∈Bi

x∗i (S)ν∗i (S) + λ∗ > 1

Since x∗i (S) is the optimal fractional solution to the LPR,
x∗i (S) ≥ 0. We then have 1
x∗i (S)ν∗i (S)+ ≥
α!i∈B,S∈Bi
x∗i (S)ν∗i (S) > 1 − λ∗. Since the integral-
1
ity gap is at most α, veriﬁed by Algorithm 1 when

α!i∈B,S∈Bi

the objective is ν∗+,

there must be l ∈I

to strong LP duality.
C. The Randomized Auction

satisfying
!i∈B,S∈Bi
x#i(S, l)ν∗i (S)+ > 1 − λ∗. By Lemma 2, we have
∃x ∈ Z(DP ), such that !i∈B,S∈Bi
xi(S, l)ν∗i (S)>1 − λ∗.
This implies that ν∗ and λ∗ violate constraint (9a). Therefore,
the optimal value for the dual (9) is 1, and!l∈I β∗l = 1 due
{βl}l∈I in the convex decomposition can be viewed
feasible integer solu-
as a probability distribution over
tions in Z(DP ). Given the convex decomposition x∗/α =
!l∈I βlx(l), as shown in Algorithm 2, we select each valid

integer solution x(l) randomly with probability βl, and set
the prices Πi =Π F
i /α. The following theorem establishes
expected truthfulness of the randomized auction.
Theorem 4. The randomized auction in Algorithm 2 is truth-
ful in expectation, and achieves an α-approximation to the
optimal social welfare of the cloud market.

Proof: The expected utility of a given bidder i is:

ui("l∈I

βlx(l)) − Πi = ui(x∗/α) − ΠF
= (ui(x∗) − ΠF

i )/α

i /α

The second equality is due to the linearity of ui(x). This
means the expected utility is scaled down by α from the utility
in the fractional VCG auction. Truthfulness of the randomized
auction thus follows from that of the fractional VCG auction.

VI. PERFORMANCE EVALUATION

We have implemented the randomized auction, including
Algorithm 1 and the ellipsoid algorithm as its modules, for
performance evaluation. The target cloud system includes a
medium-sized cloud provisioning six types of VMs, con-
structed from three types of resources (CPU, RAM, and
storage), following the conﬁgurations in Tab. I. Each cloud
user bids for four VM bundles, which are synthesized from
Google Cluster Data [10], while bidding prices are generated
uniformly at random.
A. Performance of the Approximation Algorithm

We ﬁrst study the performance of Algorithm 1 through
varying the number of cloud users from 100 to 900, as
illustrated in Fig. 2. Algorithm 1 achieves a close-to-optimal
performance, much better than the theoretical approximation
ratio proved in Theorem 3. We suspect that the analysis of
Algorithm 1 can be further improved, for a tighter bound on
the approximation ratio. Fig. 2 also shows that Algorithm 1
scales to a large number of bidding requests without sacriﬁcing
the social welfare approximation ratio.
B. Static Provisioning vs Dynamic Provisioning

We next compare static resource provisioning with dynamic
resource provisioning in terms of economic efﬁciency. Two
types of static provisioning are considered: Static Provisioning

o

i
t

a
R
n
o

 

i
t

i

a
m
x
o
r
p
p
A

4

3

2

1

0

 

100

Ratio calculated by Therorem 3
Real Ratio

 

300

500

700

Number of Bidders

900

Fig. 2. A comparison between theoretical ratios and real ratios.

I where all six types of VMs are provisioned with the
same number; Static Provisioning II where a large amount
of resources have been packed into the entry-level VM,
m1.medium, meanwhile only relatively small numbers of the
high-end VMs are provisioned.

We consider the following three performance metrics: (i)
social welfare, (ii) CPU utilization, the ratio of the number of
allocated CPUs to the total number of CPUs, and (iii) user
satisfaction, the ratio of the number of winning cloud users to
the total number of cloud users. We run VCG auction for all
three styles of provisioning. The results for the three metrics
are illustrated in Fig. 3(a), Fig. 3(b) and Fig. 3(c), respectively.
We observe that dynamic resource provisioning can achieve
higher social welfare over both static alternatives. The social
welfare increases as the number of cloud users increases.
Regarding CPU utilization, dynamic resource provisioning
enables almost full allocation of CPU resources, while static
resource provisioning under-utilizes CPU resources due to its
unresponsiveness to realtime user demands. With regard of
user satisfaction, the overall trend is that user satisfaction
decreases as the number of cloud users grows. For a given
number of cloud users, dynamic resource provisioning perfor-
mances better than the two static resource provisioning styles.
C. The Randomized Auction

We implemented the randomized auction that composes of
the ellipsoid method and the primal-dual approximation algo-
rithm. Given the randomized nature of the auction, we simulate
each auction scenario for 50 times and compute the average
social welfare. Fig. 4(a) compares the randomized auction
with the classic VCG auction in terms of economic efﬁciency
(social welfare). The black curve in Fig. 4(a) is the expected
social welfare calculated according to Theorem 4. The results
of the randomized auction ﬂuctuate around the curve, verifying
the correctness of the proposed randomized algorithm. Fig.
4(b) illustrates the total payment of the randomized auction,
which matches 1/α fraction of the VCG payment.
D. An Even Better Randomized Auction?

The bound α proven in Theorem 3 can be loose, as
suggested by simulation results
from Sec. VI-A. This
might make the randomized auction pessimistic, over-
scaling the
and compromising
revenue of the cloud provider. We are curious to know
whether
convex
In Fig. 4(a) and Fig. 4(b), α =
decomposition (8).

smaller α can still work with the

fractional VCG prices

3.179, 3.184, 3.219, 3.334, 3.333, 3.333, 3.330, 3.333, 3.333
for these 9 points respectively. We experiment with α = 2 in
the convex decomposition (8), and run the ellipsoid method
for the dual (9) again. After obtaining the results, we check
all candidate integer solutions with the constraints (5a) and
(5b), to ensure that all these solutions are feasible. The results
shown in Fig. 5(a) and Fig. 5(b), are rather surprising. α = 2
works well with the randomized auction, producing a much
better approximation ratio for our proposed auction. However
this is not always the case if we employ a smaller α such
as α = 1.5. The approximation ratio given by Theorem 3
guarantees the existence of such integer solution which is at
least 1/α times of the fractional solution in the worst case.

VII. CONCLUSION

Focusing on dynamic resource provisioning and heteroge-
neous types of VMs, we ﬁrst propose a cooperative primal
dual approximation algorithm with approximation ratio close
to 2.72. Employing the cooperative approximation algorithm
as a building block, we then design a novel randomized auction
using a pair of tailed primal and dual LPs to decompose
an optimal fractional solution into a summation of a series
of weighted valid integer solutions. The randomized auction
achieves the same approximation ratio in social welfare as the
cooperative algorithm does. Simulation studies verify the efﬁ-
cacy of the proposed auction and the effectiveness of dynamic
resource provisioning over static resource provisioning.

APPENDIX A

PROOF OF LEMMA 1

Proof: Since the set {Si}i∈B is selected by line 11, where
each Si belongs to the corresponding Bi, i.e., the correspond-
ing cloud user, we have ∀i ∈B ,S∈ Bi:
(11)
Because yµ is set to bµ(Sµ) where bµ(Sµ) ≥ bµ(S),∀µ ∈

bi(S) ≤ bi(Si)

U,S∈ Bµ. That is:

yµ ≥ bµ(S),∀µ ∈U ,S∈ Bµ

which implies that constraint (6a) is satisﬁed ∀µ ∈U ,S∈ Bµ.
Next we examine the users µ ∈B \ U . Note that Sτ is
decided by line 13, which is a maximization. Therefore,

bτ (Sτ )
j=1 nSτ
bi(Si)
j=1 nSi

≥

j rk

j zτ−1

k

f (zτ−1, Sτ ) =

%t
k=1%m
%t
k=1%m
m"j=1
t"k=1
Since !m
B, k ∈ [1, t], (12) further implies that ∀i ∈B \ U ,S∈ Bi,

k ≥ bi(Si),

∀i ∈B \ U⇔

f (zτ−1, Sτ )

∀i ∈B \ U

j=1 nS1

j rk

j=1 nS2

j rk

nSi
k rk

j zτ−1

j rk

j zτ−1

k

,

j ,∀S1,S2 ∈ Bi, i ∈

(12)

f (zτ−1, Sτ )

j zτ−1

k ≥ bi(Si) ≥ bi(S)

j ≥ !m
m"j=1
t"k=1

nSk rk

Thus (yτ−1,f (zτ−1,Sτ )zτ−1) is a feasible solution to the

dual (6).

2.5 x 105

e
r
a

f
l

e
W

 
l

i

a
c
o
S

2

1.5

1

0.5

0

 

10

 

Static Provisioning I
Static Provisioning II
Dynamic Provisioning

30

Number of Bidders

50

70

90

)

%

(
 

n
o

i
t

a
z

i
l
i
t

 

U
U
P
C

140
120
100
80
60
40
20
0

 

10

Static Provisioning I
Static Provisioning II
Dynamic Provisioning

30

50

70

Number of Bidders

90

 

100

)

%

(
 

n
o

i
t
c
a
f
s
i
t

a
S

 
r
e
s
U

80

60

40

20

0

 

10

 

Static Provisioning I
Static Provisioning II
Dynamic Provisioning

30

50

70

Number of Bidders

90

(a) Social Welfare

(b) CPU Utilization

(c) User Satisfaction

Fig. 3. Comparisons of social welfare, CPU utilization and user satisfaction among different provisioning styles.

3 x 105
2.5

2

1.5

1

0.5

 

VCG Auction
Expected Social Welfare
Algorithm 2

3 x 105
2.5

)
$
(
 
t

n
e
m
y
a
P

 
l

t

a
o
T

2

1.5

1

0.5

 

VCG Auction
Algorithm 2

e
r
a

f
l

e
W

 
l

i

 

a
c
o
S
e
g
a
r
e
v
A

0
 
20

30

40

50
70
Number of Bidders

60

80

90

100

0
 
20

30

40

50
70
Number of Bidders

60

80

90

100

(a) Social Welfare

(b) Total Payment

Fig. 4. Social welfare and total payments of the randomized auction, compared with the VCG auction.

3 x 105
2.5

2

1.5

1

0.5

e
r
a
f
l
e
W

i

 
l
a
c
o
S
 
e
g
a
r
e
v
A

 

VCG Auction
Expected Social Welfare
Algorithm 2

3 x 105
2.5

)
$
(
 
t
n
e
m
y
a
P

 
l
a
t
o
T

2

1.5

1

0.5

 

VCG Auction
Algorithm 2

0
 
20

30

40

50
70
Number of Bidders

60

80

90

100

0
 
20

30

40

50
70
Number of Bidders

60

80

90

100

(a) Social Welfare

(b) Total Payment

Fig. 5. Social welfare and total payments of the randomized auction when scaled down by α = 2, compared with the VCG auction.

APPENDIX B

PROOF OF THEOREM 3

Proof: We ﬁrst examine the complexity of Algorithm 1. Due
to the stopping conditions, the while loop will iterate at most
|B| times, linear to the input size. Within loop body, lines 10-
12 can be ﬁnished within O(mt|B| · |S|) even using a simple
brute-force search. Similarly, line 13 and lines 16-18 can also
be done in polynomial time. Therefore, Algorithm 1 runs in
polynomial time overall.

k=1 ckzτ

i , d2(τ ) =!t

Next we analyze the approximation ratio of Algorithm 1. Let
d1(τ ) =!i∈B yτ
k. Let d be the optimal
solution to the dual (6). Let Sτ denote the set selected in the
τ-th iteration. ω is denoted the last iteration of the loop.
Case 1: Algorithm 1 stops at ω-th iteration where U = B and
!t
k=1 ckzk < t exp(Λ − 1). We know that each cloud user
wins one bid. We here prove that the algorithm produces an
optimal solution to IP (5). Theorem 2 guarantees that pω is
the value of a feasible solution to IP (5). Meanwhile since

µ = maxS∈Bµ{bµ(S)}≥ bµ(S),∀µ ∈U ,S∈ Bµ, thus
yω
constraint (6a) is satisﬁed regardless of z,∀i ∈B ,S∈ Bi,
i.e., (yω, z = 0) is a feasible solution, whose value is exactly
pω as well, to the dual of the LPR. By weak duality for the
LP relaxation, any feasible solution to the dual (6) is an upper
bound of IP (5). Therefore pω is the optimal value to IP (5).
In this case, the approximation ratio is 1.

k=1 ckzω

ratio in following two sub-cases.

Case 2: Algorithm 1 stops at ω-th iteration where d2(ω) =
k ≥ t exp(Λ − 1). We analyze the approximation

!t
Sub Case 2.1: ∃ an iteration τ ≤ ω, such that α ≥

d1(τ−1).
That means we already found an α-approximate ratio, since (a)
d1(τ − 1) = pτ−1, which is the value of the primal solution;
(b) d1(τ ) is a non-decreasing function of τ because it becomes
larger when the iteration continues.

d

Sub Case 2.2: α<

any iteration τ ≥ 1, we have:

d

d1(τ−1), for all iterations τ ≤ ω. For

d2(τ ) =

ckzτ
k

=

=

≤

t"k=1
t"k=1
t"k=1
t"k=1
t"k=1

(ckzτ−1

k

(t exp(Λ − 1))(!m

j=1 nSτ

j rk

j )/(ck−Rk))

(ckzτ−1

k

(1 +

(ckzτ−1

k

(1 +

j=1 nSτ

j rk

j )/Rk )

nSτ
j rk

j )/Rk))

δ

ck

Rk − 1

δ

ck

Rk − 1
δck

(

)(!m
m"j=1
m"j=1

(

t"k=1
t"k=1

ck − Rk
(nSτ

m"j=1

=

ckzτ−1

k +

nSτ
j rk

j )zτ−1

k

)

k

)

≤ d2(τ − 1) + ∆

j rk

j zτ−1
Rk − 1)((t exp(Λ − 1))1/( ck

where δ = ( ck
δck
max1≤k≤t
ck−Rk
1 + ax,∀x ∈ [0, 1].
Note that
δck
ck−Rk
and Λ= min 1≤k≤t ck/Rk, then
=Λ , i.e.,
when ck
Rk

Rk −1) − 1), ∆=
. The ﬁrst inequality is due to (1 + a)x ≤
> 1,
reaches the maximum

is a non-increasing function of ck
Rk

ck−Rk

δck

∆=

Λ
Λ − 1

(Λ − 1)((t exp(Λ − 1))1/(Λ−1) − 1)

Recall the deﬁnition of f (zτ−1,Sτ ). We have:
) = bτ (Sτ )/f (zτ−1,Sτ )

j rk

=Λ( et1/(Λ−1) − 1)
m"j=1
t"k=1
j zτ−1

(nSτ

k

Since pτ is the value of the primal solution at the end of

τ-th iteration, then pτ − pτ−1 = bτ (Sτ ), this leads to:

d2(τ ) ≤ d2(τ − 1) + ∆
we
the

1,
at

pτ − pτ−1
f (zτ−1,Sτ )
covert
τ-th

Following

Lemma
(yτ−1, zτ−1)

dual
variables
to
(yτ−1,f (zτ−1,Sτ )zτ−1), which is a feasible solution
to the dual (6). Therefore we have the following inequality to
associate d with d1 and d2:

iteration

the

(13)

d ≤ d1(τ − 1) + f (zτ−1,Sτ )d2(τ − 1)



⇒

f (zτ−1,Sτ ) ≥ 1

d−d1(τ−1)
d2(τ−1)
Recall that for all iterations τ ≤ ω, α<
d2(τ − 1)
d − d1(τ − 1) ≤ 

d2(τ − 1)
Substitute this bound on 1/f (zτ−1,Sτ ) in Eqn. (13):
(pω − pω−1)d2(ω − 1)

d2(ω) ≤ d2(ω − 1) + 

f (zτ−1,Sτ ) ≤ 

α
α − 1

α∆

d

1

d

d1(τ−1), implying:

(α − 1)d
α∆

= d2(ω − 1)(1 + 
(α − 1)d
≤ d2(ω − 1) exp(
(α − 1)d
α∆
≤ d2(0) exp(
pω)

α∆

(α − 1)d

(pω − pω−1))
(pω − pω−1))

the second inequality is due to 1 + x ≤ ex,∀x ≥ 0.

α∆

pω)

Note that the stopping condition in this sub case is d2(ω) ≥

t exp(Λ − 1) and d2(0) = t, as a result, we have that:

t exp(Λ − 1) ≤t exp(

(α − 1)d
pω
d ⇔ d/pω ≤ 

α∆

α∆
(α − 1)

⇔ Λ − 1 ≤ 
Due to the weak duality theorem in linear programming and

(α − 1)(Λ − 1)
the relaxation of IP (5), the following inequality holds:

DP (B)∗/pω ≤ d/pω

where DP (B)∗ is the value of the optimal solution to IP (5).
This means d/pω plays as an upper bound of the approxima-
tion ratio.

Finally we obtain the approximation ratio:



α∆

(α − 1)(Λ − 1)

Λ
Λ − 1

= 1 + 
REFERENCES

(et1/(Λ−1) − 1) = α.

[1] Amazon Elastic Compute Cloud, http://aws.amazon.com/ec2/.
[2] Linode, https://www.linode.com/speedtest/.
[3] RightScale, “Social Gaming in the Cloud: A Technical White Paper,”

White Paper, 2010.

[4] M. Hajjat, X. Sun, Y.-W. E. Sung, D. A. Maltz, S. Rao, K. Sri-
panidkulchai, and M. Tawarmalani, “Cloudward Bound: Planning for
Beneﬁcial Migration of Enterprise Applications to the Cloud,” in Proc. of
ACM SIGCOMM, 2010.

[5] S. Zaman and D. Grosu, “Combinatorial Auction-Based Dynamic VM
Provisioning and Allocation in Clouds,” in Proc. of IEEE CloudCom,
2011.

[6] ——, “Combinatorial Auction-based Allocation of Virtual Machine
Instances in Clouds,” Journal of Parallel and Distributed Computing,
vol. 73, no. 4, pp. 495 – 508, 2013.

[7] A. Gopinathan, Z. Li, and C. Wu, “ Strategyproof Auctions for Balanc-
ing Social Welfare and Fairness in Secondary Spectrum Markets,” in
Proc. IEEE INFOCOM, 2011.

[8] R. Lavi and C. Swamy, “Truthful and Near-Optimal Mechanism Design

via Linear Programming,” in Proc. of IEEE FOCS, 2005.

[9] Y. Zhu, B. Li, and Z. Li, “Truthful Spectrum Auction Design for

Secondary Networks,” in Proc. of IEEE INFOCOM, 2012.

[10] Google Cluster Data, http://googleresearch.blogspot.ca/2011/11/more-

google-cluster-data.html.

[11] W. Vickrey, “Counterspeculation, Auctions, and Competitive Sealed

Tenders,” The Journal of ﬁnance, vol. 16, no. 1, pp. 8–37, 1961.

[12] E. Clarke, “Multipart Pricing of Public Goods,” Public Choice, vol. 11,

no. 1, pp. 17–33, 1971.

[13] T. Groves, “Incentives in Teams,” Econometrica: Journal of the Econo-

metric Society, pp. 617–631, 1973.

[14] R. Carr and S. Vempala, “Randomized Metarounding,” Random Struct.

Algorithms, vol. 20, no. 3, pp. 343–352, May 2002.

[15] Z. Li, B. Li, and Y. Zhu, “Designing Truthful Spectrum Auctions
for Multi-hop Secondary Networks,” IEEE Transactions on Mobile
Computing, vol. 12, 2013.

[16] H. Zhang, B. Li, H. Jiang, F. Liu, A. Vasilakos, and J. Liu, “A
Framework for Truthful Online Auctions in Cloud Computing with
Heterogeneous User Demands,” in Proc. of IEEE INFOCOM, 2013.

[17] R. Buyya, R. Ranjan, and R. N. Calheiros, “InterCloud: Utility-oriented
Federation of Cloud Computing Environments for Scaling of Application
Services,” in Proc. of ICA3PP, 2010.

[18] H. Li, C. Wu, Z. Li, and F. C. Lau, “Proﬁt-Maximizing Virtual Machine
Trading in a Federation of Selﬁsh Clouds,” in Proc. of IEEE INFOCOM
mini conference, 2013.

[19] H. Kellerer, U. Pferschy, and D. Pisinger, Knapsack Problems. Springer,

[20] P. Briest, P. Krysta, and B. V¨ocking, “Approximation Techniques for

Utilitarian Mechanism Design,” in Proc. of ACM STOC, 2005.

[21] V. Vazirani, Approximation Algorithms. Springer, 2001.
[22] M. Gr¨otschel, L. Lov´asz, and A. Schrijver, Geometric Algorithms and

Combinatorial Optimization. Springer-Verlag, 1988.

2004.

