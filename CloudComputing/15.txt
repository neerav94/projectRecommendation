An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

adjustment of the dual variable xn towards an optimal so-
lution to the oﬄine dual problem (2).
Algorithm 1 The Online Algorithm Framework Aonline
1: x(0)
2: // Loop for each time slot
3: for all 1 ≤ t ≤ T do
4:

n ← 0,∀n ∈ [N ]

(cid:40)

≥ 1

if x(t−1)
) otherwise

n

w(t)

0
n,k(1 − x(t−1)
b(t)

n,k =
Run Around. Let N be the set of winning users, and
kn be the index of their corresponding winning bundle,
for each winning user n ∈ N .

,∀n ∈ [N ], k ∈ [K].

n

for all n ∈ N do

5:

6:
7:

(cid:32)

(cid:33)

1 +

b(t)
n,kn
Bn

+

b(t)
n,kn

Bn(γ − 1)

n ← x(t−1)
x(t)

n

8:
end for
for all n /∈ N do
9:
n ← x(t−1)
x(t)
10:
11:
end for
12: end for
13: xn ← x(T )

n ,∀n ∈ [N ]

n

The performance of our online algorithm in Alg. 1 is stated

in Thm. 1, with a detailed proof in Appendix A.

Theorem 1. If we can ﬁnd an auction mechanism in
Around that carries out resource allocation in each round
to produce feasible solutions for (3) and (4), and guarantees
νp ≥ d (hence the competitive ratio of the auction algorithm
is also ν), Aonline is (1 + Bmax)(ν + 1
γ−1 )-competitive for
k∈[K] w(t)
n,k is the
objective value of the one-round resource allocation problem
q,r is the

optimization (1). Here p = (cid:80)
n +(cid:80)
in (3), and d =(cid:80)

(cid:80)
(cid:80)

n,ky(t)

q,rz(t)

n∈[N ]

r∈[R] A(t)

n∈[N ] s(t)
dual objective value in (4).

q∈[Q]

We note that when Bmax → 0, the competitive ratio ap-
e−1 , i.e., the long-term online optimization
1
e−1 in competitive

proaches ν + 1
framework incurs only an additive loss of
ratio, as compared to the one-round allocation algorithm.

5. A RANDOMIZED AUCTION MECHANISM

We now present a randomized auction mechanism Around
which eﬃciently allocates resources according to users’ bids
in each time slot, and guarantees individual rationality and
truthfulness. The auction mechanism in each round allo-
cates resources according to the one-round resource allo-
cation problem in (3) and decides the payments from the
winning bidders. The classic VCG (Vickrey-Clarke-Groves)
mechanism [23] is a potential candidate for our auction de-
sign, which assigns items (VM bundles in our case) to bid-
ders in a socially optimal manner by solving a correspond-
ing resource allocation problem, charges each winner the
externality it exerts on other bidders, and ensures that the
optimal strategy for a bidder is to bid its true valuations.
However, our allocation problem in (3) is NP-hard, and
hence a VCG mechanism becomes computationally infea-
sible. We therefore resort to a fractional version of the VCG

auction for achieving both computational eﬃciency (polyno-
mial time complexity) and economic eﬃciency (social wel-
fare maximization in (3)), by applying the VCG mechanism
to the LP relaxation of the integer program (3). The frac-
tional VCG mechanism produces fractional bundle alloca-
tion results, which are not practically applicable. We fur-
ther employ a primal-dual optimization based decomposi-
tion technique that decomposes such an optimal fractional
solution into a convex combination of integral solutions, and
then design a randomized auction which randomly picks one
from the integral solutions as the bundle allocation result in
each round and retains the nice properties of a fractional
VCG auction. We detail the fractional VCG auction, the
decomposition technique, and the randomized auction de-
sign in the following three subsections.
5.1 The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the
LP relaxation of (3) by relaxing constraint (3c) to 0 ≤
n,k ≤ 1,∀n, k, to decide the bundle allocation in t. Let
y(t)
y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction
n,k ∈ [0, 1]. To compute the VCG pay-
allocation, where y(t)F
(cid:101)V (t)−n denote the social welfare achieved when winner n is
ment from a winner, the auctioneer solves the LP relaxation
again with the winner excluded from the allocation. Let
(cid:101)V (t)−n −(cid:80)

n(cid:48),k w(t)
n of bidder n in a VCG auction is
typically deﬁned as the diﬀerence between its valuation and
its payment. In our online auction framework, a user’s util-
ity in each round should be related not only to its valuation
and payment, but also to its remaining budget: intuitively,
smaller utility gain is appreciated if a user won a bundle
when its remaining budget is small, and larger otherwise.
We characterize this property using a utility function:

k∈[K] y(t)F
The utility function u(t)

excluded. The payment of winner n, Π(t)F

, is: Π(t)F

(cid:80)

n(cid:48),k.

n(cid:48)(cid:54)=n

=

n

n

u(t)
n =

y(t)F
n,k w(t)

n,k − Π(t)F

n

.

(5)

(cid:88)

k∈[K]

Such a utility function is consistent with the social welfare
calculation in the one-round allocation problem (3). In this
way, a user’s budget can potentially last longer, enabling
its acquirement of a better bundle with the same consump-
tion of budget at a later time, contributing to social welfare
eﬃciency over all T rounds of auctions.

We show in Thm. 2 that under this utility function, bid-
ding true valuations is the best strategy for each user in
the fractional VCG auction. A non-negative utility is guar-
anteed for each bidder, based on VCG auction theory [23].
Due to space limit, most proofs in this section are omitted
in this paper and we refer the interested readers to [22] for
the details.

Theorem 2. The fractional VCG auction which produces
n,k ,∀n ∈ [N ], k ∈ [K], and payments

,∀n ∈ [N ], is truthful and individual rational.

fractional allocation y(t)F
Π(t)F
5.2 Decomposing the Fractional Solution

n

Since fractional VM bundles are impractical in real-world
cloud systems, we next decompose the fractional alloca-
tion solution into a convex combination of integer solutions,
which will be used by our randomized auction mechanism.

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

adjustment of the dual variable xn towards an optimal so-
lution to the oﬄine dual problem (2).
Algorithm 1 The Online Algorithm Framework Aonline
1: x(0)
2: // Loop for each time slot
3: for all 1 ≤ t ≤ T do
4:

n ← 0,∀n ∈ [N ]

(cid:40)

≥ 1

if x(t−1)
) otherwise

n

w(t)

0
n,k(1 − x(t−1)
b(t)

n,k =
Run Around. Let N be the set of winning users, and
kn be the index of their corresponding winning bundle,
for each winning user n ∈ N .

,∀n ∈ [N ], k ∈ [K].

n

for all n ∈ N do

5:

6:
7:

(cid:32)

(cid:33)

1 +

b(t)
n,kn
Bn

+

b(t)
n,kn

Bn(γ − 1)

n ← x(t−1)
x(t)

n

8:
end for
for all n /∈ N do
9:
n ← x(t−1)
x(t)
10:
11:
end for
12: end for
13: xn ← x(T )

n ,∀n ∈ [N ]

n

The performance of our online algorithm in Alg. 1 is stated

in Thm. 1, with a detailed proof in Appendix A.

Theorem 1. If we can ﬁnd an auction mechanism in
Around that carries out resource allocation in each round
to produce feasible solutions for (3) and (4), and guarantees
νp ≥ d (hence the competitive ratio of the auction algorithm
is also ν), Aonline is (1 + Bmax)(ν + 1
γ−1 )-competitive for
k∈[K] w(t)
n,k is the
objective value of the one-round resource allocation problem
q,r is the

optimization (1). Here p = (cid:80)
n +(cid:80)
in (3), and d =(cid:80)

(cid:80)
(cid:80)

n,ky(t)

q,rz(t)

n∈[N ]

r∈[R] A(t)

n∈[N ] s(t)
dual objective value in (4).

q∈[Q]

We note that when Bmax → 0, the competitive ratio ap-
e−1 , i.e., the long-term online optimization
1
e−1 in competitive

proaches ν + 1
framework incurs only an additive loss of
ratio, as compared to the one-round allocation algorithm.

5. A RANDOMIZED AUCTION MECHANISM

We now present a randomized auction mechanism Around
which eﬃciently allocates resources according to users’ bids
in each time slot, and guarantees individual rationality and
truthfulness. The auction mechanism in each round allo-
cates resources according to the one-round resource allo-
cation problem in (3) and decides the payments from the
winning bidders. The classic VCG (Vickrey-Clarke-Groves)
mechanism [23] is a potential candidate for our auction de-
sign, which assigns items (VM bundles in our case) to bid-
ders in a socially optimal manner by solving a correspond-
ing resource allocation problem, charges each winner the
externality it exerts on other bidders, and ensures that the
optimal strategy for a bidder is to bid its true valuations.
However, our allocation problem in (3) is NP-hard, and
hence a VCG mechanism becomes computationally infea-
sible. We therefore resort to a fractional version of the VCG

auction for achieving both computational eﬃciency (polyno-
mial time complexity) and economic eﬃciency (social wel-
fare maximization in (3)), by applying the VCG mechanism
to the LP relaxation of the integer program (3). The frac-
tional VCG mechanism produces fractional bundle alloca-
tion results, which are not practically applicable. We fur-
ther employ a primal-dual optimization based decomposi-
tion technique that decomposes such an optimal fractional
solution into a convex combination of integral solutions, and
then design a randomized auction which randomly picks one
from the integral solutions as the bundle allocation result in
each round and retains the nice properties of a fractional
VCG auction. We detail the fractional VCG auction, the
decomposition technique, and the randomized auction de-
sign in the following three subsections.
5.1 The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the
LP relaxation of (3) by relaxing constraint (3c) to 0 ≤
n,k ≤ 1,∀n, k, to decide the bundle allocation in t. Let
y(t)
y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction
n,k ∈ [0, 1]. To compute the VCG pay-
allocation, where y(t)F
(cid:101)V (t)−n denote the social welfare achieved when winner n is
ment from a winner, the auctioneer solves the LP relaxation
again with the winner excluded from the allocation. Let
(cid:101)V (t)−n −(cid:80)

n(cid:48),k w(t)
n of bidder n in a VCG auction is
typically deﬁned as the diﬀerence between its valuation and
its payment. In our online auction framework, a user’s util-
ity in each round should be related not only to its valuation
and payment, but also to its remaining budget: intuitively,
smaller utility gain is appreciated if a user won a bundle
when its remaining budget is small, and larger otherwise.
We characterize this property using a utility function:

k∈[K] y(t)F
The utility function u(t)

excluded. The payment of winner n, Π(t)F

, is: Π(t)F

(cid:80)

n(cid:48),k.

n(cid:48)(cid:54)=n

=

n

n

u(t)
n =

y(t)F
n,k w(t)

n,k − Π(t)F

n

.

(5)

(cid:88)

k∈[K]

Such a utility function is consistent with the social welfare
calculation in the one-round allocation problem (3). In this
way, a user’s budget can potentially last longer, enabling
its acquirement of a better bundle with the same consump-
tion of budget at a later time, contributing to social welfare
eﬃciency over all T rounds of auctions.

We show in Thm. 2 that under this utility function, bid-
ding true valuations is the best strategy for each user in
the fractional VCG auction. A non-negative utility is guar-
anteed for each bidder, based on VCG auction theory [23].
Due to space limit, most proofs in this section are omitted
in this paper and we refer the interested readers to [22] for
the details.

Theorem 2. The fractional VCG auction which produces
n,k ,∀n ∈ [N ], k ∈ [K], and payments

,∀n ∈ [N ], is truthful and individual rational.

fractional allocation y(t)F
Π(t)F
5.2 Decomposing the Fractional Solution

n

Since fractional VM bundles are impractical in real-world
cloud systems, we next decompose the fractional alloca-
tion solution into a convex combination of integer solutions,
which will be used by our randomized auction mechanism.

(cid:80)

l∈L βly(t)l

l∈L βly(t)l

n,k = y(t)F

of integer solutions, (cid:80)

n,k , ∀n ∈ [N ], k ∈ [K], and (cid:80)

We apply a LP duality based decomposition technique [13].
The goal of the decomposition is to ﬁnd βl ∈ [0, 1] and a
set of integer solutions y(t)l,∀l ∈ L (L is an index set),
to the one-round resource allocation problem (3), such that
l∈L βl = 1.
The randomized auction in each round can choose the lth
integer solution y(t)l with probability βl, achieving a good
competitive ratio in social welfare in expectation, as com-
pared to that achieved by the optimal integer solution to (3).
However, there in fact does not exist a convex combination
n,k , that equals the fraction
solution y(t)F
n,k , because otherwise, the expected social wel-
fare achieved by these integer solutions equals that achieved
by the fractional solution, which is apparently a contradic-
tion to the fact that the fractional solution achieves a higher
social welfare than any possible integer solution. Therefore,
to achieve a feasible decomposition, we need to scale down
the optimal fractional solution by a certain factor. Accord-
ing to [13], if there exists an approximation algorithm that
solves the one-round allocation problem (3) with an approx-
imation ratio of λ and guarantees λp ≥ d (where p and d
are the objective function values of the primal problem (3)
and dual (4) respectively) , then we can use λ as the scal-
ing factor, and rest assured that a feasible solution to the
following decomposition problem exists:

minimize

βl

(6)

(cid:88)

l∈L

n,k /λ,

βly(t)l

(cid:88)

l∈L

n,k = y(t)F
βl ≥ 1,
βl ≥ 0,

∀n ∈ [N ], k ∈ [K],

∀l ∈ L.

(6a)

(6b)

(6c)

s.t. (cid:88)

l∈L

We next ﬁrst present a primal-dual algorithm that solves
(3) with a good approximation ratio λ, and then discuss
how to solve the decomposition problem (6) to obtain βl
and y(t)l, ∀l ∈ L.

5.2.1 A primal-dual algorithm for one-round resource

allocation

q,r = maxn,k{c(t)
min = minr∈[R],q∈[Q]{A(t)

Alg. 2 is our primal-dual approximation algorithm to the
n,k,r,q} is
NP-hard allocation problem (3). C (t)
the maximum amount of type-r resource at datacenter q re-
q,r}
quired by any bundle in t. C (t)
q,r/C (t)
is the minimum ratio between the total amount of available
resource of a type in datacenter and the amount of the re-
source in the datacenter required by one bundle. In practice,
the resource pool is substantially larger than a single user’s
min (cid:29) 1. The main idea of the algo-
demand, and hence C (t)
rithm is to introduce an auxiliary variable z(t)
q,r for each type
of resources (which is the dual variable associated with con-
straint (3(b)), acting as the unit price in allocation decision.
The unit price z(t)
q,r is updated according to the remaining
amount of this type of resource. The algorithm evaluates
each bundle according to the unit prices and the amount
of required resources, and always chooses the users with a
higher bid on a lower valued bundle as the winner.

Theorem 3. Alg. 2 computes feasible primal and dual so-
lutions for (3) and (4), and guarantees λp ≥ d (p and d de-
ﬁned in Thm. 1), λ = 1 + (t)(e(QR)1/(C
with (t) = maxk1,k2∈[K],r∈[R]{c(t)
proximation ratio of Alg. 2 is also λ.

min−1) − 1) C
min−1
n,k2,r,q}. The ap-

n,k1,r,q/c(t)

(t)
min

(t)

(t)

C

Here (t) is the maximum ratio between the overall de-
mands for any type of resource in any two bundles in a user’s
bid in t. When Q, R are small constants and the provider’s
resource pool is relatively large compared with users’ re-
source demands in the bundles, λ tends to 1 + (t)(e − 1). If
further (t) → 1, or each user bids a single bundle, λ tends
to e.

Algorithm 2 A Primal-Dual Algorithm to Solve One-round
Allocation Problem (3)
1: N ← ∅, zbase ← QR · exp((C (t)
q,r ← 1/A(t)
2: y(t)

n ← 0, z(t)

min − 1))
q,r,∀n ∈ [N ], k ∈ [K], r ∈
q,r < zbase AND |N| (cid:54)= N do

n,k ← 0, s(t)
[R], q ∈ [Q]

3: while(cid:80)

(cid:80)

q,rz(t)

q∈[Q] A(t)

r∈[R]

4:
5:
6:

7:

8:
9:

for all n /∈ N do

k(n) = arg maxk∈[K]{w(t)
n,k}
(cid:80)

end for
n∗ = arg maxn∈[N ]{
n∗ ← w(t)
n∗,k(n∗) ← 1, s(t)
y(t)
for all r ∈ [R], q ∈ [Q] do

(cid:80)

r∈[R]

w

(t)
n,k(n)
(t)
n,k(n),r,q

}
n∗,k(n∗),N ← N ∪ {n∗}

q∈[Q] c

(t)
q,r

z

q,r ← z(t)
z(t)

q,r · zbase

(t)

n∗ ,k(n∗ ),q,r
c

/(A

10:
end for
11: end while

(t)

q,r−C

(t)
q,r )

5.2.2 Decomposition with LP duality-based technique
To solve the decomposition problem (6), we can ﬁrst ﬁnd
all the possible integer solutions y(t)l to (3) using some ex-
haustive search method, and then directly solve (6) to derive
the decomposition coeﬃcients βl’s. But this method has an
exponential-time complexity, since there are an exponential
number of possible integer solutions y(t)l, and hence an ex-
ponential number of variables in LP (6). We therefore resort
to its dual, formulated in (7), where dual variables v(t)
n,k and
τ associate with primal constraints (6a) and (6b), respec-
tively:

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

maximize

1
λ

y(t)F
n,k v(t)

n,k + τ

(7)

s.t. (cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k + τ ≤ 1,
τ ≥ 0.

∀l ∈ L,

(7a)

(7b)

Even though the dual (7) has an exponential number of con-
straints, the ellipsoid method can be applied to solve it in
polynomial-time. The ellipsoid method obtains an optimal
dual solution using a polynomial number of separating hy-
perplanes. Alg. 2 acts as a key component of a separation
oracle for generating these separating hyperplanes, and a

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

adjustment of the dual variable xn towards an optimal so-
lution to the oﬄine dual problem (2).
Algorithm 1 The Online Algorithm Framework Aonline
1: x(0)
2: // Loop for each time slot
3: for all 1 ≤ t ≤ T do
4:

n ← 0,∀n ∈ [N ]

(cid:40)

≥ 1

if x(t−1)
) otherwise

n

w(t)

0
n,k(1 − x(t−1)
b(t)

n,k =
Run Around. Let N be the set of winning users, and
kn be the index of their corresponding winning bundle,
for each winning user n ∈ N .

,∀n ∈ [N ], k ∈ [K].

n

for all n ∈ N do

5:

6:
7:

(cid:32)

(cid:33)

1 +

b(t)
n,kn
Bn

+

b(t)
n,kn

Bn(γ − 1)

n ← x(t−1)
x(t)

n

8:
end for
for all n /∈ N do
9:
n ← x(t−1)
x(t)
10:
11:
end for
12: end for
13: xn ← x(T )

n ,∀n ∈ [N ]

n

The performance of our online algorithm in Alg. 1 is stated

in Thm. 1, with a detailed proof in Appendix A.

Theorem 1. If we can ﬁnd an auction mechanism in
Around that carries out resource allocation in each round
to produce feasible solutions for (3) and (4), and guarantees
νp ≥ d (hence the competitive ratio of the auction algorithm
is also ν), Aonline is (1 + Bmax)(ν + 1
γ−1 )-competitive for
k∈[K] w(t)
n,k is the
objective value of the one-round resource allocation problem
q,r is the

optimization (1). Here p = (cid:80)
n +(cid:80)
in (3), and d =(cid:80)

(cid:80)
(cid:80)

n,ky(t)

q,rz(t)

n∈[N ]

r∈[R] A(t)

n∈[N ] s(t)
dual objective value in (4).

q∈[Q]

We note that when Bmax → 0, the competitive ratio ap-
e−1 , i.e., the long-term online optimization
1
e−1 in competitive

proaches ν + 1
framework incurs only an additive loss of
ratio, as compared to the one-round allocation algorithm.

5. A RANDOMIZED AUCTION MECHANISM

We now present a randomized auction mechanism Around
which eﬃciently allocates resources according to users’ bids
in each time slot, and guarantees individual rationality and
truthfulness. The auction mechanism in each round allo-
cates resources according to the one-round resource allo-
cation problem in (3) and decides the payments from the
winning bidders. The classic VCG (Vickrey-Clarke-Groves)
mechanism [23] is a potential candidate for our auction de-
sign, which assigns items (VM bundles in our case) to bid-
ders in a socially optimal manner by solving a correspond-
ing resource allocation problem, charges each winner the
externality it exerts on other bidders, and ensures that the
optimal strategy for a bidder is to bid its true valuations.
However, our allocation problem in (3) is NP-hard, and
hence a VCG mechanism becomes computationally infea-
sible. We therefore resort to a fractional version of the VCG

auction for achieving both computational eﬃciency (polyno-
mial time complexity) and economic eﬃciency (social wel-
fare maximization in (3)), by applying the VCG mechanism
to the LP relaxation of the integer program (3). The frac-
tional VCG mechanism produces fractional bundle alloca-
tion results, which are not practically applicable. We fur-
ther employ a primal-dual optimization based decomposi-
tion technique that decomposes such an optimal fractional
solution into a convex combination of integral solutions, and
then design a randomized auction which randomly picks one
from the integral solutions as the bundle allocation result in
each round and retains the nice properties of a fractional
VCG auction. We detail the fractional VCG auction, the
decomposition technique, and the randomized auction de-
sign in the following three subsections.
5.1 The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the
LP relaxation of (3) by relaxing constraint (3c) to 0 ≤
n,k ≤ 1,∀n, k, to decide the bundle allocation in t. Let
y(t)
y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction
n,k ∈ [0, 1]. To compute the VCG pay-
allocation, where y(t)F
(cid:101)V (t)−n denote the social welfare achieved when winner n is
ment from a winner, the auctioneer solves the LP relaxation
again with the winner excluded from the allocation. Let
(cid:101)V (t)−n −(cid:80)

n(cid:48),k w(t)
n of bidder n in a VCG auction is
typically deﬁned as the diﬀerence between its valuation and
its payment. In our online auction framework, a user’s util-
ity in each round should be related not only to its valuation
and payment, but also to its remaining budget: intuitively,
smaller utility gain is appreciated if a user won a bundle
when its remaining budget is small, and larger otherwise.
We characterize this property using a utility function:

k∈[K] y(t)F
The utility function u(t)

excluded. The payment of winner n, Π(t)F

, is: Π(t)F

(cid:80)

n(cid:48),k.

n(cid:48)(cid:54)=n

=

n

n

u(t)
n =

y(t)F
n,k w(t)

n,k − Π(t)F

n

.

(5)

(cid:88)

k∈[K]

Such a utility function is consistent with the social welfare
calculation in the one-round allocation problem (3). In this
way, a user’s budget can potentially last longer, enabling
its acquirement of a better bundle with the same consump-
tion of budget at a later time, contributing to social welfare
eﬃciency over all T rounds of auctions.

We show in Thm. 2 that under this utility function, bid-
ding true valuations is the best strategy for each user in
the fractional VCG auction. A non-negative utility is guar-
anteed for each bidder, based on VCG auction theory [23].
Due to space limit, most proofs in this section are omitted
in this paper and we refer the interested readers to [22] for
the details.

Theorem 2. The fractional VCG auction which produces
n,k ,∀n ∈ [N ], k ∈ [K], and payments

,∀n ∈ [N ], is truthful and individual rational.

fractional allocation y(t)F
Π(t)F
5.2 Decomposing the Fractional Solution

n

Since fractional VM bundles are impractical in real-world
cloud systems, we next decompose the fractional alloca-
tion solution into a convex combination of integer solutions,
which will be used by our randomized auction mechanism.

(cid:80)

l∈L βly(t)l

l∈L βly(t)l

n,k = y(t)F

of integer solutions, (cid:80)

n,k , ∀n ∈ [N ], k ∈ [K], and (cid:80)

We apply a LP duality based decomposition technique [13].
The goal of the decomposition is to ﬁnd βl ∈ [0, 1] and a
set of integer solutions y(t)l,∀l ∈ L (L is an index set),
to the one-round resource allocation problem (3), such that
l∈L βl = 1.
The randomized auction in each round can choose the lth
integer solution y(t)l with probability βl, achieving a good
competitive ratio in social welfare in expectation, as com-
pared to that achieved by the optimal integer solution to (3).
However, there in fact does not exist a convex combination
n,k , that equals the fraction
solution y(t)F
n,k , because otherwise, the expected social wel-
fare achieved by these integer solutions equals that achieved
by the fractional solution, which is apparently a contradic-
tion to the fact that the fractional solution achieves a higher
social welfare than any possible integer solution. Therefore,
to achieve a feasible decomposition, we need to scale down
the optimal fractional solution by a certain factor. Accord-
ing to [13], if there exists an approximation algorithm that
solves the one-round allocation problem (3) with an approx-
imation ratio of λ and guarantees λp ≥ d (where p and d
are the objective function values of the primal problem (3)
and dual (4) respectively) , then we can use λ as the scal-
ing factor, and rest assured that a feasible solution to the
following decomposition problem exists:

minimize

βl

(6)

(cid:88)

l∈L

n,k /λ,

βly(t)l

(cid:88)

l∈L

n,k = y(t)F
βl ≥ 1,
βl ≥ 0,

∀n ∈ [N ], k ∈ [K],

∀l ∈ L.

(6a)

(6b)

(6c)

s.t. (cid:88)

l∈L

We next ﬁrst present a primal-dual algorithm that solves
(3) with a good approximation ratio λ, and then discuss
how to solve the decomposition problem (6) to obtain βl
and y(t)l, ∀l ∈ L.

5.2.1 A primal-dual algorithm for one-round resource

allocation

q,r = maxn,k{c(t)
min = minr∈[R],q∈[Q]{A(t)

Alg. 2 is our primal-dual approximation algorithm to the
n,k,r,q} is
NP-hard allocation problem (3). C (t)
the maximum amount of type-r resource at datacenter q re-
q,r}
quired by any bundle in t. C (t)
q,r/C (t)
is the minimum ratio between the total amount of available
resource of a type in datacenter and the amount of the re-
source in the datacenter required by one bundle. In practice,
the resource pool is substantially larger than a single user’s
min (cid:29) 1. The main idea of the algo-
demand, and hence C (t)
rithm is to introduce an auxiliary variable z(t)
q,r for each type
of resources (which is the dual variable associated with con-
straint (3(b)), acting as the unit price in allocation decision.
The unit price z(t)
q,r is updated according to the remaining
amount of this type of resource. The algorithm evaluates
each bundle according to the unit prices and the amount
of required resources, and always chooses the users with a
higher bid on a lower valued bundle as the winner.

Theorem 3. Alg. 2 computes feasible primal and dual so-
lutions for (3) and (4), and guarantees λp ≥ d (p and d de-
ﬁned in Thm. 1), λ = 1 + (t)(e(QR)1/(C
with (t) = maxk1,k2∈[K],r∈[R]{c(t)
proximation ratio of Alg. 2 is also λ.

min−1) − 1) C
min−1
n,k2,r,q}. The ap-

n,k1,r,q/c(t)

(t)
min

(t)

(t)

C

Here (t) is the maximum ratio between the overall de-
mands for any type of resource in any two bundles in a user’s
bid in t. When Q, R are small constants and the provider’s
resource pool is relatively large compared with users’ re-
source demands in the bundles, λ tends to 1 + (t)(e − 1). If
further (t) → 1, or each user bids a single bundle, λ tends
to e.

Algorithm 2 A Primal-Dual Algorithm to Solve One-round
Allocation Problem (3)
1: N ← ∅, zbase ← QR · exp((C (t)
q,r ← 1/A(t)
2: y(t)

n ← 0, z(t)

min − 1))
q,r,∀n ∈ [N ], k ∈ [K], r ∈
q,r < zbase AND |N| (cid:54)= N do

n,k ← 0, s(t)
[R], q ∈ [Q]

3: while(cid:80)

(cid:80)

q,rz(t)

q∈[Q] A(t)

r∈[R]

4:
5:
6:

7:

8:
9:

for all n /∈ N do

k(n) = arg maxk∈[K]{w(t)
n,k}
(cid:80)

end for
n∗ = arg maxn∈[N ]{
n∗ ← w(t)
n∗,k(n∗) ← 1, s(t)
y(t)
for all r ∈ [R], q ∈ [Q] do

(cid:80)

r∈[R]

w

(t)
n,k(n)
(t)
n,k(n),r,q

}
n∗,k(n∗),N ← N ∪ {n∗}

q∈[Q] c

(t)
q,r

z

q,r ← z(t)
z(t)

q,r · zbase

(t)

n∗ ,k(n∗ ),q,r
c

/(A

10:
end for
11: end while

(t)

q,r−C

(t)
q,r )

5.2.2 Decomposition with LP duality-based technique
To solve the decomposition problem (6), we can ﬁrst ﬁnd
all the possible integer solutions y(t)l to (3) using some ex-
haustive search method, and then directly solve (6) to derive
the decomposition coeﬃcients βl’s. But this method has an
exponential-time complexity, since there are an exponential
number of possible integer solutions y(t)l, and hence an ex-
ponential number of variables in LP (6). We therefore resort
to its dual, formulated in (7), where dual variables v(t)
n,k and
τ associate with primal constraints (6a) and (6b), respec-
tively:

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

maximize

1
λ

y(t)F
n,k v(t)

n,k + τ

(7)

s.t. (cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k + τ ≤ 1,
τ ≥ 0.

∀l ∈ L,

(7a)

(7b)

Even though the dual (7) has an exponential number of con-
straints, the ellipsoid method can be applied to solve it in
polynomial-time. The ellipsoid method obtains an optimal
dual solution using a polynomial number of separating hy-
perplanes. Alg. 2 acts as a key component of a separation
oracle for generating these separating hyperplanes, and a

feasible integer solution to (3) can be derived each time a
separating hyperplane is generated [13]. Hence, a polyno-
mial number of candidate integer solutions y(t)l’s are pro-
duced through the process of the ellipsoid method, and the
primal problem (6) can be reduced to a linear program with
a polynomial number of variables (βl’s) corresponding to
these integer solutions. Then we can solve the reduced pri-
mal problem in polynomial time. The correctness of the
above decomposition method is given in Lemma 1, with de-
tailed proof and the construction of the separation oracle in
Appendix B.

Lemma 1. The decomposition method correctly obtains a
polynomial number of integer solutions {y(t)l}l∈L to the one-
round allocation problem (3), and the probabilities βl,∀l ∈
L, which solve (6), in polynomial time.
5.3 The Randomized Auction

Alg. 3 gives our randomized auction to be carried out
in each round of the online algorithm in Alg. 1. It selects
an integer bundle allocation solution y(t)l produced by the
decomposition method with probability βl (Line 8). The
payment from a winning bidder n should satisfy two condi-
tions: (1) The expectation of the payment should be equal to
/λ,
(2) The payment Π(t)l
in order to remain truthfulness.
should be no larger than n’s valuation of its winning bundle
n,k , in order to guarantee individual rational-
ity. We obtain the payment rule in Line 9, which satisﬁes
the two conditions.

the scale-down fractional payment,(cid:80)
(cid:80)

n βl = Π(t)F

k∈[K] w(t)

l∈L Π(t)l

n,ky(t)l

n

n

The following theorem provides the properties achieved

by the randomized auction.

Theorem 4. Around runs in polynomial time and is truth-

ful, individual rational and λ(1 + Bmax)-competitive.

Our online auction results when we plug in the one-round
randomized auction Around into the online algorithm frame-
work Aonline in Alg. 1. The competitive ratio of the on-
line auction can be derived readily from Thm. 1 using ν =
λ(1 + Bmax), the competitive ratio of the one-round ran-
domized auction given in Thm. 4.

Theorem 5. Aonline in Alg. 1 combining with Around
in Alg. 3 constitutes a truthful, individual rational, (1 +
Bmax)(λ(1 + Bmax) + 1

γ−1 )- competitive online auction.

The complete proof of Thm. 5 can be found in Appendix
C. We note that when Bmax → 0, the competitive ratio
tends to λ + 1
e−1 . Following the discussions on Thm. 3 in
Sec. 5.2.1, when λ tends to e, the competitive ratio of the
online auction tends to e + 1
5.4

Improving the scale-down factor

e−1 (cid:39) 3.30.

We have decomposed the fractional allocation solution in
Sec. 5.2 after scaling it down by the approximation ratio λ
of the one-round allocation Alg. 2, such that a feasible so-
lution to the decomposition problem (6) is guaranteed [13].
According to Thm. 5, λ (as the scale-down factor in the de-
composition method) is closely related to the competitive
ratio of our online auction, such that a smaller scale-down
factor may potentially lead to a better competitive ratio.
However, a scale-down factor smaller than λ may not guar-
antee a feasible decomposition. We therefore design a binary

n,k}.
)b(t)

Algorithm 3 One-Round Randomized Auction Around in t
n,k = max{0, (1 −
1: Solve LP relaxation of (3), with w(t)
solution by

x(t−1)
Denote
n
n,k ,∀n ∈ [N ], k ∈ [K].
y(t)F
(cid:48)(t)
∀n(cid:48) ∈ [N ], k ∈ [K], w
n(cid:48),k = max{0, (1 − x(t−1)
(cid:48)(t)
if n(cid:48) (cid:54)= n. Otherwise w
n(cid:48),k = 0.

2: for all n ∈ [N ] do
3:

n,k},
)b(t)

fractional

the

n

4:

(cid:48)(t)
n(cid:48),k’s. Denote the

Solve LP relaxation of (3), with w

optimal objective function value by (cid:101)V (t)−n.

n = (cid:101)V (t)−n −(cid:80)

(cid:80)

n(cid:48)(cid:54)=n

k y(t)F

n(cid:48),k w(t)
n(cid:48),k

Π(t)F
5:
6: end for
7: Solve the pair of primal-dual decomposition LPs in (6)
and (7) using the ellipsoid method, using Alg. 2 as a
separation oracle, and derive a polynomial number of
integer solutions to (3), y(t)l, ∀l ∈ L, and the corre-
sponding decomposition coeﬃcients, βl, ∀l ∈ L.

8: Choose y(t)l with probability βl, ∀l ∈ L
9: ∀n ∈ [N ], Π(t)l

n = Π(t)F

·

n

(cid:80)
(cid:80)

k∈[K] w
k∈[K] w

(t)
n,ky
(t)
n,ky

(t)l
n,k
(t)F
n,k

search-based algorithm in Alg. 4 to compute the smallest
scale-down factor that enables feasible decomposition.

The algorithm is designed based on a property of the scale-
down factor, as given in Thm. 6 . With its monotonicity, we
can ﬁnd the smallest, feasible scale-down factor using binary
search (with arbitrary small error). We should note that this
trial-and-error method may improve the performance of our
online auction algorithm on average in practice, but does
not change the theoretical competitive ratio in Thm. 5 in
the worst case. We will investigate the eﬀectiveness of the
improved scale-down factor in our trace-driven simulations.

Algorithm 4 Binary searching smallest scale-down factor
Require: allowable error δ
1: Replace Line 7 of Alg. 3 with the following steps:
2: λl ← 1, λr ← λ + δ
3: while λr − λl > δ do
λm ← (λl + λr)/2
4:
5:
Solve (7) with scale-down factor λm.
If Decomposing success then λr ← λm Else λl ←
6:

λm

7: end while
8: Solve (7) with scale-down factor λr.

Theorem 6. If the fractional allocation y(t)F

n,k can be de-
composed under scale-down factor λ1, then it can also be
decomposed under any factor λ2 > λ1.

6. PERFORMANCE EVALUATION

We evaluate our online auction design using trace-driven
simulations. We investigate 6 types of VMs distributed in
Q (default 3) datacenters, assembled from three types of
resources (CPU, RAM, Disk capacity, R = 3), following
the conﬁgurations in Table 1. Users’ resource demands are
extracted from Google cluster-usage data [3], which record
jobs submitted to the Google cluster with information on
their resource demands (CPU, RAM, Disk). We translate

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

adjustment of the dual variable xn towards an optimal so-
lution to the oﬄine dual problem (2).
Algorithm 1 The Online Algorithm Framework Aonline
1: x(0)
2: // Loop for each time slot
3: for all 1 ≤ t ≤ T do
4:

n ← 0,∀n ∈ [N ]

(cid:40)

≥ 1

if x(t−1)
) otherwise

n

w(t)

0
n,k(1 − x(t−1)
b(t)

n,k =
Run Around. Let N be the set of winning users, and
kn be the index of their corresponding winning bundle,
for each winning user n ∈ N .

,∀n ∈ [N ], k ∈ [K].

n

for all n ∈ N do

5:

6:
7:

(cid:32)

(cid:33)

1 +

b(t)
n,kn
Bn

+

b(t)
n,kn

Bn(γ − 1)

n ← x(t−1)
x(t)

n

8:
end for
for all n /∈ N do
9:
n ← x(t−1)
x(t)
10:
11:
end for
12: end for
13: xn ← x(T )

n ,∀n ∈ [N ]

n

The performance of our online algorithm in Alg. 1 is stated

in Thm. 1, with a detailed proof in Appendix A.

Theorem 1. If we can ﬁnd an auction mechanism in
Around that carries out resource allocation in each round
to produce feasible solutions for (3) and (4), and guarantees
νp ≥ d (hence the competitive ratio of the auction algorithm
is also ν), Aonline is (1 + Bmax)(ν + 1
γ−1 )-competitive for
k∈[K] w(t)
n,k is the
objective value of the one-round resource allocation problem
q,r is the

optimization (1). Here p = (cid:80)
n +(cid:80)
in (3), and d =(cid:80)

(cid:80)
(cid:80)

n,ky(t)

q,rz(t)

n∈[N ]

r∈[R] A(t)

n∈[N ] s(t)
dual objective value in (4).

q∈[Q]

We note that when Bmax → 0, the competitive ratio ap-
e−1 , i.e., the long-term online optimization
1
e−1 in competitive

proaches ν + 1
framework incurs only an additive loss of
ratio, as compared to the one-round allocation algorithm.

5. A RANDOMIZED AUCTION MECHANISM

We now present a randomized auction mechanism Around
which eﬃciently allocates resources according to users’ bids
in each time slot, and guarantees individual rationality and
truthfulness. The auction mechanism in each round allo-
cates resources according to the one-round resource allo-
cation problem in (3) and decides the payments from the
winning bidders. The classic VCG (Vickrey-Clarke-Groves)
mechanism [23] is a potential candidate for our auction de-
sign, which assigns items (VM bundles in our case) to bid-
ders in a socially optimal manner by solving a correspond-
ing resource allocation problem, charges each winner the
externality it exerts on other bidders, and ensures that the
optimal strategy for a bidder is to bid its true valuations.
However, our allocation problem in (3) is NP-hard, and
hence a VCG mechanism becomes computationally infea-
sible. We therefore resort to a fractional version of the VCG

auction for achieving both computational eﬃciency (polyno-
mial time complexity) and economic eﬃciency (social wel-
fare maximization in (3)), by applying the VCG mechanism
to the LP relaxation of the integer program (3). The frac-
tional VCG mechanism produces fractional bundle alloca-
tion results, which are not practically applicable. We fur-
ther employ a primal-dual optimization based decomposi-
tion technique that decomposes such an optimal fractional
solution into a convex combination of integral solutions, and
then design a randomized auction which randomly picks one
from the integral solutions as the bundle allocation result in
each round and retains the nice properties of a fractional
VCG auction. We detail the fractional VCG auction, the
decomposition technique, and the randomized auction de-
sign in the following three subsections.
5.1 The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the
LP relaxation of (3) by relaxing constraint (3c) to 0 ≤
n,k ≤ 1,∀n, k, to decide the bundle allocation in t. Let
y(t)
y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction
n,k ∈ [0, 1]. To compute the VCG pay-
allocation, where y(t)F
(cid:101)V (t)−n denote the social welfare achieved when winner n is
ment from a winner, the auctioneer solves the LP relaxation
again with the winner excluded from the allocation. Let
(cid:101)V (t)−n −(cid:80)

n(cid:48),k w(t)
n of bidder n in a VCG auction is
typically deﬁned as the diﬀerence between its valuation and
its payment. In our online auction framework, a user’s util-
ity in each round should be related not only to its valuation
and payment, but also to its remaining budget: intuitively,
smaller utility gain is appreciated if a user won a bundle
when its remaining budget is small, and larger otherwise.
We characterize this property using a utility function:

k∈[K] y(t)F
The utility function u(t)

excluded. The payment of winner n, Π(t)F

, is: Π(t)F

(cid:80)

n(cid:48),k.

n(cid:48)(cid:54)=n

=

n

n

u(t)
n =

y(t)F
n,k w(t)

n,k − Π(t)F

n

.

(5)

(cid:88)

k∈[K]

Such a utility function is consistent with the social welfare
calculation in the one-round allocation problem (3). In this
way, a user’s budget can potentially last longer, enabling
its acquirement of a better bundle with the same consump-
tion of budget at a later time, contributing to social welfare
eﬃciency over all T rounds of auctions.

We show in Thm. 2 that under this utility function, bid-
ding true valuations is the best strategy for each user in
the fractional VCG auction. A non-negative utility is guar-
anteed for each bidder, based on VCG auction theory [23].
Due to space limit, most proofs in this section are omitted
in this paper and we refer the interested readers to [22] for
the details.

Theorem 2. The fractional VCG auction which produces
n,k ,∀n ∈ [N ], k ∈ [K], and payments

,∀n ∈ [N ], is truthful and individual rational.

fractional allocation y(t)F
Π(t)F
5.2 Decomposing the Fractional Solution

n

Since fractional VM bundles are impractical in real-world
cloud systems, we next decompose the fractional alloca-
tion solution into a convex combination of integer solutions,
which will be used by our randomized auction mechanism.

(cid:80)

l∈L βly(t)l

l∈L βly(t)l

n,k = y(t)F

of integer solutions, (cid:80)

n,k , ∀n ∈ [N ], k ∈ [K], and (cid:80)

We apply a LP duality based decomposition technique [13].
The goal of the decomposition is to ﬁnd βl ∈ [0, 1] and a
set of integer solutions y(t)l,∀l ∈ L (L is an index set),
to the one-round resource allocation problem (3), such that
l∈L βl = 1.
The randomized auction in each round can choose the lth
integer solution y(t)l with probability βl, achieving a good
competitive ratio in social welfare in expectation, as com-
pared to that achieved by the optimal integer solution to (3).
However, there in fact does not exist a convex combination
n,k , that equals the fraction
solution y(t)F
n,k , because otherwise, the expected social wel-
fare achieved by these integer solutions equals that achieved
by the fractional solution, which is apparently a contradic-
tion to the fact that the fractional solution achieves a higher
social welfare than any possible integer solution. Therefore,
to achieve a feasible decomposition, we need to scale down
the optimal fractional solution by a certain factor. Accord-
ing to [13], if there exists an approximation algorithm that
solves the one-round allocation problem (3) with an approx-
imation ratio of λ and guarantees λp ≥ d (where p and d
are the objective function values of the primal problem (3)
and dual (4) respectively) , then we can use λ as the scal-
ing factor, and rest assured that a feasible solution to the
following decomposition problem exists:

minimize

βl

(6)

(cid:88)

l∈L

n,k /λ,

βly(t)l

(cid:88)

l∈L

n,k = y(t)F
βl ≥ 1,
βl ≥ 0,

∀n ∈ [N ], k ∈ [K],

∀l ∈ L.

(6a)

(6b)

(6c)

s.t. (cid:88)

l∈L

We next ﬁrst present a primal-dual algorithm that solves
(3) with a good approximation ratio λ, and then discuss
how to solve the decomposition problem (6) to obtain βl
and y(t)l, ∀l ∈ L.

5.2.1 A primal-dual algorithm for one-round resource

allocation

q,r = maxn,k{c(t)
min = minr∈[R],q∈[Q]{A(t)

Alg. 2 is our primal-dual approximation algorithm to the
n,k,r,q} is
NP-hard allocation problem (3). C (t)
the maximum amount of type-r resource at datacenter q re-
q,r}
quired by any bundle in t. C (t)
q,r/C (t)
is the minimum ratio between the total amount of available
resource of a type in datacenter and the amount of the re-
source in the datacenter required by one bundle. In practice,
the resource pool is substantially larger than a single user’s
min (cid:29) 1. The main idea of the algo-
demand, and hence C (t)
rithm is to introduce an auxiliary variable z(t)
q,r for each type
of resources (which is the dual variable associated with con-
straint (3(b)), acting as the unit price in allocation decision.
The unit price z(t)
q,r is updated according to the remaining
amount of this type of resource. The algorithm evaluates
each bundle according to the unit prices and the amount
of required resources, and always chooses the users with a
higher bid on a lower valued bundle as the winner.

Theorem 3. Alg. 2 computes feasible primal and dual so-
lutions for (3) and (4), and guarantees λp ≥ d (p and d de-
ﬁned in Thm. 1), λ = 1 + (t)(e(QR)1/(C
with (t) = maxk1,k2∈[K],r∈[R]{c(t)
proximation ratio of Alg. 2 is also λ.

min−1) − 1) C
min−1
n,k2,r,q}. The ap-

n,k1,r,q/c(t)

(t)
min

(t)

(t)

C

Here (t) is the maximum ratio between the overall de-
mands for any type of resource in any two bundles in a user’s
bid in t. When Q, R are small constants and the provider’s
resource pool is relatively large compared with users’ re-
source demands in the bundles, λ tends to 1 + (t)(e − 1). If
further (t) → 1, or each user bids a single bundle, λ tends
to e.

Algorithm 2 A Primal-Dual Algorithm to Solve One-round
Allocation Problem (3)
1: N ← ∅, zbase ← QR · exp((C (t)
q,r ← 1/A(t)
2: y(t)

n ← 0, z(t)

min − 1))
q,r,∀n ∈ [N ], k ∈ [K], r ∈
q,r < zbase AND |N| (cid:54)= N do

n,k ← 0, s(t)
[R], q ∈ [Q]

3: while(cid:80)

(cid:80)

q,rz(t)

q∈[Q] A(t)

r∈[R]

4:
5:
6:

7:

8:
9:

for all n /∈ N do

k(n) = arg maxk∈[K]{w(t)
n,k}
(cid:80)

end for
n∗ = arg maxn∈[N ]{
n∗ ← w(t)
n∗,k(n∗) ← 1, s(t)
y(t)
for all r ∈ [R], q ∈ [Q] do

(cid:80)

r∈[R]

w

(t)
n,k(n)
(t)
n,k(n),r,q

}
n∗,k(n∗),N ← N ∪ {n∗}

q∈[Q] c

(t)
q,r

z

q,r ← z(t)
z(t)

q,r · zbase

(t)

n∗ ,k(n∗ ),q,r
c

/(A

10:
end for
11: end while

(t)

q,r−C

(t)
q,r )

5.2.2 Decomposition with LP duality-based technique
To solve the decomposition problem (6), we can ﬁrst ﬁnd
all the possible integer solutions y(t)l to (3) using some ex-
haustive search method, and then directly solve (6) to derive
the decomposition coeﬃcients βl’s. But this method has an
exponential-time complexity, since there are an exponential
number of possible integer solutions y(t)l, and hence an ex-
ponential number of variables in LP (6). We therefore resort
to its dual, formulated in (7), where dual variables v(t)
n,k and
τ associate with primal constraints (6a) and (6b), respec-
tively:

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

maximize

1
λ

y(t)F
n,k v(t)

n,k + τ

(7)

s.t. (cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k + τ ≤ 1,
τ ≥ 0.

∀l ∈ L,

(7a)

(7b)

Even though the dual (7) has an exponential number of con-
straints, the ellipsoid method can be applied to solve it in
polynomial-time. The ellipsoid method obtains an optimal
dual solution using a polynomial number of separating hy-
perplanes. Alg. 2 acts as a key component of a separation
oracle for generating these separating hyperplanes, and a

feasible integer solution to (3) can be derived each time a
separating hyperplane is generated [13]. Hence, a polyno-
mial number of candidate integer solutions y(t)l’s are pro-
duced through the process of the ellipsoid method, and the
primal problem (6) can be reduced to a linear program with
a polynomial number of variables (βl’s) corresponding to
these integer solutions. Then we can solve the reduced pri-
mal problem in polynomial time. The correctness of the
above decomposition method is given in Lemma 1, with de-
tailed proof and the construction of the separation oracle in
Appendix B.

Lemma 1. The decomposition method correctly obtains a
polynomial number of integer solutions {y(t)l}l∈L to the one-
round allocation problem (3), and the probabilities βl,∀l ∈
L, which solve (6), in polynomial time.
5.3 The Randomized Auction

Alg. 3 gives our randomized auction to be carried out
in each round of the online algorithm in Alg. 1. It selects
an integer bundle allocation solution y(t)l produced by the
decomposition method with probability βl (Line 8). The
payment from a winning bidder n should satisfy two condi-
tions: (1) The expectation of the payment should be equal to
/λ,
(2) The payment Π(t)l
in order to remain truthfulness.
should be no larger than n’s valuation of its winning bundle
n,k , in order to guarantee individual rational-
ity. We obtain the payment rule in Line 9, which satisﬁes
the two conditions.

the scale-down fractional payment,(cid:80)
(cid:80)

n βl = Π(t)F

k∈[K] w(t)

l∈L Π(t)l

n,ky(t)l

n

n

The following theorem provides the properties achieved

by the randomized auction.

Theorem 4. Around runs in polynomial time and is truth-

ful, individual rational and λ(1 + Bmax)-competitive.

Our online auction results when we plug in the one-round
randomized auction Around into the online algorithm frame-
work Aonline in Alg. 1. The competitive ratio of the on-
line auction can be derived readily from Thm. 1 using ν =
λ(1 + Bmax), the competitive ratio of the one-round ran-
domized auction given in Thm. 4.

Theorem 5. Aonline in Alg. 1 combining with Around
in Alg. 3 constitutes a truthful, individual rational, (1 +
Bmax)(λ(1 + Bmax) + 1

γ−1 )- competitive online auction.

The complete proof of Thm. 5 can be found in Appendix
C. We note that when Bmax → 0, the competitive ratio
tends to λ + 1
e−1 . Following the discussions on Thm. 3 in
Sec. 5.2.1, when λ tends to e, the competitive ratio of the
online auction tends to e + 1
5.4

Improving the scale-down factor

e−1 (cid:39) 3.30.

We have decomposed the fractional allocation solution in
Sec. 5.2 after scaling it down by the approximation ratio λ
of the one-round allocation Alg. 2, such that a feasible so-
lution to the decomposition problem (6) is guaranteed [13].
According to Thm. 5, λ (as the scale-down factor in the de-
composition method) is closely related to the competitive
ratio of our online auction, such that a smaller scale-down
factor may potentially lead to a better competitive ratio.
However, a scale-down factor smaller than λ may not guar-
antee a feasible decomposition. We therefore design a binary

n,k}.
)b(t)

Algorithm 3 One-Round Randomized Auction Around in t
n,k = max{0, (1 −
1: Solve LP relaxation of (3), with w(t)
solution by

x(t−1)
Denote
n
n,k ,∀n ∈ [N ], k ∈ [K].
y(t)F
(cid:48)(t)
∀n(cid:48) ∈ [N ], k ∈ [K], w
n(cid:48),k = max{0, (1 − x(t−1)
(cid:48)(t)
if n(cid:48) (cid:54)= n. Otherwise w
n(cid:48),k = 0.

2: for all n ∈ [N ] do
3:

n,k},
)b(t)

fractional

the

n

4:

(cid:48)(t)
n(cid:48),k’s. Denote the

Solve LP relaxation of (3), with w

optimal objective function value by (cid:101)V (t)−n.

n = (cid:101)V (t)−n −(cid:80)

(cid:80)

n(cid:48)(cid:54)=n

k y(t)F

n(cid:48),k w(t)
n(cid:48),k

Π(t)F
5:
6: end for
7: Solve the pair of primal-dual decomposition LPs in (6)
and (7) using the ellipsoid method, using Alg. 2 as a
separation oracle, and derive a polynomial number of
integer solutions to (3), y(t)l, ∀l ∈ L, and the corre-
sponding decomposition coeﬃcients, βl, ∀l ∈ L.

8: Choose y(t)l with probability βl, ∀l ∈ L
9: ∀n ∈ [N ], Π(t)l

n = Π(t)F

·

n

(cid:80)
(cid:80)

k∈[K] w
k∈[K] w

(t)
n,ky
(t)
n,ky

(t)l
n,k
(t)F
n,k

search-based algorithm in Alg. 4 to compute the smallest
scale-down factor that enables feasible decomposition.

The algorithm is designed based on a property of the scale-
down factor, as given in Thm. 6 . With its monotonicity, we
can ﬁnd the smallest, feasible scale-down factor using binary
search (with arbitrary small error). We should note that this
trial-and-error method may improve the performance of our
online auction algorithm on average in practice, but does
not change the theoretical competitive ratio in Thm. 5 in
the worst case. We will investigate the eﬀectiveness of the
improved scale-down factor in our trace-driven simulations.

Algorithm 4 Binary searching smallest scale-down factor
Require: allowable error δ
1: Replace Line 7 of Alg. 3 with the following steps:
2: λl ← 1, λr ← λ + δ
3: while λr − λl > δ do
λm ← (λl + λr)/2
4:
5:
Solve (7) with scale-down factor λm.
If Decomposing success then λr ← λm Else λl ←
6:

λm

7: end while
8: Solve (7) with scale-down factor λr.

Theorem 6. If the fractional allocation y(t)F

n,k can be de-
composed under scale-down factor λ1, then it can also be
decomposed under any factor λ2 > λ1.

6. PERFORMANCE EVALUATION

We evaluate our online auction design using trace-driven
simulations. We investigate 6 types of VMs distributed in
Q (default 3) datacenters, assembled from three types of
resources (CPU, RAM, Disk capacity, R = 3), following
the conﬁgurations in Table 1. Users’ resource demands are
extracted from Google cluster-usage data [3], which record
jobs submitted to the Google cluster with information on
their resource demands (CPU, RAM, Disk). We translate

each job request in the Google data into a bidding bundle
as follows: we calculate the numbers and types of VMs in
Table 1 that altogether can make up the resource demands
in the job request, and compose a bidding bundle based on
the numbers and types of VMs; the valuation in the bid-
ding bundle is calculated as the product of the total cost to
acquire these VMs according to the VM charges in Table 1
and a random coeﬃcient in the range of [0.5, 2]. In this way,
we obtain a pool of bidding bundles from the Google data.
In each round of the online auctions, each user randomly
picks K (default 3) bundles in the pool, tags each VM in
each bundle with a datacenter randomly selected from the
Q datacenters, and bids the bundles. A user n’s total budget
Bn is decided by multiplying the sum of valuations in all the
bundles the user may bid in the T rounds of auctions by a
random coeﬃcient in the range of [0.5, 1]. We also compute
the total amount of resource of each type r needed by all the
bid bundles of N users in each round, scale it down using
a random factor in [0, 1], and distribute the overall amount
of type-r resource to Q datacenters evenly, to obtain the
amount of available resource, A(t)
q,r, for each type of resource
in each datacenter at each time. Note that we run random
bundle selection for each user over T rounds ﬁrst to estimate
users’ budgets Bn’s and available resources in the datacen-
ters, A(t)
q,r’s, before running the experiments to evaluate our
online auction with the obtained Bn’s and A(t)
q,r’s. We sup-
pose the maximum ratio between the overall demands for
any type of resource in any two bundles in a user’s bid in
each time slot t, i.e., (t), is no larger than 2.5, by picking
up bundles with similar resource demands for each user in
the auctions, which we believe to reﬂect the reality better.

We compare the performance of three algorithms:
(cid:66) Alloc, a pure online resource allocation algorithm, with
the one-round resource allocation algorithm Alg. 2 serv-
ing in the place of Around in Aonline in Alg. 1.

(cid:66) Auc, our online auction algorithm presented in Sec. 5.3,

i.e., Aonline combined with Around in Alg. 3.

(cid:66) AucBS, the online auction algorithm with the improved
scale-down factor, i.e., adding the binary search in Al-
gorithm 4 to the auction algorithm Around in Aonline.

We compare these algorithms in diﬀerent settings, based
on the ratio between the oﬄine optimal social welfare de-
rived by solving (1) exactly and the overall social welfare
produced by each online algorithm over T rounds, which
we refer to as the oﬄine/online ratio. In each scenario, we
repeat each experiment for 10 times to derive the average
ratios.
6.1 Different numbers of cloud users

We ﬁrst compare the algorithms through varying the num-
ber of cloud users N from 300 to 3000, while ﬁxing the
number of rounds T = 300, as illustrated in Figure 1. The
oﬄine/online ratio of Auc declines when N is large (N >
2000), which is consistent with our theoretical analysis in
Thm. 3: The larger the scale of the cloud system, the larger
the value of C (t)
min, and consequently the better oﬄine/online
ratio results. When users’ truthful resource demands and
valuations are assumed available for free, the pure online re-
source allocation algorithm, Alloc, achieves an oﬄine/online

ratio close to 1, which shows that our online algorithm frame-
work together with the one-round resource allocation algo-
rithm performs closely to the oﬄine optimum in social wel-
fare, if all the cloud users are cooperative. AucBS achieves a
better oﬄine/online ratio as compared to Auc, revealing the
usefulness of our improved scale-down factor based on the
binary-search Alg. 4 in decomposing the fractional solution
into better integer solutions in practical scenarios.

Figure 1: Oﬄine/online ratio under diﬀerent num-
bers of users N
6.2 Different numbers of rounds

We next vary the total number of rounds T our system is
running for while ﬁxing the number of users to 500. Suppose
each round is one hour. A number of rounds in the range
of [300, 3000] corresponds to 12.5 days to about 4 months,
which represents a reasonable period of time for a user to
set a total amount of budget to use in. We observe in Fig-
ure 2 that the oﬄine/online ratio of each algorithm always
remains at similar levels, demonstrating the stable perfor-
mance of our online algorithms regardless of the total num-
ber of rounds they are applied into.

Figure 2: Oﬄine/online ratio under diﬀerent total
numbers of rounds T
6.3 Different numbers of bundles and data-

centers

We further evaluate the performance of AucBS when the
number of bundles each user bids for in each round, K, and
the number of datacenters, Q, vary. Fig. 3 shows that in
general the performance of the improved online auction is
better when the number of bundles is smaller. This can be
explained as follows: The competitive ratio of our online
auction (given in Thm. 5) is related to λ, the approxima-
tion ratio of the one-round resource allocation algorithm in
Alg. 2, which is further closely related to (t). When K is
smaller, (t) is potentially smaller (recall (t) is the maximum
ratio between the overall demands for any type of resource

300900150021002700012345T=300, K=3, Q=3Number of Users(N)Offline/online Ratio  AllocAucBSAuc300900150021002700012345N=500, K=3, Q=3Number of Rounds(T)Offline/online Ratio  AllocAucBSAucAn Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

adjustment of the dual variable xn towards an optimal so-
lution to the oﬄine dual problem (2).
Algorithm 1 The Online Algorithm Framework Aonline
1: x(0)
2: // Loop for each time slot
3: for all 1 ≤ t ≤ T do
4:

n ← 0,∀n ∈ [N ]

(cid:40)

≥ 1

if x(t−1)
) otherwise

n

w(t)

0
n,k(1 − x(t−1)
b(t)

n,k =
Run Around. Let N be the set of winning users, and
kn be the index of their corresponding winning bundle,
for each winning user n ∈ N .

,∀n ∈ [N ], k ∈ [K].

n

for all n ∈ N do

5:

6:
7:

(cid:32)

(cid:33)

1 +

b(t)
n,kn
Bn

+

b(t)
n,kn

Bn(γ − 1)

n ← x(t−1)
x(t)

n

8:
end for
for all n /∈ N do
9:
n ← x(t−1)
x(t)
10:
11:
end for
12: end for
13: xn ← x(T )

n ,∀n ∈ [N ]

n

The performance of our online algorithm in Alg. 1 is stated

in Thm. 1, with a detailed proof in Appendix A.

Theorem 1. If we can ﬁnd an auction mechanism in
Around that carries out resource allocation in each round
to produce feasible solutions for (3) and (4), and guarantees
νp ≥ d (hence the competitive ratio of the auction algorithm
is also ν), Aonline is (1 + Bmax)(ν + 1
γ−1 )-competitive for
k∈[K] w(t)
n,k is the
objective value of the one-round resource allocation problem
q,r is the

optimization (1). Here p = (cid:80)
n +(cid:80)
in (3), and d =(cid:80)

(cid:80)
(cid:80)

n,ky(t)

q,rz(t)

n∈[N ]

r∈[R] A(t)

n∈[N ] s(t)
dual objective value in (4).

q∈[Q]

We note that when Bmax → 0, the competitive ratio ap-
e−1 , i.e., the long-term online optimization
1
e−1 in competitive

proaches ν + 1
framework incurs only an additive loss of
ratio, as compared to the one-round allocation algorithm.

5. A RANDOMIZED AUCTION MECHANISM

We now present a randomized auction mechanism Around
which eﬃciently allocates resources according to users’ bids
in each time slot, and guarantees individual rationality and
truthfulness. The auction mechanism in each round allo-
cates resources according to the one-round resource allo-
cation problem in (3) and decides the payments from the
winning bidders. The classic VCG (Vickrey-Clarke-Groves)
mechanism [23] is a potential candidate for our auction de-
sign, which assigns items (VM bundles in our case) to bid-
ders in a socially optimal manner by solving a correspond-
ing resource allocation problem, charges each winner the
externality it exerts on other bidders, and ensures that the
optimal strategy for a bidder is to bid its true valuations.
However, our allocation problem in (3) is NP-hard, and
hence a VCG mechanism becomes computationally infea-
sible. We therefore resort to a fractional version of the VCG

auction for achieving both computational eﬃciency (polyno-
mial time complexity) and economic eﬃciency (social wel-
fare maximization in (3)), by applying the VCG mechanism
to the LP relaxation of the integer program (3). The frac-
tional VCG mechanism produces fractional bundle alloca-
tion results, which are not practically applicable. We fur-
ther employ a primal-dual optimization based decomposi-
tion technique that decomposes such an optimal fractional
solution into a convex combination of integral solutions, and
then design a randomized auction which randomly picks one
from the integral solutions as the bundle allocation result in
each round and retains the nice properties of a fractional
VCG auction. We detail the fractional VCG auction, the
decomposition technique, and the randomized auction de-
sign in the following three subsections.
5.1 The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the
LP relaxation of (3) by relaxing constraint (3c) to 0 ≤
n,k ≤ 1,∀n, k, to decide the bundle allocation in t. Let
y(t)
y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction
n,k ∈ [0, 1]. To compute the VCG pay-
allocation, where y(t)F
(cid:101)V (t)−n denote the social welfare achieved when winner n is
ment from a winner, the auctioneer solves the LP relaxation
again with the winner excluded from the allocation. Let
(cid:101)V (t)−n −(cid:80)

n(cid:48),k w(t)
n of bidder n in a VCG auction is
typically deﬁned as the diﬀerence between its valuation and
its payment. In our online auction framework, a user’s util-
ity in each round should be related not only to its valuation
and payment, but also to its remaining budget: intuitively,
smaller utility gain is appreciated if a user won a bundle
when its remaining budget is small, and larger otherwise.
We characterize this property using a utility function:

k∈[K] y(t)F
The utility function u(t)

excluded. The payment of winner n, Π(t)F

, is: Π(t)F

(cid:80)

n(cid:48),k.

n(cid:48)(cid:54)=n

=

n

n

u(t)
n =

y(t)F
n,k w(t)

n,k − Π(t)F

n

.

(5)

(cid:88)

k∈[K]

Such a utility function is consistent with the social welfare
calculation in the one-round allocation problem (3). In this
way, a user’s budget can potentially last longer, enabling
its acquirement of a better bundle with the same consump-
tion of budget at a later time, contributing to social welfare
eﬃciency over all T rounds of auctions.

We show in Thm. 2 that under this utility function, bid-
ding true valuations is the best strategy for each user in
the fractional VCG auction. A non-negative utility is guar-
anteed for each bidder, based on VCG auction theory [23].
Due to space limit, most proofs in this section are omitted
in this paper and we refer the interested readers to [22] for
the details.

Theorem 2. The fractional VCG auction which produces
n,k ,∀n ∈ [N ], k ∈ [K], and payments

,∀n ∈ [N ], is truthful and individual rational.

fractional allocation y(t)F
Π(t)F
5.2 Decomposing the Fractional Solution

n

Since fractional VM bundles are impractical in real-world
cloud systems, we next decompose the fractional alloca-
tion solution into a convex combination of integer solutions,
which will be used by our randomized auction mechanism.

(cid:80)

l∈L βly(t)l

l∈L βly(t)l

n,k = y(t)F

of integer solutions, (cid:80)

n,k , ∀n ∈ [N ], k ∈ [K], and (cid:80)

We apply a LP duality based decomposition technique [13].
The goal of the decomposition is to ﬁnd βl ∈ [0, 1] and a
set of integer solutions y(t)l,∀l ∈ L (L is an index set),
to the one-round resource allocation problem (3), such that
l∈L βl = 1.
The randomized auction in each round can choose the lth
integer solution y(t)l with probability βl, achieving a good
competitive ratio in social welfare in expectation, as com-
pared to that achieved by the optimal integer solution to (3).
However, there in fact does not exist a convex combination
n,k , that equals the fraction
solution y(t)F
n,k , because otherwise, the expected social wel-
fare achieved by these integer solutions equals that achieved
by the fractional solution, which is apparently a contradic-
tion to the fact that the fractional solution achieves a higher
social welfare than any possible integer solution. Therefore,
to achieve a feasible decomposition, we need to scale down
the optimal fractional solution by a certain factor. Accord-
ing to [13], if there exists an approximation algorithm that
solves the one-round allocation problem (3) with an approx-
imation ratio of λ and guarantees λp ≥ d (where p and d
are the objective function values of the primal problem (3)
and dual (4) respectively) , then we can use λ as the scal-
ing factor, and rest assured that a feasible solution to the
following decomposition problem exists:

minimize

βl

(6)

(cid:88)

l∈L

n,k /λ,

βly(t)l

(cid:88)

l∈L

n,k = y(t)F
βl ≥ 1,
βl ≥ 0,

∀n ∈ [N ], k ∈ [K],

∀l ∈ L.

(6a)

(6b)

(6c)

s.t. (cid:88)

l∈L

We next ﬁrst present a primal-dual algorithm that solves
(3) with a good approximation ratio λ, and then discuss
how to solve the decomposition problem (6) to obtain βl
and y(t)l, ∀l ∈ L.

5.2.1 A primal-dual algorithm for one-round resource

allocation

q,r = maxn,k{c(t)
min = minr∈[R],q∈[Q]{A(t)

Alg. 2 is our primal-dual approximation algorithm to the
n,k,r,q} is
NP-hard allocation problem (3). C (t)
the maximum amount of type-r resource at datacenter q re-
q,r}
quired by any bundle in t. C (t)
q,r/C (t)
is the minimum ratio between the total amount of available
resource of a type in datacenter and the amount of the re-
source in the datacenter required by one bundle. In practice,
the resource pool is substantially larger than a single user’s
min (cid:29) 1. The main idea of the algo-
demand, and hence C (t)
rithm is to introduce an auxiliary variable z(t)
q,r for each type
of resources (which is the dual variable associated with con-
straint (3(b)), acting as the unit price in allocation decision.
The unit price z(t)
q,r is updated according to the remaining
amount of this type of resource. The algorithm evaluates
each bundle according to the unit prices and the amount
of required resources, and always chooses the users with a
higher bid on a lower valued bundle as the winner.

Theorem 3. Alg. 2 computes feasible primal and dual so-
lutions for (3) and (4), and guarantees λp ≥ d (p and d de-
ﬁned in Thm. 1), λ = 1 + (t)(e(QR)1/(C
with (t) = maxk1,k2∈[K],r∈[R]{c(t)
proximation ratio of Alg. 2 is also λ.

min−1) − 1) C
min−1
n,k2,r,q}. The ap-

n,k1,r,q/c(t)

(t)
min

(t)

(t)

C

Here (t) is the maximum ratio between the overall de-
mands for any type of resource in any two bundles in a user’s
bid in t. When Q, R are small constants and the provider’s
resource pool is relatively large compared with users’ re-
source demands in the bundles, λ tends to 1 + (t)(e − 1). If
further (t) → 1, or each user bids a single bundle, λ tends
to e.

Algorithm 2 A Primal-Dual Algorithm to Solve One-round
Allocation Problem (3)
1: N ← ∅, zbase ← QR · exp((C (t)
q,r ← 1/A(t)
2: y(t)

n ← 0, z(t)

min − 1))
q,r,∀n ∈ [N ], k ∈ [K], r ∈
q,r < zbase AND |N| (cid:54)= N do

n,k ← 0, s(t)
[R], q ∈ [Q]

3: while(cid:80)

(cid:80)

q,rz(t)

q∈[Q] A(t)

r∈[R]

4:
5:
6:

7:

8:
9:

for all n /∈ N do

k(n) = arg maxk∈[K]{w(t)
n,k}
(cid:80)

end for
n∗ = arg maxn∈[N ]{
n∗ ← w(t)
n∗,k(n∗) ← 1, s(t)
y(t)
for all r ∈ [R], q ∈ [Q] do

(cid:80)

r∈[R]

w

(t)
n,k(n)
(t)
n,k(n),r,q

}
n∗,k(n∗),N ← N ∪ {n∗}

q∈[Q] c

(t)
q,r

z

q,r ← z(t)
z(t)

q,r · zbase

(t)

n∗ ,k(n∗ ),q,r
c

/(A

10:
end for
11: end while

(t)

q,r−C

(t)
q,r )

5.2.2 Decomposition with LP duality-based technique
To solve the decomposition problem (6), we can ﬁrst ﬁnd
all the possible integer solutions y(t)l to (3) using some ex-
haustive search method, and then directly solve (6) to derive
the decomposition coeﬃcients βl’s. But this method has an
exponential-time complexity, since there are an exponential
number of possible integer solutions y(t)l, and hence an ex-
ponential number of variables in LP (6). We therefore resort
to its dual, formulated in (7), where dual variables v(t)
n,k and
τ associate with primal constraints (6a) and (6b), respec-
tively:

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

maximize

1
λ

y(t)F
n,k v(t)

n,k + τ

(7)

s.t. (cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k + τ ≤ 1,
τ ≥ 0.

∀l ∈ L,

(7a)

(7b)

Even though the dual (7) has an exponential number of con-
straints, the ellipsoid method can be applied to solve it in
polynomial-time. The ellipsoid method obtains an optimal
dual solution using a polynomial number of separating hy-
perplanes. Alg. 2 acts as a key component of a separation
oracle for generating these separating hyperplanes, and a

feasible integer solution to (3) can be derived each time a
separating hyperplane is generated [13]. Hence, a polyno-
mial number of candidate integer solutions y(t)l’s are pro-
duced through the process of the ellipsoid method, and the
primal problem (6) can be reduced to a linear program with
a polynomial number of variables (βl’s) corresponding to
these integer solutions. Then we can solve the reduced pri-
mal problem in polynomial time. The correctness of the
above decomposition method is given in Lemma 1, with de-
tailed proof and the construction of the separation oracle in
Appendix B.

Lemma 1. The decomposition method correctly obtains a
polynomial number of integer solutions {y(t)l}l∈L to the one-
round allocation problem (3), and the probabilities βl,∀l ∈
L, which solve (6), in polynomial time.
5.3 The Randomized Auction

Alg. 3 gives our randomized auction to be carried out
in each round of the online algorithm in Alg. 1. It selects
an integer bundle allocation solution y(t)l produced by the
decomposition method with probability βl (Line 8). The
payment from a winning bidder n should satisfy two condi-
tions: (1) The expectation of the payment should be equal to
/λ,
(2) The payment Π(t)l
in order to remain truthfulness.
should be no larger than n’s valuation of its winning bundle
n,k , in order to guarantee individual rational-
ity. We obtain the payment rule in Line 9, which satisﬁes
the two conditions.

the scale-down fractional payment,(cid:80)
(cid:80)

n βl = Π(t)F

k∈[K] w(t)

l∈L Π(t)l

n,ky(t)l

n

n

The following theorem provides the properties achieved

by the randomized auction.

Theorem 4. Around runs in polynomial time and is truth-

ful, individual rational and λ(1 + Bmax)-competitive.

Our online auction results when we plug in the one-round
randomized auction Around into the online algorithm frame-
work Aonline in Alg. 1. The competitive ratio of the on-
line auction can be derived readily from Thm. 1 using ν =
λ(1 + Bmax), the competitive ratio of the one-round ran-
domized auction given in Thm. 4.

Theorem 5. Aonline in Alg. 1 combining with Around
in Alg. 3 constitutes a truthful, individual rational, (1 +
Bmax)(λ(1 + Bmax) + 1

γ−1 )- competitive online auction.

The complete proof of Thm. 5 can be found in Appendix
C. We note that when Bmax → 0, the competitive ratio
tends to λ + 1
e−1 . Following the discussions on Thm. 3 in
Sec. 5.2.1, when λ tends to e, the competitive ratio of the
online auction tends to e + 1
5.4

Improving the scale-down factor

e−1 (cid:39) 3.30.

We have decomposed the fractional allocation solution in
Sec. 5.2 after scaling it down by the approximation ratio λ
of the one-round allocation Alg. 2, such that a feasible so-
lution to the decomposition problem (6) is guaranteed [13].
According to Thm. 5, λ (as the scale-down factor in the de-
composition method) is closely related to the competitive
ratio of our online auction, such that a smaller scale-down
factor may potentially lead to a better competitive ratio.
However, a scale-down factor smaller than λ may not guar-
antee a feasible decomposition. We therefore design a binary

n,k}.
)b(t)

Algorithm 3 One-Round Randomized Auction Around in t
n,k = max{0, (1 −
1: Solve LP relaxation of (3), with w(t)
solution by

x(t−1)
Denote
n
n,k ,∀n ∈ [N ], k ∈ [K].
y(t)F
(cid:48)(t)
∀n(cid:48) ∈ [N ], k ∈ [K], w
n(cid:48),k = max{0, (1 − x(t−1)
(cid:48)(t)
if n(cid:48) (cid:54)= n. Otherwise w
n(cid:48),k = 0.

2: for all n ∈ [N ] do
3:

n,k},
)b(t)

fractional

the

n

4:

(cid:48)(t)
n(cid:48),k’s. Denote the

Solve LP relaxation of (3), with w

optimal objective function value by (cid:101)V (t)−n.

n = (cid:101)V (t)−n −(cid:80)

(cid:80)

n(cid:48)(cid:54)=n

k y(t)F

n(cid:48),k w(t)
n(cid:48),k

Π(t)F
5:
6: end for
7: Solve the pair of primal-dual decomposition LPs in (6)
and (7) using the ellipsoid method, using Alg. 2 as a
separation oracle, and derive a polynomial number of
integer solutions to (3), y(t)l, ∀l ∈ L, and the corre-
sponding decomposition coeﬃcients, βl, ∀l ∈ L.

8: Choose y(t)l with probability βl, ∀l ∈ L
9: ∀n ∈ [N ], Π(t)l

n = Π(t)F

·

n

(cid:80)
(cid:80)

k∈[K] w
k∈[K] w

(t)
n,ky
(t)
n,ky

(t)l
n,k
(t)F
n,k

search-based algorithm in Alg. 4 to compute the smallest
scale-down factor that enables feasible decomposition.

The algorithm is designed based on a property of the scale-
down factor, as given in Thm. 6 . With its monotonicity, we
can ﬁnd the smallest, feasible scale-down factor using binary
search (with arbitrary small error). We should note that this
trial-and-error method may improve the performance of our
online auction algorithm on average in practice, but does
not change the theoretical competitive ratio in Thm. 5 in
the worst case. We will investigate the eﬀectiveness of the
improved scale-down factor in our trace-driven simulations.

Algorithm 4 Binary searching smallest scale-down factor
Require: allowable error δ
1: Replace Line 7 of Alg. 3 with the following steps:
2: λl ← 1, λr ← λ + δ
3: while λr − λl > δ do
λm ← (λl + λr)/2
4:
5:
Solve (7) with scale-down factor λm.
If Decomposing success then λr ← λm Else λl ←
6:

λm

7: end while
8: Solve (7) with scale-down factor λr.

Theorem 6. If the fractional allocation y(t)F

n,k can be de-
composed under scale-down factor λ1, then it can also be
decomposed under any factor λ2 > λ1.

6. PERFORMANCE EVALUATION

We evaluate our online auction design using trace-driven
simulations. We investigate 6 types of VMs distributed in
Q (default 3) datacenters, assembled from three types of
resources (CPU, RAM, Disk capacity, R = 3), following
the conﬁgurations in Table 1. Users’ resource demands are
extracted from Google cluster-usage data [3], which record
jobs submitted to the Google cluster with information on
their resource demands (CPU, RAM, Disk). We translate

each job request in the Google data into a bidding bundle
as follows: we calculate the numbers and types of VMs in
Table 1 that altogether can make up the resource demands
in the job request, and compose a bidding bundle based on
the numbers and types of VMs; the valuation in the bid-
ding bundle is calculated as the product of the total cost to
acquire these VMs according to the VM charges in Table 1
and a random coeﬃcient in the range of [0.5, 2]. In this way,
we obtain a pool of bidding bundles from the Google data.
In each round of the online auctions, each user randomly
picks K (default 3) bundles in the pool, tags each VM in
each bundle with a datacenter randomly selected from the
Q datacenters, and bids the bundles. A user n’s total budget
Bn is decided by multiplying the sum of valuations in all the
bundles the user may bid in the T rounds of auctions by a
random coeﬃcient in the range of [0.5, 1]. We also compute
the total amount of resource of each type r needed by all the
bid bundles of N users in each round, scale it down using
a random factor in [0, 1], and distribute the overall amount
of type-r resource to Q datacenters evenly, to obtain the
amount of available resource, A(t)
q,r, for each type of resource
in each datacenter at each time. Note that we run random
bundle selection for each user over T rounds ﬁrst to estimate
users’ budgets Bn’s and available resources in the datacen-
ters, A(t)
q,r’s, before running the experiments to evaluate our
online auction with the obtained Bn’s and A(t)
q,r’s. We sup-
pose the maximum ratio between the overall demands for
any type of resource in any two bundles in a user’s bid in
each time slot t, i.e., (t), is no larger than 2.5, by picking
up bundles with similar resource demands for each user in
the auctions, which we believe to reﬂect the reality better.

We compare the performance of three algorithms:
(cid:66) Alloc, a pure online resource allocation algorithm, with
the one-round resource allocation algorithm Alg. 2 serv-
ing in the place of Around in Aonline in Alg. 1.

(cid:66) Auc, our online auction algorithm presented in Sec. 5.3,

i.e., Aonline combined with Around in Alg. 3.

(cid:66) AucBS, the online auction algorithm with the improved
scale-down factor, i.e., adding the binary search in Al-
gorithm 4 to the auction algorithm Around in Aonline.

We compare these algorithms in diﬀerent settings, based
on the ratio between the oﬄine optimal social welfare de-
rived by solving (1) exactly and the overall social welfare
produced by each online algorithm over T rounds, which
we refer to as the oﬄine/online ratio. In each scenario, we
repeat each experiment for 10 times to derive the average
ratios.
6.1 Different numbers of cloud users

We ﬁrst compare the algorithms through varying the num-
ber of cloud users N from 300 to 3000, while ﬁxing the
number of rounds T = 300, as illustrated in Figure 1. The
oﬄine/online ratio of Auc declines when N is large (N >
2000), which is consistent with our theoretical analysis in
Thm. 3: The larger the scale of the cloud system, the larger
the value of C (t)
min, and consequently the better oﬄine/online
ratio results. When users’ truthful resource demands and
valuations are assumed available for free, the pure online re-
source allocation algorithm, Alloc, achieves an oﬄine/online

ratio close to 1, which shows that our online algorithm frame-
work together with the one-round resource allocation algo-
rithm performs closely to the oﬄine optimum in social wel-
fare, if all the cloud users are cooperative. AucBS achieves a
better oﬄine/online ratio as compared to Auc, revealing the
usefulness of our improved scale-down factor based on the
binary-search Alg. 4 in decomposing the fractional solution
into better integer solutions in practical scenarios.

Figure 1: Oﬄine/online ratio under diﬀerent num-
bers of users N
6.2 Different numbers of rounds

We next vary the total number of rounds T our system is
running for while ﬁxing the number of users to 500. Suppose
each round is one hour. A number of rounds in the range
of [300, 3000] corresponds to 12.5 days to about 4 months,
which represents a reasonable period of time for a user to
set a total amount of budget to use in. We observe in Fig-
ure 2 that the oﬄine/online ratio of each algorithm always
remains at similar levels, demonstrating the stable perfor-
mance of our online algorithms regardless of the total num-
ber of rounds they are applied into.

Figure 2: Oﬄine/online ratio under diﬀerent total
numbers of rounds T
6.3 Different numbers of bundles and data-

centers

We further evaluate the performance of AucBS when the
number of bundles each user bids for in each round, K, and
the number of datacenters, Q, vary. Fig. 3 shows that in
general the performance of the improved online auction is
better when the number of bundles is smaller. This can be
explained as follows: The competitive ratio of our online
auction (given in Thm. 5) is related to λ, the approxima-
tion ratio of the one-round resource allocation algorithm in
Alg. 2, which is further closely related to (t). When K is
smaller, (t) is potentially smaller (recall (t) is the maximum
ratio between the overall demands for any type of resource

300900150021002700012345T=300, K=3, Q=3Number of Users(N)Offline/online Ratio  AllocAucBSAuc300900150021002700012345N=500, K=3, Q=3Number of Rounds(T)Offline/online Ratio  AllocAucBSAucin any two bundles among the K bundles a user bids for in
t), and thus λ is smaller, leading to a lower competitive ra-
tio of the online auction. In a practical cloud system, the K
bundles that a user bids are typically diﬀerent representa-
tions of the user’s same resource demands in a time slot, e.g.,
diﬀerent bundles may specify diﬀerent numbers of diﬀerent
types of VMs requested from diﬀerent datacenters, which
add up to a similar amount of each type of resource across
diﬀerent bundles, to serve the user’s need in t. Therefore,
we do not expect a large value of (t) at any time. When
the value of (t) is capped (e.g., to 2.5 in our simulation set-
tings), the competitive ratio is bounded even when K takes
larger values, as shown by the similar oﬄine/online ratios
obtained when K = 3, 4, or 5, respectively, in Fig. 3.

number of users N , and derive the user satisfaction under
diﬀerent values of K and Q.

Fig. 5 shows that the fewer datacenters, the better user
satisfaction results. This can be explained as follows: Once
a speciﬁc type of resource is used up at one datacenter, bun-
dles requesting resources containing this type of resource in
this datacenter cannot obtained, even though other resource
is available in other datacenters; a larger number of data-
centers leads to more dispersed distribution of resources, re-
sulting in high probability for the above scenario to happen.
Fig. 6 shows that a smaller K leads to better user satis-
faction. When K is larger, λ is larger, and hence the per-
formance of the online auction degrads. On the other hand,
when a user bids for more bundles, the cloud provider has
a larger decision space for resource allocation, which should
potentially lead to a higher chance for a user to be allocated
one of the requested bundles. Therefore, the results in Fig. 6
reveal that the impact of λ dominates that of the latter.

Figure 3: Oﬄine/online ratio of AucBS with diﬀer-
ent numbers of bundles K.

Fig. 4 shows that when the total number of datacenters
in the cloud system increases, the performance of our online
auction degrades slightly, because the approximation ratio λ
of Alg. 2 is larger when Q is larger. Nevertheless, we do not
expect more than a few tens of datacenters in a real-world
cloud system, and the oﬄine/online ratio is still acceptable
around 2.70 when Q is 10.

Figure 5: User satisfaction of AucBS with diﬀerent
numbers of datacenters Q.

Figure 6: User satisfaction of AucBS with diﬀerent
numbers of bundles K.

Figure 4: Oﬄine/online ratio of AucBS with diﬀer-
ent numbers of datacenters Q.

7. CONCLUDING REMARKS

We note that the performance ratios obtained in our sim-
ulations are much smaller than the theoretical ratios com-
puted based on Thm. 5, in the range of 6− 7 under the same
settings as used in our simulations. This promises the good
performance of our online auction algorithm in practice.
6.4 User satisfaction

Finally we study the performance of the improved online
auction algorithm AucBS in terms of user satisfaction, evalu-
ated as the percentage of users who win a bundle in a round,
averaged over the number of rounds the online auction runs.
We set the total number of rounds to T = 100, vary the

This work presents the ﬁrst online combinatorial auction
for the VM market in cloud computing.
It advances the
state-of-the-art of cloud auction design in that all previous
VM auction mechanisms are either one-round only, or sim-
plify VMs into type-oblivious good (and hence circumvent
the challenge imposed by combinatorial auctions). Our on-
line auction comprises of three components. First, we de-
sign an intuition-driven primal-dual algorithm for translat-
ing the online social welfare optimization problem into a
series of one-round optimizations, incurring only a small ad-
ditive penalty in competitive ratio. Second, we apply a ran-
domized auction sub-framework that can translate a coop-
erative approximation algorithm to the one-round optimiza-

30060090012001500180021001.51.71.92.12.32.5T=100,Q=3Number of Users(N)Offline/online Ratio  K=1K=2K=3K=4K=5200500800110014001700012345T=100,K=3Number of Users(N)Offline/online Ratio  Q=2Q=4Q=6Q=8Q=1010020030040050060000.10.20.30.40.5K=3,Number of Users(N)User Satisfaction  Q=2Q=3Q=410020030040050000.10.20.30.40.5Q=3Number of Users(N)User Satisfaction  K=1K=2K=3An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

adjustment of the dual variable xn towards an optimal so-
lution to the oﬄine dual problem (2).
Algorithm 1 The Online Algorithm Framework Aonline
1: x(0)
2: // Loop for each time slot
3: for all 1 ≤ t ≤ T do
4:

n ← 0,∀n ∈ [N ]

(cid:40)

≥ 1

if x(t−1)
) otherwise

n

w(t)

0
n,k(1 − x(t−1)
b(t)

n,k =
Run Around. Let N be the set of winning users, and
kn be the index of their corresponding winning bundle,
for each winning user n ∈ N .

,∀n ∈ [N ], k ∈ [K].

n

for all n ∈ N do

5:

6:
7:

(cid:32)

(cid:33)

1 +

b(t)
n,kn
Bn

+

b(t)
n,kn

Bn(γ − 1)

n ← x(t−1)
x(t)

n

8:
end for
for all n /∈ N do
9:
n ← x(t−1)
x(t)
10:
11:
end for
12: end for
13: xn ← x(T )

n ,∀n ∈ [N ]

n

The performance of our online algorithm in Alg. 1 is stated

in Thm. 1, with a detailed proof in Appendix A.

Theorem 1. If we can ﬁnd an auction mechanism in
Around that carries out resource allocation in each round
to produce feasible solutions for (3) and (4), and guarantees
νp ≥ d (hence the competitive ratio of the auction algorithm
is also ν), Aonline is (1 + Bmax)(ν + 1
γ−1 )-competitive for
k∈[K] w(t)
n,k is the
objective value of the one-round resource allocation problem
q,r is the

optimization (1). Here p = (cid:80)
n +(cid:80)
in (3), and d =(cid:80)

(cid:80)
(cid:80)

n,ky(t)

q,rz(t)

n∈[N ]

r∈[R] A(t)

n∈[N ] s(t)
dual objective value in (4).

q∈[Q]

We note that when Bmax → 0, the competitive ratio ap-
e−1 , i.e., the long-term online optimization
1
e−1 in competitive

proaches ν + 1
framework incurs only an additive loss of
ratio, as compared to the one-round allocation algorithm.

5. A RANDOMIZED AUCTION MECHANISM

We now present a randomized auction mechanism Around
which eﬃciently allocates resources according to users’ bids
in each time slot, and guarantees individual rationality and
truthfulness. The auction mechanism in each round allo-
cates resources according to the one-round resource allo-
cation problem in (3) and decides the payments from the
winning bidders. The classic VCG (Vickrey-Clarke-Groves)
mechanism [23] is a potential candidate for our auction de-
sign, which assigns items (VM bundles in our case) to bid-
ders in a socially optimal manner by solving a correspond-
ing resource allocation problem, charges each winner the
externality it exerts on other bidders, and ensures that the
optimal strategy for a bidder is to bid its true valuations.
However, our allocation problem in (3) is NP-hard, and
hence a VCG mechanism becomes computationally infea-
sible. We therefore resort to a fractional version of the VCG

auction for achieving both computational eﬃciency (polyno-
mial time complexity) and economic eﬃciency (social wel-
fare maximization in (3)), by applying the VCG mechanism
to the LP relaxation of the integer program (3). The frac-
tional VCG mechanism produces fractional bundle alloca-
tion results, which are not practically applicable. We fur-
ther employ a primal-dual optimization based decomposi-
tion technique that decomposes such an optimal fractional
solution into a convex combination of integral solutions, and
then design a randomized auction which randomly picks one
from the integral solutions as the bundle allocation result in
each round and retains the nice properties of a fractional
VCG auction. We detail the fractional VCG auction, the
decomposition technique, and the randomized auction de-
sign in the following three subsections.
5.1 The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the
LP relaxation of (3) by relaxing constraint (3c) to 0 ≤
n,k ≤ 1,∀n, k, to decide the bundle allocation in t. Let
y(t)
y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction
n,k ∈ [0, 1]. To compute the VCG pay-
allocation, where y(t)F
(cid:101)V (t)−n denote the social welfare achieved when winner n is
ment from a winner, the auctioneer solves the LP relaxation
again with the winner excluded from the allocation. Let
(cid:101)V (t)−n −(cid:80)

n(cid:48),k w(t)
n of bidder n in a VCG auction is
typically deﬁned as the diﬀerence between its valuation and
its payment. In our online auction framework, a user’s util-
ity in each round should be related not only to its valuation
and payment, but also to its remaining budget: intuitively,
smaller utility gain is appreciated if a user won a bundle
when its remaining budget is small, and larger otherwise.
We characterize this property using a utility function:

k∈[K] y(t)F
The utility function u(t)

excluded. The payment of winner n, Π(t)F

, is: Π(t)F

(cid:80)

n(cid:48),k.

n(cid:48)(cid:54)=n

=

n

n

u(t)
n =

y(t)F
n,k w(t)

n,k − Π(t)F

n

.

(5)

(cid:88)

k∈[K]

Such a utility function is consistent with the social welfare
calculation in the one-round allocation problem (3). In this
way, a user’s budget can potentially last longer, enabling
its acquirement of a better bundle with the same consump-
tion of budget at a later time, contributing to social welfare
eﬃciency over all T rounds of auctions.

We show in Thm. 2 that under this utility function, bid-
ding true valuations is the best strategy for each user in
the fractional VCG auction. A non-negative utility is guar-
anteed for each bidder, based on VCG auction theory [23].
Due to space limit, most proofs in this section are omitted
in this paper and we refer the interested readers to [22] for
the details.

Theorem 2. The fractional VCG auction which produces
n,k ,∀n ∈ [N ], k ∈ [K], and payments

,∀n ∈ [N ], is truthful and individual rational.

fractional allocation y(t)F
Π(t)F
5.2 Decomposing the Fractional Solution

n

Since fractional VM bundles are impractical in real-world
cloud systems, we next decompose the fractional alloca-
tion solution into a convex combination of integer solutions,
which will be used by our randomized auction mechanism.

(cid:80)

l∈L βly(t)l

l∈L βly(t)l

n,k = y(t)F

of integer solutions, (cid:80)

n,k , ∀n ∈ [N ], k ∈ [K], and (cid:80)

We apply a LP duality based decomposition technique [13].
The goal of the decomposition is to ﬁnd βl ∈ [0, 1] and a
set of integer solutions y(t)l,∀l ∈ L (L is an index set),
to the one-round resource allocation problem (3), such that
l∈L βl = 1.
The randomized auction in each round can choose the lth
integer solution y(t)l with probability βl, achieving a good
competitive ratio in social welfare in expectation, as com-
pared to that achieved by the optimal integer solution to (3).
However, there in fact does not exist a convex combination
n,k , that equals the fraction
solution y(t)F
n,k , because otherwise, the expected social wel-
fare achieved by these integer solutions equals that achieved
by the fractional solution, which is apparently a contradic-
tion to the fact that the fractional solution achieves a higher
social welfare than any possible integer solution. Therefore,
to achieve a feasible decomposition, we need to scale down
the optimal fractional solution by a certain factor. Accord-
ing to [13], if there exists an approximation algorithm that
solves the one-round allocation problem (3) with an approx-
imation ratio of λ and guarantees λp ≥ d (where p and d
are the objective function values of the primal problem (3)
and dual (4) respectively) , then we can use λ as the scal-
ing factor, and rest assured that a feasible solution to the
following decomposition problem exists:

minimize

βl

(6)

(cid:88)

l∈L

n,k /λ,

βly(t)l

(cid:88)

l∈L

n,k = y(t)F
βl ≥ 1,
βl ≥ 0,

∀n ∈ [N ], k ∈ [K],

∀l ∈ L.

(6a)

(6b)

(6c)

s.t. (cid:88)

l∈L

We next ﬁrst present a primal-dual algorithm that solves
(3) with a good approximation ratio λ, and then discuss
how to solve the decomposition problem (6) to obtain βl
and y(t)l, ∀l ∈ L.

5.2.1 A primal-dual algorithm for one-round resource

allocation

q,r = maxn,k{c(t)
min = minr∈[R],q∈[Q]{A(t)

Alg. 2 is our primal-dual approximation algorithm to the
n,k,r,q} is
NP-hard allocation problem (3). C (t)
the maximum amount of type-r resource at datacenter q re-
q,r}
quired by any bundle in t. C (t)
q,r/C (t)
is the minimum ratio between the total amount of available
resource of a type in datacenter and the amount of the re-
source in the datacenter required by one bundle. In practice,
the resource pool is substantially larger than a single user’s
min (cid:29) 1. The main idea of the algo-
demand, and hence C (t)
rithm is to introduce an auxiliary variable z(t)
q,r for each type
of resources (which is the dual variable associated with con-
straint (3(b)), acting as the unit price in allocation decision.
The unit price z(t)
q,r is updated according to the remaining
amount of this type of resource. The algorithm evaluates
each bundle according to the unit prices and the amount
of required resources, and always chooses the users with a
higher bid on a lower valued bundle as the winner.

Theorem 3. Alg. 2 computes feasible primal and dual so-
lutions for (3) and (4), and guarantees λp ≥ d (p and d de-
ﬁned in Thm. 1), λ = 1 + (t)(e(QR)1/(C
with (t) = maxk1,k2∈[K],r∈[R]{c(t)
proximation ratio of Alg. 2 is also λ.

min−1) − 1) C
min−1
n,k2,r,q}. The ap-

n,k1,r,q/c(t)

(t)
min

(t)

(t)

C

Here (t) is the maximum ratio between the overall de-
mands for any type of resource in any two bundles in a user’s
bid in t. When Q, R are small constants and the provider’s
resource pool is relatively large compared with users’ re-
source demands in the bundles, λ tends to 1 + (t)(e − 1). If
further (t) → 1, or each user bids a single bundle, λ tends
to e.

Algorithm 2 A Primal-Dual Algorithm to Solve One-round
Allocation Problem (3)
1: N ← ∅, zbase ← QR · exp((C (t)
q,r ← 1/A(t)
2: y(t)

n ← 0, z(t)

min − 1))
q,r,∀n ∈ [N ], k ∈ [K], r ∈
q,r < zbase AND |N| (cid:54)= N do

n,k ← 0, s(t)
[R], q ∈ [Q]

3: while(cid:80)

(cid:80)

q,rz(t)

q∈[Q] A(t)

r∈[R]

4:
5:
6:

7:

8:
9:

for all n /∈ N do

k(n) = arg maxk∈[K]{w(t)
n,k}
(cid:80)

end for
n∗ = arg maxn∈[N ]{
n∗ ← w(t)
n∗,k(n∗) ← 1, s(t)
y(t)
for all r ∈ [R], q ∈ [Q] do

(cid:80)

r∈[R]

w

(t)
n,k(n)
(t)
n,k(n),r,q

}
n∗,k(n∗),N ← N ∪ {n∗}

q∈[Q] c

(t)
q,r

z

q,r ← z(t)
z(t)

q,r · zbase

(t)

n∗ ,k(n∗ ),q,r
c

/(A

10:
end for
11: end while

(t)

q,r−C

(t)
q,r )

5.2.2 Decomposition with LP duality-based technique
To solve the decomposition problem (6), we can ﬁrst ﬁnd
all the possible integer solutions y(t)l to (3) using some ex-
haustive search method, and then directly solve (6) to derive
the decomposition coeﬃcients βl’s. But this method has an
exponential-time complexity, since there are an exponential
number of possible integer solutions y(t)l, and hence an ex-
ponential number of variables in LP (6). We therefore resort
to its dual, formulated in (7), where dual variables v(t)
n,k and
τ associate with primal constraints (6a) and (6b), respec-
tively:

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

maximize

1
λ

y(t)F
n,k v(t)

n,k + τ

(7)

s.t. (cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k + τ ≤ 1,
τ ≥ 0.

∀l ∈ L,

(7a)

(7b)

Even though the dual (7) has an exponential number of con-
straints, the ellipsoid method can be applied to solve it in
polynomial-time. The ellipsoid method obtains an optimal
dual solution using a polynomial number of separating hy-
perplanes. Alg. 2 acts as a key component of a separation
oracle for generating these separating hyperplanes, and a

feasible integer solution to (3) can be derived each time a
separating hyperplane is generated [13]. Hence, a polyno-
mial number of candidate integer solutions y(t)l’s are pro-
duced through the process of the ellipsoid method, and the
primal problem (6) can be reduced to a linear program with
a polynomial number of variables (βl’s) corresponding to
these integer solutions. Then we can solve the reduced pri-
mal problem in polynomial time. The correctness of the
above decomposition method is given in Lemma 1, with de-
tailed proof and the construction of the separation oracle in
Appendix B.

Lemma 1. The decomposition method correctly obtains a
polynomial number of integer solutions {y(t)l}l∈L to the one-
round allocation problem (3), and the probabilities βl,∀l ∈
L, which solve (6), in polynomial time.
5.3 The Randomized Auction

Alg. 3 gives our randomized auction to be carried out
in each round of the online algorithm in Alg. 1. It selects
an integer bundle allocation solution y(t)l produced by the
decomposition method with probability βl (Line 8). The
payment from a winning bidder n should satisfy two condi-
tions: (1) The expectation of the payment should be equal to
/λ,
(2) The payment Π(t)l
in order to remain truthfulness.
should be no larger than n’s valuation of its winning bundle
n,k , in order to guarantee individual rational-
ity. We obtain the payment rule in Line 9, which satisﬁes
the two conditions.

the scale-down fractional payment,(cid:80)
(cid:80)

n βl = Π(t)F

k∈[K] w(t)

l∈L Π(t)l

n,ky(t)l

n

n

The following theorem provides the properties achieved

by the randomized auction.

Theorem 4. Around runs in polynomial time and is truth-

ful, individual rational and λ(1 + Bmax)-competitive.

Our online auction results when we plug in the one-round
randomized auction Around into the online algorithm frame-
work Aonline in Alg. 1. The competitive ratio of the on-
line auction can be derived readily from Thm. 1 using ν =
λ(1 + Bmax), the competitive ratio of the one-round ran-
domized auction given in Thm. 4.

Theorem 5. Aonline in Alg. 1 combining with Around
in Alg. 3 constitutes a truthful, individual rational, (1 +
Bmax)(λ(1 + Bmax) + 1

γ−1 )- competitive online auction.

The complete proof of Thm. 5 can be found in Appendix
C. We note that when Bmax → 0, the competitive ratio
tends to λ + 1
e−1 . Following the discussions on Thm. 3 in
Sec. 5.2.1, when λ tends to e, the competitive ratio of the
online auction tends to e + 1
5.4

Improving the scale-down factor

e−1 (cid:39) 3.30.

We have decomposed the fractional allocation solution in
Sec. 5.2 after scaling it down by the approximation ratio λ
of the one-round allocation Alg. 2, such that a feasible so-
lution to the decomposition problem (6) is guaranteed [13].
According to Thm. 5, λ (as the scale-down factor in the de-
composition method) is closely related to the competitive
ratio of our online auction, such that a smaller scale-down
factor may potentially lead to a better competitive ratio.
However, a scale-down factor smaller than λ may not guar-
antee a feasible decomposition. We therefore design a binary

n,k}.
)b(t)

Algorithm 3 One-Round Randomized Auction Around in t
n,k = max{0, (1 −
1: Solve LP relaxation of (3), with w(t)
solution by

x(t−1)
Denote
n
n,k ,∀n ∈ [N ], k ∈ [K].
y(t)F
(cid:48)(t)
∀n(cid:48) ∈ [N ], k ∈ [K], w
n(cid:48),k = max{0, (1 − x(t−1)
(cid:48)(t)
if n(cid:48) (cid:54)= n. Otherwise w
n(cid:48),k = 0.

2: for all n ∈ [N ] do
3:

n,k},
)b(t)

fractional

the

n

4:

(cid:48)(t)
n(cid:48),k’s. Denote the

Solve LP relaxation of (3), with w

optimal objective function value by (cid:101)V (t)−n.

n = (cid:101)V (t)−n −(cid:80)

(cid:80)

n(cid:48)(cid:54)=n

k y(t)F

n(cid:48),k w(t)
n(cid:48),k

Π(t)F
5:
6: end for
7: Solve the pair of primal-dual decomposition LPs in (6)
and (7) using the ellipsoid method, using Alg. 2 as a
separation oracle, and derive a polynomial number of
integer solutions to (3), y(t)l, ∀l ∈ L, and the corre-
sponding decomposition coeﬃcients, βl, ∀l ∈ L.

8: Choose y(t)l with probability βl, ∀l ∈ L
9: ∀n ∈ [N ], Π(t)l

n = Π(t)F

·

n

(cid:80)
(cid:80)

k∈[K] w
k∈[K] w

(t)
n,ky
(t)
n,ky

(t)l
n,k
(t)F
n,k

search-based algorithm in Alg. 4 to compute the smallest
scale-down factor that enables feasible decomposition.

The algorithm is designed based on a property of the scale-
down factor, as given in Thm. 6 . With its monotonicity, we
can ﬁnd the smallest, feasible scale-down factor using binary
search (with arbitrary small error). We should note that this
trial-and-error method may improve the performance of our
online auction algorithm on average in practice, but does
not change the theoretical competitive ratio in Thm. 5 in
the worst case. We will investigate the eﬀectiveness of the
improved scale-down factor in our trace-driven simulations.

Algorithm 4 Binary searching smallest scale-down factor
Require: allowable error δ
1: Replace Line 7 of Alg. 3 with the following steps:
2: λl ← 1, λr ← λ + δ
3: while λr − λl > δ do
λm ← (λl + λr)/2
4:
5:
Solve (7) with scale-down factor λm.
If Decomposing success then λr ← λm Else λl ←
6:

λm

7: end while
8: Solve (7) with scale-down factor λr.

Theorem 6. If the fractional allocation y(t)F

n,k can be de-
composed under scale-down factor λ1, then it can also be
decomposed under any factor λ2 > λ1.

6. PERFORMANCE EVALUATION

We evaluate our online auction design using trace-driven
simulations. We investigate 6 types of VMs distributed in
Q (default 3) datacenters, assembled from three types of
resources (CPU, RAM, Disk capacity, R = 3), following
the conﬁgurations in Table 1. Users’ resource demands are
extracted from Google cluster-usage data [3], which record
jobs submitted to the Google cluster with information on
their resource demands (CPU, RAM, Disk). We translate

each job request in the Google data into a bidding bundle
as follows: we calculate the numbers and types of VMs in
Table 1 that altogether can make up the resource demands
in the job request, and compose a bidding bundle based on
the numbers and types of VMs; the valuation in the bid-
ding bundle is calculated as the product of the total cost to
acquire these VMs according to the VM charges in Table 1
and a random coeﬃcient in the range of [0.5, 2]. In this way,
we obtain a pool of bidding bundles from the Google data.
In each round of the online auctions, each user randomly
picks K (default 3) bundles in the pool, tags each VM in
each bundle with a datacenter randomly selected from the
Q datacenters, and bids the bundles. A user n’s total budget
Bn is decided by multiplying the sum of valuations in all the
bundles the user may bid in the T rounds of auctions by a
random coeﬃcient in the range of [0.5, 1]. We also compute
the total amount of resource of each type r needed by all the
bid bundles of N users in each round, scale it down using
a random factor in [0, 1], and distribute the overall amount
of type-r resource to Q datacenters evenly, to obtain the
amount of available resource, A(t)
q,r, for each type of resource
in each datacenter at each time. Note that we run random
bundle selection for each user over T rounds ﬁrst to estimate
users’ budgets Bn’s and available resources in the datacen-
ters, A(t)
q,r’s, before running the experiments to evaluate our
online auction with the obtained Bn’s and A(t)
q,r’s. We sup-
pose the maximum ratio between the overall demands for
any type of resource in any two bundles in a user’s bid in
each time slot t, i.e., (t), is no larger than 2.5, by picking
up bundles with similar resource demands for each user in
the auctions, which we believe to reﬂect the reality better.

We compare the performance of three algorithms:
(cid:66) Alloc, a pure online resource allocation algorithm, with
the one-round resource allocation algorithm Alg. 2 serv-
ing in the place of Around in Aonline in Alg. 1.

(cid:66) Auc, our online auction algorithm presented in Sec. 5.3,

i.e., Aonline combined with Around in Alg. 3.

(cid:66) AucBS, the online auction algorithm with the improved
scale-down factor, i.e., adding the binary search in Al-
gorithm 4 to the auction algorithm Around in Aonline.

We compare these algorithms in diﬀerent settings, based
on the ratio between the oﬄine optimal social welfare de-
rived by solving (1) exactly and the overall social welfare
produced by each online algorithm over T rounds, which
we refer to as the oﬄine/online ratio. In each scenario, we
repeat each experiment for 10 times to derive the average
ratios.
6.1 Different numbers of cloud users

We ﬁrst compare the algorithms through varying the num-
ber of cloud users N from 300 to 3000, while ﬁxing the
number of rounds T = 300, as illustrated in Figure 1. The
oﬄine/online ratio of Auc declines when N is large (N >
2000), which is consistent with our theoretical analysis in
Thm. 3: The larger the scale of the cloud system, the larger
the value of C (t)
min, and consequently the better oﬄine/online
ratio results. When users’ truthful resource demands and
valuations are assumed available for free, the pure online re-
source allocation algorithm, Alloc, achieves an oﬄine/online

ratio close to 1, which shows that our online algorithm frame-
work together with the one-round resource allocation algo-
rithm performs closely to the oﬄine optimum in social wel-
fare, if all the cloud users are cooperative. AucBS achieves a
better oﬄine/online ratio as compared to Auc, revealing the
usefulness of our improved scale-down factor based on the
binary-search Alg. 4 in decomposing the fractional solution
into better integer solutions in practical scenarios.

Figure 1: Oﬄine/online ratio under diﬀerent num-
bers of users N
6.2 Different numbers of rounds

We next vary the total number of rounds T our system is
running for while ﬁxing the number of users to 500. Suppose
each round is one hour. A number of rounds in the range
of [300, 3000] corresponds to 12.5 days to about 4 months,
which represents a reasonable period of time for a user to
set a total amount of budget to use in. We observe in Fig-
ure 2 that the oﬄine/online ratio of each algorithm always
remains at similar levels, demonstrating the stable perfor-
mance of our online algorithms regardless of the total num-
ber of rounds they are applied into.

Figure 2: Oﬄine/online ratio under diﬀerent total
numbers of rounds T
6.3 Different numbers of bundles and data-

centers

We further evaluate the performance of AucBS when the
number of bundles each user bids for in each round, K, and
the number of datacenters, Q, vary. Fig. 3 shows that in
general the performance of the improved online auction is
better when the number of bundles is smaller. This can be
explained as follows: The competitive ratio of our online
auction (given in Thm. 5) is related to λ, the approxima-
tion ratio of the one-round resource allocation algorithm in
Alg. 2, which is further closely related to (t). When K is
smaller, (t) is potentially smaller (recall (t) is the maximum
ratio between the overall demands for any type of resource

300900150021002700012345T=300, K=3, Q=3Number of Users(N)Offline/online Ratio  AllocAucBSAuc300900150021002700012345N=500, K=3, Q=3Number of Rounds(T)Offline/online Ratio  AllocAucBSAucin any two bundles among the K bundles a user bids for in
t), and thus λ is smaller, leading to a lower competitive ra-
tio of the online auction. In a practical cloud system, the K
bundles that a user bids are typically diﬀerent representa-
tions of the user’s same resource demands in a time slot, e.g.,
diﬀerent bundles may specify diﬀerent numbers of diﬀerent
types of VMs requested from diﬀerent datacenters, which
add up to a similar amount of each type of resource across
diﬀerent bundles, to serve the user’s need in t. Therefore,
we do not expect a large value of (t) at any time. When
the value of (t) is capped (e.g., to 2.5 in our simulation set-
tings), the competitive ratio is bounded even when K takes
larger values, as shown by the similar oﬄine/online ratios
obtained when K = 3, 4, or 5, respectively, in Fig. 3.

number of users N , and derive the user satisfaction under
diﬀerent values of K and Q.

Fig. 5 shows that the fewer datacenters, the better user
satisfaction results. This can be explained as follows: Once
a speciﬁc type of resource is used up at one datacenter, bun-
dles requesting resources containing this type of resource in
this datacenter cannot obtained, even though other resource
is available in other datacenters; a larger number of data-
centers leads to more dispersed distribution of resources, re-
sulting in high probability for the above scenario to happen.
Fig. 6 shows that a smaller K leads to better user satis-
faction. When K is larger, λ is larger, and hence the per-
formance of the online auction degrads. On the other hand,
when a user bids for more bundles, the cloud provider has
a larger decision space for resource allocation, which should
potentially lead to a higher chance for a user to be allocated
one of the requested bundles. Therefore, the results in Fig. 6
reveal that the impact of λ dominates that of the latter.

Figure 3: Oﬄine/online ratio of AucBS with diﬀer-
ent numbers of bundles K.

Fig. 4 shows that when the total number of datacenters
in the cloud system increases, the performance of our online
auction degrades slightly, because the approximation ratio λ
of Alg. 2 is larger when Q is larger. Nevertheless, we do not
expect more than a few tens of datacenters in a real-world
cloud system, and the oﬄine/online ratio is still acceptable
around 2.70 when Q is 10.

Figure 5: User satisfaction of AucBS with diﬀerent
numbers of datacenters Q.

Figure 6: User satisfaction of AucBS with diﬀerent
numbers of bundles K.

Figure 4: Oﬄine/online ratio of AucBS with diﬀer-
ent numbers of datacenters Q.

7. CONCLUDING REMARKS

We note that the performance ratios obtained in our sim-
ulations are much smaller than the theoretical ratios com-
puted based on Thm. 5, in the range of 6− 7 under the same
settings as used in our simulations. This promises the good
performance of our online auction algorithm in practice.
6.4 User satisfaction

Finally we study the performance of the improved online
auction algorithm AucBS in terms of user satisfaction, evalu-
ated as the percentage of users who win a bundle in a round,
averaged over the number of rounds the online auction runs.
We set the total number of rounds to T = 100, vary the

This work presents the ﬁrst online combinatorial auction
for the VM market in cloud computing.
It advances the
state-of-the-art of cloud auction design in that all previous
VM auction mechanisms are either one-round only, or sim-
plify VMs into type-oblivious good (and hence circumvent
the challenge imposed by combinatorial auctions). Our on-
line auction comprises of three components. First, we de-
sign an intuition-driven primal-dual algorithm for translat-
ing the online social welfare optimization problem into a
series of one-round optimizations, incurring only a small ad-
ditive penalty in competitive ratio. Second, we apply a ran-
domized auction sub-framework that can translate a coop-
erative approximation algorithm to the one-round optimiza-

30060090012001500180021001.51.71.92.12.32.5T=100,Q=3Number of Users(N)Offline/online Ratio  K=1K=2K=3K=4K=5200500800110014001700012345T=100,K=3Number of Users(N)Offline/online Ratio  Q=2Q=4Q=6Q=8Q=1010020030040050060000.10.20.30.40.5K=3,Number of Users(N)User Satisfaction  Q=2Q=3Q=410020030040050000.10.20.30.40.5Q=3Number of Users(N)User Satisfaction  K=1K=2K=3tion into an auction. Third, we apply a greedy primal-dual
algorithm that approximates the one-round social welfare
optimization. Our overall online VM auction guarantees a
theoretical competitive ratio close to 3.30 in typical scenar-
ios, and its design may shed light to similar auction problems
in related settings.

8. ACKNOWLEDGMENT

The research was supported in part by a grant from Hong

Kong RGC under the contract HKU 718513.

9. REFERENCES
[1] Amazon Elastic Compute Cloud.

http://aws.amazon.com/ec2/.
[2] Amazon EC2 Spot Instances.

http://aws.amazon.com/ec2/spot-instances/.

[3] Google Cluster Data,

https://code.google.com/p/googleclusterdata/.

[4] Windows Azure: Microsoft’s Cloud Platform.

http://www.windowsazure.com/.

[5] H. Ballani, P. Costa, T. Karagiannis, and

A. Rowstron. Towards predictable datacenter
networks. In ACM SIGCOMM Computer
Communication Review, volume 41, pages 242–253.
ACM, 2011.

[6] N. Bansal, K.-W. Lee, V. Nagarajan, and M. Zafer.

Minimum congestion mapping in a cloud. In
Proceedings of the 30th annual ACM
SIGACT-SIGOPS symposium on Principles of
distributed computing, pages 267–276. ACM, 2011.

[7] N. Buchbinder, K. Jain, and J. S. Naor. Online

primal-dual algorithms for maximizing ad-auctions
revenue. In Proceedings of the 15th Annual European
Symposium on Algorithms, 2007.

[8] N. Cherﬁ and M. Hiﬁ. A column generation method

for the multiple-choice multi-dimensional knapsack
problem. Computational Optimization and
Applications, 46(1):51–73, 2010.

[9] H. Fu, Z. Li, and C. Wu. Core-selecting auction design
for dynamically allocating heterogeneous vms in cloud
computing. Submitted to INFOCOM 2014.

[10] G. Gens and E. Levner. Complexity of approximation
algorithms for combinatorial problems: a survey. ACM
SIGACT News, 12(3):52–65, 1980.

[11] P. Godfrey, M. Schapira, A. Zohar, and S. Shenker.
Incentive compatibility and dynamics of congestion
control. In ACM SIGMETRICS Performance
Evaluation Review, pages 95–106, 2010.

[12] R. Lavi and N. Nisan. Competitive analysis of

incentive compatible on-line auctions. In Proceedings
of the 2nd ACM Conference on Electronic Commerce,
pages 233–241. ACM, 2000.

[13] R. Lavi and C. Swamy. Truthful and near-optimal

mechanism design via linear programming. In Proc. of
FOCS, pages 595–604, 2005.

[14] D. Lehmann, L. I. O´callaghan, and Y. Shoham. Truth

revelation in approximately eﬃcient combinatorial
auctions. Journal of the ACM (JACM), 49, 2002.

[15] R. T. B. Ma, S. C. M. Lee, J. C. S. Lui, and D. K. Y.
Yau. A game theoretic approach to provide incentive
and service diﬀerentiation in p2p networks. In ACM

SIGMETRICS Performance Evaluation Review, pages
189–198, 2004.

[16] X. Meng, V. Pappas, and L. Zhang. Improving the

scalability of data center networks with traﬃc-aware
virtual machine placement. In INFOCOM, 2010
Proceedings IEEE, pages 1–9. IEEE, 2010.

[17] A. Mu’Alem and N. Nisan. Truthful approximation

mechanisms for restricted combinatorial auctions.
Games and Economic Behavior, 64(2):612–631, 2008.

[18] N. Nisan. Algorithmic game theory. Cambridge

University Press, 2007.

[19] D. Niu, C. Feng, and B. Li. Pricing cloud bandwidth

reservations under demand uncertainty. In ACM
SIGMETRICS Performance Evaluation Review, pages
151–162, 2012.

[20] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.

Computationally manageable combinational auctions.
Management science, 44(8):1131–1147, 1998.

[21] G. Shanmuganathan, A. Gulati, and P. Varman.

Defragmenting the cloud using demand-based resource
allocation. In ACM SIGMETRICS Performance
Evaluation Review, pages 67–80, 2013.

[22] W. Shi, L. Zhang, C. Wu, Z. Li, and F. C. M. Lau. An

online auction framework for dynamic resource
provisioning in cloud computing. Technical report,
2014. http://i.cs.hku.hk/~cwu/papers/
sigmetrics14-techreport.pdf.

[23] W. Vickrey. Counterspeculation, auctions, and

competitive sealed tenders. The Journal of Finance,
16(1):8–37, 1961.

[24] Q. Wang, K. Ren, and X. Meng. When cloud meets
ebay: Towards eﬀective pricing for cloud computing.
In Proc. of IEEE INFOCOM, pages 936–944, 2012.

[25] W. Wang, B. Liang, and B. Li. Revenue maximization
with dynamic auctions in iaas cloud markets. In Proc.
IEEE ICDCS, 2013.

[26] C. Wu, Z. Li, X. Qiu, and F. C. M. Lau.

Auction-based p2p vod streaming: Incentives and
optimal scheduling. ACM Transactions on Multimedia
Computing, Communications and Applications, 2012.
[27] S. Zaman and D. Grosu. Combinatorial auction-based

mechanisms for vm provisioning and allocation in
clouds. In IEEE/ACM CCGrid, pages 729–734, 2012.

[28] H. Zhang, B. Li, H. Jiang, F. Liu, A. V. Vasilakos,

and J. Liu. A framework for truthful online auctions
in cloud computing with heterogeneous user demands.
In Proc. of IEEE INFOCOM, 2013.

[29] L. Zhang, Z. Li, and C. Wu. Dynamic resource
provisioning in cloud computing: A randomized
auction approach. In Proc. of IEEE INFOCOM, 2014.

[30] Y. Zhu, B. Li, and Z. Li. Truthful spectrum auction

design for secondary networks. In Proc. of IEEE
INFOCOM, 2012.

APPENDIX
A. PROOF OF THEOREM 1

Proof. We prove the correctness and the competitive-

ness of Aonline by proving three claims:

1. At the end of the algorithm, it produces feasible solu-

tion for dual (2).

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

adjustment of the dual variable xn towards an optimal so-
lution to the oﬄine dual problem (2).
Algorithm 1 The Online Algorithm Framework Aonline
1: x(0)
2: // Loop for each time slot
3: for all 1 ≤ t ≤ T do
4:

n ← 0,∀n ∈ [N ]

(cid:40)

≥ 1

if x(t−1)
) otherwise

n

w(t)

0
n,k(1 − x(t−1)
b(t)

n,k =
Run Around. Let N be the set of winning users, and
kn be the index of their corresponding winning bundle,
for each winning user n ∈ N .

,∀n ∈ [N ], k ∈ [K].

n

for all n ∈ N do

5:

6:
7:

(cid:32)

(cid:33)

1 +

b(t)
n,kn
Bn

+

b(t)
n,kn

Bn(γ − 1)

n ← x(t−1)
x(t)

n

8:
end for
for all n /∈ N do
9:
n ← x(t−1)
x(t)
10:
11:
end for
12: end for
13: xn ← x(T )

n ,∀n ∈ [N ]

n

The performance of our online algorithm in Alg. 1 is stated

in Thm. 1, with a detailed proof in Appendix A.

Theorem 1. If we can ﬁnd an auction mechanism in
Around that carries out resource allocation in each round
to produce feasible solutions for (3) and (4), and guarantees
νp ≥ d (hence the competitive ratio of the auction algorithm
is also ν), Aonline is (1 + Bmax)(ν + 1
γ−1 )-competitive for
k∈[K] w(t)
n,k is the
objective value of the one-round resource allocation problem
q,r is the

optimization (1). Here p = (cid:80)
n +(cid:80)
in (3), and d =(cid:80)

(cid:80)
(cid:80)

n,ky(t)

q,rz(t)

n∈[N ]

r∈[R] A(t)

n∈[N ] s(t)
dual objective value in (4).

q∈[Q]

We note that when Bmax → 0, the competitive ratio ap-
e−1 , i.e., the long-term online optimization
1
e−1 in competitive

proaches ν + 1
framework incurs only an additive loss of
ratio, as compared to the one-round allocation algorithm.

5. A RANDOMIZED AUCTION MECHANISM

We now present a randomized auction mechanism Around
which eﬃciently allocates resources according to users’ bids
in each time slot, and guarantees individual rationality and
truthfulness. The auction mechanism in each round allo-
cates resources according to the one-round resource allo-
cation problem in (3) and decides the payments from the
winning bidders. The classic VCG (Vickrey-Clarke-Groves)
mechanism [23] is a potential candidate for our auction de-
sign, which assigns items (VM bundles in our case) to bid-
ders in a socially optimal manner by solving a correspond-
ing resource allocation problem, charges each winner the
externality it exerts on other bidders, and ensures that the
optimal strategy for a bidder is to bid its true valuations.
However, our allocation problem in (3) is NP-hard, and
hence a VCG mechanism becomes computationally infea-
sible. We therefore resort to a fractional version of the VCG

auction for achieving both computational eﬃciency (polyno-
mial time complexity) and economic eﬃciency (social wel-
fare maximization in (3)), by applying the VCG mechanism
to the LP relaxation of the integer program (3). The frac-
tional VCG mechanism produces fractional bundle alloca-
tion results, which are not practically applicable. We fur-
ther employ a primal-dual optimization based decomposi-
tion technique that decomposes such an optimal fractional
solution into a convex combination of integral solutions, and
then design a randomized auction which randomly picks one
from the integral solutions as the bundle allocation result in
each round and retains the nice properties of a fractional
VCG auction. We detail the fractional VCG auction, the
decomposition technique, and the randomized auction de-
sign in the following three subsections.
5.1 The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the
LP relaxation of (3) by relaxing constraint (3c) to 0 ≤
n,k ≤ 1,∀n, k, to decide the bundle allocation in t. Let
y(t)
y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction
n,k ∈ [0, 1]. To compute the VCG pay-
allocation, where y(t)F
(cid:101)V (t)−n denote the social welfare achieved when winner n is
ment from a winner, the auctioneer solves the LP relaxation
again with the winner excluded from the allocation. Let
(cid:101)V (t)−n −(cid:80)

n(cid:48),k w(t)
n of bidder n in a VCG auction is
typically deﬁned as the diﬀerence between its valuation and
its payment. In our online auction framework, a user’s util-
ity in each round should be related not only to its valuation
and payment, but also to its remaining budget: intuitively,
smaller utility gain is appreciated if a user won a bundle
when its remaining budget is small, and larger otherwise.
We characterize this property using a utility function:

k∈[K] y(t)F
The utility function u(t)

excluded. The payment of winner n, Π(t)F

, is: Π(t)F

(cid:80)

n(cid:48),k.

n(cid:48)(cid:54)=n

=

n

n

u(t)
n =

y(t)F
n,k w(t)

n,k − Π(t)F

n

.

(5)

(cid:88)

k∈[K]

Such a utility function is consistent with the social welfare
calculation in the one-round allocation problem (3). In this
way, a user’s budget can potentially last longer, enabling
its acquirement of a better bundle with the same consump-
tion of budget at a later time, contributing to social welfare
eﬃciency over all T rounds of auctions.

We show in Thm. 2 that under this utility function, bid-
ding true valuations is the best strategy for each user in
the fractional VCG auction. A non-negative utility is guar-
anteed for each bidder, based on VCG auction theory [23].
Due to space limit, most proofs in this section are omitted
in this paper and we refer the interested readers to [22] for
the details.

Theorem 2. The fractional VCG auction which produces
n,k ,∀n ∈ [N ], k ∈ [K], and payments

,∀n ∈ [N ], is truthful and individual rational.

fractional allocation y(t)F
Π(t)F
5.2 Decomposing the Fractional Solution

n

Since fractional VM bundles are impractical in real-world
cloud systems, we next decompose the fractional alloca-
tion solution into a convex combination of integer solutions,
which will be used by our randomized auction mechanism.

(cid:80)

l∈L βly(t)l

l∈L βly(t)l

n,k = y(t)F

of integer solutions, (cid:80)

n,k , ∀n ∈ [N ], k ∈ [K], and (cid:80)

We apply a LP duality based decomposition technique [13].
The goal of the decomposition is to ﬁnd βl ∈ [0, 1] and a
set of integer solutions y(t)l,∀l ∈ L (L is an index set),
to the one-round resource allocation problem (3), such that
l∈L βl = 1.
The randomized auction in each round can choose the lth
integer solution y(t)l with probability βl, achieving a good
competitive ratio in social welfare in expectation, as com-
pared to that achieved by the optimal integer solution to (3).
However, there in fact does not exist a convex combination
n,k , that equals the fraction
solution y(t)F
n,k , because otherwise, the expected social wel-
fare achieved by these integer solutions equals that achieved
by the fractional solution, which is apparently a contradic-
tion to the fact that the fractional solution achieves a higher
social welfare than any possible integer solution. Therefore,
to achieve a feasible decomposition, we need to scale down
the optimal fractional solution by a certain factor. Accord-
ing to [13], if there exists an approximation algorithm that
solves the one-round allocation problem (3) with an approx-
imation ratio of λ and guarantees λp ≥ d (where p and d
are the objective function values of the primal problem (3)
and dual (4) respectively) , then we can use λ as the scal-
ing factor, and rest assured that a feasible solution to the
following decomposition problem exists:

minimize

βl

(6)

(cid:88)

l∈L

n,k /λ,

βly(t)l

(cid:88)

l∈L

n,k = y(t)F
βl ≥ 1,
βl ≥ 0,

∀n ∈ [N ], k ∈ [K],

∀l ∈ L.

(6a)

(6b)

(6c)

s.t. (cid:88)

l∈L

We next ﬁrst present a primal-dual algorithm that solves
(3) with a good approximation ratio λ, and then discuss
how to solve the decomposition problem (6) to obtain βl
and y(t)l, ∀l ∈ L.

5.2.1 A primal-dual algorithm for one-round resource

allocation

q,r = maxn,k{c(t)
min = minr∈[R],q∈[Q]{A(t)

Alg. 2 is our primal-dual approximation algorithm to the
n,k,r,q} is
NP-hard allocation problem (3). C (t)
the maximum amount of type-r resource at datacenter q re-
q,r}
quired by any bundle in t. C (t)
q,r/C (t)
is the minimum ratio between the total amount of available
resource of a type in datacenter and the amount of the re-
source in the datacenter required by one bundle. In practice,
the resource pool is substantially larger than a single user’s
min (cid:29) 1. The main idea of the algo-
demand, and hence C (t)
rithm is to introduce an auxiliary variable z(t)
q,r for each type
of resources (which is the dual variable associated with con-
straint (3(b)), acting as the unit price in allocation decision.
The unit price z(t)
q,r is updated according to the remaining
amount of this type of resource. The algorithm evaluates
each bundle according to the unit prices and the amount
of required resources, and always chooses the users with a
higher bid on a lower valued bundle as the winner.

Theorem 3. Alg. 2 computes feasible primal and dual so-
lutions for (3) and (4), and guarantees λp ≥ d (p and d de-
ﬁned in Thm. 1), λ = 1 + (t)(e(QR)1/(C
with (t) = maxk1,k2∈[K],r∈[R]{c(t)
proximation ratio of Alg. 2 is also λ.

min−1) − 1) C
min−1
n,k2,r,q}. The ap-

n,k1,r,q/c(t)

(t)
min

(t)

(t)

C

Here (t) is the maximum ratio between the overall de-
mands for any type of resource in any two bundles in a user’s
bid in t. When Q, R are small constants and the provider’s
resource pool is relatively large compared with users’ re-
source demands in the bundles, λ tends to 1 + (t)(e − 1). If
further (t) → 1, or each user bids a single bundle, λ tends
to e.

Algorithm 2 A Primal-Dual Algorithm to Solve One-round
Allocation Problem (3)
1: N ← ∅, zbase ← QR · exp((C (t)
q,r ← 1/A(t)
2: y(t)

n ← 0, z(t)

min − 1))
q,r,∀n ∈ [N ], k ∈ [K], r ∈
q,r < zbase AND |N| (cid:54)= N do

n,k ← 0, s(t)
[R], q ∈ [Q]

3: while(cid:80)

(cid:80)

q,rz(t)

q∈[Q] A(t)

r∈[R]

4:
5:
6:

7:

8:
9:

for all n /∈ N do

k(n) = arg maxk∈[K]{w(t)
n,k}
(cid:80)

end for
n∗ = arg maxn∈[N ]{
n∗ ← w(t)
n∗,k(n∗) ← 1, s(t)
y(t)
for all r ∈ [R], q ∈ [Q] do

(cid:80)

r∈[R]

w

(t)
n,k(n)
(t)
n,k(n),r,q

}
n∗,k(n∗),N ← N ∪ {n∗}

q∈[Q] c

(t)
q,r

z

q,r ← z(t)
z(t)

q,r · zbase

(t)

n∗ ,k(n∗ ),q,r
c

/(A

10:
end for
11: end while

(t)

q,r−C

(t)
q,r )

5.2.2 Decomposition with LP duality-based technique
To solve the decomposition problem (6), we can ﬁrst ﬁnd
all the possible integer solutions y(t)l to (3) using some ex-
haustive search method, and then directly solve (6) to derive
the decomposition coeﬃcients βl’s. But this method has an
exponential-time complexity, since there are an exponential
number of possible integer solutions y(t)l, and hence an ex-
ponential number of variables in LP (6). We therefore resort
to its dual, formulated in (7), where dual variables v(t)
n,k and
τ associate with primal constraints (6a) and (6b), respec-
tively:

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

maximize

1
λ

y(t)F
n,k v(t)

n,k + τ

(7)

s.t. (cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k + τ ≤ 1,
τ ≥ 0.

∀l ∈ L,

(7a)

(7b)

Even though the dual (7) has an exponential number of con-
straints, the ellipsoid method can be applied to solve it in
polynomial-time. The ellipsoid method obtains an optimal
dual solution using a polynomial number of separating hy-
perplanes. Alg. 2 acts as a key component of a separation
oracle for generating these separating hyperplanes, and a

feasible integer solution to (3) can be derived each time a
separating hyperplane is generated [13]. Hence, a polyno-
mial number of candidate integer solutions y(t)l’s are pro-
duced through the process of the ellipsoid method, and the
primal problem (6) can be reduced to a linear program with
a polynomial number of variables (βl’s) corresponding to
these integer solutions. Then we can solve the reduced pri-
mal problem in polynomial time. The correctness of the
above decomposition method is given in Lemma 1, with de-
tailed proof and the construction of the separation oracle in
Appendix B.

Lemma 1. The decomposition method correctly obtains a
polynomial number of integer solutions {y(t)l}l∈L to the one-
round allocation problem (3), and the probabilities βl,∀l ∈
L, which solve (6), in polynomial time.
5.3 The Randomized Auction

Alg. 3 gives our randomized auction to be carried out
in each round of the online algorithm in Alg. 1. It selects
an integer bundle allocation solution y(t)l produced by the
decomposition method with probability βl (Line 8). The
payment from a winning bidder n should satisfy two condi-
tions: (1) The expectation of the payment should be equal to
/λ,
(2) The payment Π(t)l
in order to remain truthfulness.
should be no larger than n’s valuation of its winning bundle
n,k , in order to guarantee individual rational-
ity. We obtain the payment rule in Line 9, which satisﬁes
the two conditions.

the scale-down fractional payment,(cid:80)
(cid:80)

n βl = Π(t)F

k∈[K] w(t)

l∈L Π(t)l

n,ky(t)l

n

n

The following theorem provides the properties achieved

by the randomized auction.

Theorem 4. Around runs in polynomial time and is truth-

ful, individual rational and λ(1 + Bmax)-competitive.

Our online auction results when we plug in the one-round
randomized auction Around into the online algorithm frame-
work Aonline in Alg. 1. The competitive ratio of the on-
line auction can be derived readily from Thm. 1 using ν =
λ(1 + Bmax), the competitive ratio of the one-round ran-
domized auction given in Thm. 4.

Theorem 5. Aonline in Alg. 1 combining with Around
in Alg. 3 constitutes a truthful, individual rational, (1 +
Bmax)(λ(1 + Bmax) + 1

γ−1 )- competitive online auction.

The complete proof of Thm. 5 can be found in Appendix
C. We note that when Bmax → 0, the competitive ratio
tends to λ + 1
e−1 . Following the discussions on Thm. 3 in
Sec. 5.2.1, when λ tends to e, the competitive ratio of the
online auction tends to e + 1
5.4

Improving the scale-down factor

e−1 (cid:39) 3.30.

We have decomposed the fractional allocation solution in
Sec. 5.2 after scaling it down by the approximation ratio λ
of the one-round allocation Alg. 2, such that a feasible so-
lution to the decomposition problem (6) is guaranteed [13].
According to Thm. 5, λ (as the scale-down factor in the de-
composition method) is closely related to the competitive
ratio of our online auction, such that a smaller scale-down
factor may potentially lead to a better competitive ratio.
However, a scale-down factor smaller than λ may not guar-
antee a feasible decomposition. We therefore design a binary

n,k}.
)b(t)

Algorithm 3 One-Round Randomized Auction Around in t
n,k = max{0, (1 −
1: Solve LP relaxation of (3), with w(t)
solution by

x(t−1)
Denote
n
n,k ,∀n ∈ [N ], k ∈ [K].
y(t)F
(cid:48)(t)
∀n(cid:48) ∈ [N ], k ∈ [K], w
n(cid:48),k = max{0, (1 − x(t−1)
(cid:48)(t)
if n(cid:48) (cid:54)= n. Otherwise w
n(cid:48),k = 0.

2: for all n ∈ [N ] do
3:

n,k},
)b(t)

fractional

the

n

4:

(cid:48)(t)
n(cid:48),k’s. Denote the

Solve LP relaxation of (3), with w

optimal objective function value by (cid:101)V (t)−n.

n = (cid:101)V (t)−n −(cid:80)

(cid:80)

n(cid:48)(cid:54)=n

k y(t)F

n(cid:48),k w(t)
n(cid:48),k

Π(t)F
5:
6: end for
7: Solve the pair of primal-dual decomposition LPs in (6)
and (7) using the ellipsoid method, using Alg. 2 as a
separation oracle, and derive a polynomial number of
integer solutions to (3), y(t)l, ∀l ∈ L, and the corre-
sponding decomposition coeﬃcients, βl, ∀l ∈ L.

8: Choose y(t)l with probability βl, ∀l ∈ L
9: ∀n ∈ [N ], Π(t)l

n = Π(t)F

·

n

(cid:80)
(cid:80)

k∈[K] w
k∈[K] w

(t)
n,ky
(t)
n,ky

(t)l
n,k
(t)F
n,k

search-based algorithm in Alg. 4 to compute the smallest
scale-down factor that enables feasible decomposition.

The algorithm is designed based on a property of the scale-
down factor, as given in Thm. 6 . With its monotonicity, we
can ﬁnd the smallest, feasible scale-down factor using binary
search (with arbitrary small error). We should note that this
trial-and-error method may improve the performance of our
online auction algorithm on average in practice, but does
not change the theoretical competitive ratio in Thm. 5 in
the worst case. We will investigate the eﬀectiveness of the
improved scale-down factor in our trace-driven simulations.

Algorithm 4 Binary searching smallest scale-down factor
Require: allowable error δ
1: Replace Line 7 of Alg. 3 with the following steps:
2: λl ← 1, λr ← λ + δ
3: while λr − λl > δ do
λm ← (λl + λr)/2
4:
5:
Solve (7) with scale-down factor λm.
If Decomposing success then λr ← λm Else λl ←
6:

λm

7: end while
8: Solve (7) with scale-down factor λr.

Theorem 6. If the fractional allocation y(t)F

n,k can be de-
composed under scale-down factor λ1, then it can also be
decomposed under any factor λ2 > λ1.

6. PERFORMANCE EVALUATION

We evaluate our online auction design using trace-driven
simulations. We investigate 6 types of VMs distributed in
Q (default 3) datacenters, assembled from three types of
resources (CPU, RAM, Disk capacity, R = 3), following
the conﬁgurations in Table 1. Users’ resource demands are
extracted from Google cluster-usage data [3], which record
jobs submitted to the Google cluster with information on
their resource demands (CPU, RAM, Disk). We translate

each job request in the Google data into a bidding bundle
as follows: we calculate the numbers and types of VMs in
Table 1 that altogether can make up the resource demands
in the job request, and compose a bidding bundle based on
the numbers and types of VMs; the valuation in the bid-
ding bundle is calculated as the product of the total cost to
acquire these VMs according to the VM charges in Table 1
and a random coeﬃcient in the range of [0.5, 2]. In this way,
we obtain a pool of bidding bundles from the Google data.
In each round of the online auctions, each user randomly
picks K (default 3) bundles in the pool, tags each VM in
each bundle with a datacenter randomly selected from the
Q datacenters, and bids the bundles. A user n’s total budget
Bn is decided by multiplying the sum of valuations in all the
bundles the user may bid in the T rounds of auctions by a
random coeﬃcient in the range of [0.5, 1]. We also compute
the total amount of resource of each type r needed by all the
bid bundles of N users in each round, scale it down using
a random factor in [0, 1], and distribute the overall amount
of type-r resource to Q datacenters evenly, to obtain the
amount of available resource, A(t)
q,r, for each type of resource
in each datacenter at each time. Note that we run random
bundle selection for each user over T rounds ﬁrst to estimate
users’ budgets Bn’s and available resources in the datacen-
ters, A(t)
q,r’s, before running the experiments to evaluate our
online auction with the obtained Bn’s and A(t)
q,r’s. We sup-
pose the maximum ratio between the overall demands for
any type of resource in any two bundles in a user’s bid in
each time slot t, i.e., (t), is no larger than 2.5, by picking
up bundles with similar resource demands for each user in
the auctions, which we believe to reﬂect the reality better.

We compare the performance of three algorithms:
(cid:66) Alloc, a pure online resource allocation algorithm, with
the one-round resource allocation algorithm Alg. 2 serv-
ing in the place of Around in Aonline in Alg. 1.

(cid:66) Auc, our online auction algorithm presented in Sec. 5.3,

i.e., Aonline combined with Around in Alg. 3.

(cid:66) AucBS, the online auction algorithm with the improved
scale-down factor, i.e., adding the binary search in Al-
gorithm 4 to the auction algorithm Around in Aonline.

We compare these algorithms in diﬀerent settings, based
on the ratio between the oﬄine optimal social welfare de-
rived by solving (1) exactly and the overall social welfare
produced by each online algorithm over T rounds, which
we refer to as the oﬄine/online ratio. In each scenario, we
repeat each experiment for 10 times to derive the average
ratios.
6.1 Different numbers of cloud users

We ﬁrst compare the algorithms through varying the num-
ber of cloud users N from 300 to 3000, while ﬁxing the
number of rounds T = 300, as illustrated in Figure 1. The
oﬄine/online ratio of Auc declines when N is large (N >
2000), which is consistent with our theoretical analysis in
Thm. 3: The larger the scale of the cloud system, the larger
the value of C (t)
min, and consequently the better oﬄine/online
ratio results. When users’ truthful resource demands and
valuations are assumed available for free, the pure online re-
source allocation algorithm, Alloc, achieves an oﬄine/online

ratio close to 1, which shows that our online algorithm frame-
work together with the one-round resource allocation algo-
rithm performs closely to the oﬄine optimum in social wel-
fare, if all the cloud users are cooperative. AucBS achieves a
better oﬄine/online ratio as compared to Auc, revealing the
usefulness of our improved scale-down factor based on the
binary-search Alg. 4 in decomposing the fractional solution
into better integer solutions in practical scenarios.

Figure 1: Oﬄine/online ratio under diﬀerent num-
bers of users N
6.2 Different numbers of rounds

We next vary the total number of rounds T our system is
running for while ﬁxing the number of users to 500. Suppose
each round is one hour. A number of rounds in the range
of [300, 3000] corresponds to 12.5 days to about 4 months,
which represents a reasonable period of time for a user to
set a total amount of budget to use in. We observe in Fig-
ure 2 that the oﬄine/online ratio of each algorithm always
remains at similar levels, demonstrating the stable perfor-
mance of our online algorithms regardless of the total num-
ber of rounds they are applied into.

Figure 2: Oﬄine/online ratio under diﬀerent total
numbers of rounds T
6.3 Different numbers of bundles and data-

centers

We further evaluate the performance of AucBS when the
number of bundles each user bids for in each round, K, and
the number of datacenters, Q, vary. Fig. 3 shows that in
general the performance of the improved online auction is
better when the number of bundles is smaller. This can be
explained as follows: The competitive ratio of our online
auction (given in Thm. 5) is related to λ, the approxima-
tion ratio of the one-round resource allocation algorithm in
Alg. 2, which is further closely related to (t). When K is
smaller, (t) is potentially smaller (recall (t) is the maximum
ratio between the overall demands for any type of resource

300900150021002700012345T=300, K=3, Q=3Number of Users(N)Offline/online Ratio  AllocAucBSAuc300900150021002700012345N=500, K=3, Q=3Number of Rounds(T)Offline/online Ratio  AllocAucBSAucin any two bundles among the K bundles a user bids for in
t), and thus λ is smaller, leading to a lower competitive ra-
tio of the online auction. In a practical cloud system, the K
bundles that a user bids are typically diﬀerent representa-
tions of the user’s same resource demands in a time slot, e.g.,
diﬀerent bundles may specify diﬀerent numbers of diﬀerent
types of VMs requested from diﬀerent datacenters, which
add up to a similar amount of each type of resource across
diﬀerent bundles, to serve the user’s need in t. Therefore,
we do not expect a large value of (t) at any time. When
the value of (t) is capped (e.g., to 2.5 in our simulation set-
tings), the competitive ratio is bounded even when K takes
larger values, as shown by the similar oﬄine/online ratios
obtained when K = 3, 4, or 5, respectively, in Fig. 3.

number of users N , and derive the user satisfaction under
diﬀerent values of K and Q.

Fig. 5 shows that the fewer datacenters, the better user
satisfaction results. This can be explained as follows: Once
a speciﬁc type of resource is used up at one datacenter, bun-
dles requesting resources containing this type of resource in
this datacenter cannot obtained, even though other resource
is available in other datacenters; a larger number of data-
centers leads to more dispersed distribution of resources, re-
sulting in high probability for the above scenario to happen.
Fig. 6 shows that a smaller K leads to better user satis-
faction. When K is larger, λ is larger, and hence the per-
formance of the online auction degrads. On the other hand,
when a user bids for more bundles, the cloud provider has
a larger decision space for resource allocation, which should
potentially lead to a higher chance for a user to be allocated
one of the requested bundles. Therefore, the results in Fig. 6
reveal that the impact of λ dominates that of the latter.

Figure 3: Oﬄine/online ratio of AucBS with diﬀer-
ent numbers of bundles K.

Fig. 4 shows that when the total number of datacenters
in the cloud system increases, the performance of our online
auction degrades slightly, because the approximation ratio λ
of Alg. 2 is larger when Q is larger. Nevertheless, we do not
expect more than a few tens of datacenters in a real-world
cloud system, and the oﬄine/online ratio is still acceptable
around 2.70 when Q is 10.

Figure 5: User satisfaction of AucBS with diﬀerent
numbers of datacenters Q.

Figure 6: User satisfaction of AucBS with diﬀerent
numbers of bundles K.

Figure 4: Oﬄine/online ratio of AucBS with diﬀer-
ent numbers of datacenters Q.

7. CONCLUDING REMARKS

We note that the performance ratios obtained in our sim-
ulations are much smaller than the theoretical ratios com-
puted based on Thm. 5, in the range of 6− 7 under the same
settings as used in our simulations. This promises the good
performance of our online auction algorithm in practice.
6.4 User satisfaction

Finally we study the performance of the improved online
auction algorithm AucBS in terms of user satisfaction, evalu-
ated as the percentage of users who win a bundle in a round,
averaged over the number of rounds the online auction runs.
We set the total number of rounds to T = 100, vary the

This work presents the ﬁrst online combinatorial auction
for the VM market in cloud computing.
It advances the
state-of-the-art of cloud auction design in that all previous
VM auction mechanisms are either one-round only, or sim-
plify VMs into type-oblivious good (and hence circumvent
the challenge imposed by combinatorial auctions). Our on-
line auction comprises of three components. First, we de-
sign an intuition-driven primal-dual algorithm for translat-
ing the online social welfare optimization problem into a
series of one-round optimizations, incurring only a small ad-
ditive penalty in competitive ratio. Second, we apply a ran-
domized auction sub-framework that can translate a coop-
erative approximation algorithm to the one-round optimiza-

30060090012001500180021001.51.71.92.12.32.5T=100,Q=3Number of Users(N)Offline/online Ratio  K=1K=2K=3K=4K=5200500800110014001700012345T=100,K=3Number of Users(N)Offline/online Ratio  Q=2Q=4Q=6Q=8Q=1010020030040050060000.10.20.30.40.5K=3,Number of Users(N)User Satisfaction  Q=2Q=3Q=410020030040050000.10.20.30.40.5Q=3Number of Users(N)User Satisfaction  K=1K=2K=3tion into an auction. Third, we apply a greedy primal-dual
algorithm that approximates the one-round social welfare
optimization. Our overall online VM auction guarantees a
theoretical competitive ratio close to 3.30 in typical scenar-
ios, and its design may shed light to similar auction problems
in related settings.

8. ACKNOWLEDGMENT

The research was supported in part by a grant from Hong

Kong RGC under the contract HKU 718513.

9. REFERENCES
[1] Amazon Elastic Compute Cloud.

http://aws.amazon.com/ec2/.
[2] Amazon EC2 Spot Instances.

http://aws.amazon.com/ec2/spot-instances/.

[3] Google Cluster Data,

https://code.google.com/p/googleclusterdata/.

[4] Windows Azure: Microsoft’s Cloud Platform.

http://www.windowsazure.com/.

[5] H. Ballani, P. Costa, T. Karagiannis, and

A. Rowstron. Towards predictable datacenter
networks. In ACM SIGCOMM Computer
Communication Review, volume 41, pages 242–253.
ACM, 2011.

[6] N. Bansal, K.-W. Lee, V. Nagarajan, and M. Zafer.

Minimum congestion mapping in a cloud. In
Proceedings of the 30th annual ACM
SIGACT-SIGOPS symposium on Principles of
distributed computing, pages 267–276. ACM, 2011.

[7] N. Buchbinder, K. Jain, and J. S. Naor. Online

primal-dual algorithms for maximizing ad-auctions
revenue. In Proceedings of the 15th Annual European
Symposium on Algorithms, 2007.

[8] N. Cherﬁ and M. Hiﬁ. A column generation method

for the multiple-choice multi-dimensional knapsack
problem. Computational Optimization and
Applications, 46(1):51–73, 2010.

[9] H. Fu, Z. Li, and C. Wu. Core-selecting auction design
for dynamically allocating heterogeneous vms in cloud
computing. Submitted to INFOCOM 2014.

[10] G. Gens and E. Levner. Complexity of approximation
algorithms for combinatorial problems: a survey. ACM
SIGACT News, 12(3):52–65, 1980.

[11] P. Godfrey, M. Schapira, A. Zohar, and S. Shenker.
Incentive compatibility and dynamics of congestion
control. In ACM SIGMETRICS Performance
Evaluation Review, pages 95–106, 2010.

[12] R. Lavi and N. Nisan. Competitive analysis of

incentive compatible on-line auctions. In Proceedings
of the 2nd ACM Conference on Electronic Commerce,
pages 233–241. ACM, 2000.

[13] R. Lavi and C. Swamy. Truthful and near-optimal

mechanism design via linear programming. In Proc. of
FOCS, pages 595–604, 2005.

[14] D. Lehmann, L. I. O´callaghan, and Y. Shoham. Truth

revelation in approximately eﬃcient combinatorial
auctions. Journal of the ACM (JACM), 49, 2002.

[15] R. T. B. Ma, S. C. M. Lee, J. C. S. Lui, and D. K. Y.
Yau. A game theoretic approach to provide incentive
and service diﬀerentiation in p2p networks. In ACM

SIGMETRICS Performance Evaluation Review, pages
189–198, 2004.

[16] X. Meng, V. Pappas, and L. Zhang. Improving the

scalability of data center networks with traﬃc-aware
virtual machine placement. In INFOCOM, 2010
Proceedings IEEE, pages 1–9. IEEE, 2010.

[17] A. Mu’Alem and N. Nisan. Truthful approximation

mechanisms for restricted combinatorial auctions.
Games and Economic Behavior, 64(2):612–631, 2008.

[18] N. Nisan. Algorithmic game theory. Cambridge

University Press, 2007.

[19] D. Niu, C. Feng, and B. Li. Pricing cloud bandwidth

reservations under demand uncertainty. In ACM
SIGMETRICS Performance Evaluation Review, pages
151–162, 2012.

[20] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.

Computationally manageable combinational auctions.
Management science, 44(8):1131–1147, 1998.

[21] G. Shanmuganathan, A. Gulati, and P. Varman.

Defragmenting the cloud using demand-based resource
allocation. In ACM SIGMETRICS Performance
Evaluation Review, pages 67–80, 2013.

[22] W. Shi, L. Zhang, C. Wu, Z. Li, and F. C. M. Lau. An

online auction framework for dynamic resource
provisioning in cloud computing. Technical report,
2014. http://i.cs.hku.hk/~cwu/papers/
sigmetrics14-techreport.pdf.

[23] W. Vickrey. Counterspeculation, auctions, and

competitive sealed tenders. The Journal of Finance,
16(1):8–37, 1961.

[24] Q. Wang, K. Ren, and X. Meng. When cloud meets
ebay: Towards eﬀective pricing for cloud computing.
In Proc. of IEEE INFOCOM, pages 936–944, 2012.

[25] W. Wang, B. Liang, and B. Li. Revenue maximization
with dynamic auctions in iaas cloud markets. In Proc.
IEEE ICDCS, 2013.

[26] C. Wu, Z. Li, X. Qiu, and F. C. M. Lau.

Auction-based p2p vod streaming: Incentives and
optimal scheduling. ACM Transactions on Multimedia
Computing, Communications and Applications, 2012.
[27] S. Zaman and D. Grosu. Combinatorial auction-based

mechanisms for vm provisioning and allocation in
clouds. In IEEE/ACM CCGrid, pages 729–734, 2012.

[28] H. Zhang, B. Li, H. Jiang, F. Liu, A. V. Vasilakos,

and J. Liu. A framework for truthful online auctions
in cloud computing with heterogeneous user demands.
In Proc. of IEEE INFOCOM, 2013.

[29] L. Zhang, Z. Li, and C. Wu. Dynamic resource
provisioning in cloud computing: A randomized
auction approach. In Proc. of IEEE INFOCOM, 2014.

[30] Y. Zhu, B. Li, and Z. Li. Truthful spectrum auction

design for secondary networks. In Proc. of IEEE
INFOCOM, 2012.

APPENDIX
A. PROOF OF THEOREM 1

Proof. We prove the correctness and the competitive-

ness of Aonline by proving three claims:

1. At the end of the algorithm, it produces feasible solu-

tion for dual (2).

b(t)
n,ky(t)

n,k ≤ Bn(1 + Bmax)

(8)

ln(1 +

b(t)
n,kn
Bn

) ≥ b(t)

n,kn
Bn

· ln(1 + Bmax)

Bmax

=

b(t)
n,kn
Bn

ln γ

2. Let P (t) be the value of the objective function in (1)
after t-th iteration, ∆P (t) = P (t) − P (t−1), the same
for ∆D(t) in dual (2). Then Aonline satisﬁes ∆D(t) ≤
ν + 1
γ−1

∆P (t), at any round ∀t ∈ [T ].

(cid:16)

(cid:17)

3. The algorithm produces an almost feasible solution for
primal (1). Speciﬁcally, its outputs y(t)
n,k satisfy (1a),
(1c) and (1d). For constraint (1b), we achieve a slightly
weaker property : For all user n ∈ [N ],

(cid:88)

(cid:88)

t∈[T ]

k∈[K]

whether x(t−1)

Proof of (1): Since w(t)
(cid:88)
< 1 or x(t−1)
c(t)
n,k,rz(t)

(cid:88)

s(t)
n +

n

n

r∈[R]

q∈[Q]

n,k(1 − x(t−1)

n,k ≥ b(t)
) no matter
≥ 1, constraint (4a) guarantees

n

q,r ≥ b(t)

n,k(1 − x(t−1)

n

)

Also notice x(t)

Proof of (2): At time t, ∆P (t) =(cid:80)

n is non-decreasing with t, so (2a) holds.

n∈N b(t)

n,kn

.

∆D(t) =

Bn(x(t)

n − x(t−1)

n

n∈N

(cid:88)
(cid:88)
≤ (cid:88)

=

n∈N

n∈N

b(t)
b(t)

n,kn

n,kn

x(t−1)

n

+

x(t−1)

n

+

) + d

b(t)
n,kn
γ − 1

b(t)
n,kn
γ − 1

 + d
 + νp
(cid:19)

Substitute (cid:80)
∆D(t) ≤ (cid:88)
(cid:18)

n∈N

(cid:18)

ν +

1

γ − 1

(cid:19)

≤

ν +

1

γ − 1

∆P (t)

n∈N b(t)

n,kn

(1 − x(t−1)

n

) for p, we have:

− (ν − 1)x(t−1)

n

b(t)
n,kn

Proof of (3):

Constraints (1a), (1c), (1d) are guar-
anteed by the constraints in (3).
In order to analyze the
property about constraint (1b), we prove the following in-
equality: ∀n ∈ [N ], t(cid:48) ∈ [T ],
(cid:80)

(cid:80)t(cid:48)

t=1

k∈[K] b

(t)
n,k

y

(t)
n,k

 , 0 ≤ t(cid:48) ≤ T

γ

− 1

(9)

Bn

x(t(cid:48))
n ≥ 1

γ − 1

We prove (9) by induction. (9) holds for t(cid:48) = 0 appar-
ently. Suppose it holds for t(cid:48) − 1, then for t(cid:48): If n /∈ N , the
inequality holds since both sides are still the same value at
time t(cid:48) − 1. If n ∈ N :

 +

1 +
γ

b(t)
n,kn
Bn

(cid:80)t(cid:48)−1

t=1

(cid:80)

b(t)
n,kn

Bn(γ − 1)

1 +

k∈[K] b

(t)
n,k

y

(t)
n,k

Bn

n = x(t−1)
x(t)

n

=

1

γ − 1

Comparing this with our target (9), obviously we only

need to show: 1 +

b

(t)
n,kn
Bn

≥ γ

b

(t)
n,kn
Bn . We utilize the inequality:

ln(1 + x)

x

≥ ln(1 + y)

y

, ∀0 ≤ x ≤ y ≤ 1

Since

b

(t)
n,kn
Bn

≤ Bmax, we have:

b

b

≥ γ

(t)
n,kn
Bn

(t)
n,kn
Bn , and we prove (9).

user n, suppose t(cid:48) is the ﬁrst time (cid:80)t(cid:48)
Thus, 1 +
Now we utilize the inequality (9) to prove (8). For some
n,k ≥
Bn. Then by (9), x(t(cid:48))
n ≥ 1. The algorithm never gives
n,k in Around will be set to 0. So(cid:80)T
user n any new bundles once xn ≥ 1, since the weight
(cid:80)
(cid:80)t(cid:48)
w(t)
n,k =
n,k. We know t(cid:48) is the ﬁrst time user n’s
(cid:88)
t(cid:48)−1(cid:88)

total winning bids exceeding its budget Bn. So

(cid:80)
(cid:80)

k∈[K] b(t)

k∈[K] b(t)

k∈[K] b(t)

n,ky(t)

n,ky(t)

n,ky(t)

t=1

t=1

t=1

b(t)
n,ky(t)

n,k < Bn, then:

t=1

k∈[K]

T(cid:88)

(cid:88)

t=1

k∈[K]

b(t)
n,ky(t)

n,k =

t(cid:48)−1(cid:88)

(cid:88)

n,k +

t=1

n,ky(t)
b(t)
k∈[K]
b(t(cid:48))
≤ Bn + max
k∈[K]
≤ Bn(1 + Bmax)

n,k

(cid:88)

k∈[K]

b(t(cid:48))
n,k y(t(cid:48))

n,k

Finally we put the above 3 claims together and calcu-
late the actual total social welfare. Since the increment of
valuation is the minimum between user’s valuation and his
remaining budget, total social welfare should be:

(cid:88)
≥ (cid:88)

n∈[N ]

(cid:88)

(cid:88)

k∈[K]
t∈[T ]
b(n)
n,ky(n)

min{Bn,

(cid:88)

(cid:88)

k∈[K]

n∈[N ]

t∈[T ]
= P (T )/(1 + Bmax)

n,k}
n,ky(n)
b(n)

n,k/(1 + Bmax)

By claim 2: ∆D(t) ≤ (cid:16)
D(0) = 0 , we have D(T ) ≤(cid:16)

(cid:17)

(cid:17)

ν + 1
γ−1
ν + 1
γ−1

welfare is at least D(T )/[(1+Bmax)(ν + 1
approximation ratio of Aonline is (1 + Bmax)(ν + 1

γ−1 ) .

∆P (t), and recall P (0) =

P (T ). Thus the social
γ−1 )]. By duality, the

 − 1


b(t)
n,kn
Bn

B. THE SEPARATION ORACLE AND PROOF

OF LEMMA 1

First we describe the construction of the separation oracle.
In each iteration of the ellipsoid method, a possible solution
of (7) {v(t)
n,k}, τ is generated, and is given as the input of the
severation oracle. The separation oracle we present in Alg.
5 judges whether this solution is feasible, i.e., not conﬂict
with any constraints in (7a). And if it is not feasible, the

An Online Auction Framework for Dynamic Resource

Provisioning in Cloud Computing

Weijie Shi

Dept. of Computer Science
The University of Hong Kong

wjshi@cs.hku.hk

Linquan Zhang

Dept. of Computer Science

University of Calgary

linqzhan@ucalgary.ca

Chuan Wu

Dept. of Computer Science
The University of Hong Kong

cwu@cs.hku.hk

Zongpeng Li

Dept. of Computer Science

University of Calgary

zongpeng@ucalgary.ca

Francis C.M. Lau

Dept. of Computer Science
The University of Hong Kong

fcmlau@cs.hku.hk

e−1 (cid:39) 3.30 in social welfare in typical scenarios.

ABSTRACT
Auction mechanisms have recently attracted substantial at-
tention as an eﬃcient approach to pricing and resource al-
location in cloud computing. This work, to the authors’
knowledge, represents the ﬁrst online combinatorial auction
designed in the cloud computing paradigm, which is gen-
eral and expressive enough to both (a) optimize system eﬃ-
ciency across the temporal domain instead of at an isolated
time point, and (b) model dynamic provisioning of hetero-
geneous Virtual Machine (VM) types in practice. The ﬁ-
nal result is an online auction framework that is truthful,
computationally eﬃcient, and guarantees a competitive ra-
tio ∼ e+ 1
The framework consists of three main steps: (1) a tailored
primal-dual algorithm that decomposes the long-term opti-
mization into a series of independent one-shot optimization
1
e−1 in competitive ra-
problems, with an additive loss of
tio, (2) a randomized auction sub-framework that applies
primal-dual optimization for translating a centralized co-
operative social welfare approximation algorithm into an
auction mechanism, retaining a similar approximation ra-
tio while adding truthfulness, and (3) a primal-dual update
plus dual ﬁtting algorithm for approximating the one-shot
optimization with a ratio λ close to e. The eﬃcacy of the
online auction framework is validated through theoretical
analysis and trace-driven simulation studies. We are also in
the hope that the framework, as well as its three indepen-
dent modules, can be instructive in auction design for other
related problems.

Categories and Subject Descriptors
C.4 [Performance of Systems]: Design studies; Modeling
techniques; I.1.2 [Algorithms]: Analysis of algorithms

Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
SIGMETRICS’14, June 16–20, 2014, Austin, Texas, USA.
Copyright 2014 ACM 978-1-4503-2789-3/14/06 ...$15.00.
http://dx.doi.org/10.1145/2591971.2591980 .

General Terms
Algorithms; Design; Economics

Keywords
Cloud Computing; Combinatorial Auction; Resource Allo-
cation; Pricing; Online Algorithms; Truthful Mechanisms

1.

INTRODUCTION

Cloud computing has recently emerged as a new comput-
ing paradigm that enables prompt and on-demand access
to computing resources. As exempliﬁed in Amazon EC2 [1]
and Microsoft Azure [4], cloud providers invest substantially
into their datacenter infrastructure, providing a virtually un-
limited “sea” of CPU, RAM and storage resources to cloud
users, often assisted by virtualization technologies. The elas-
tic and on-demand nature of cloud computing assists cloud
users to meet their dynamic and ﬂuctuating demands with
minimal management overhead, while the cloud ecosystem
as a whole achieves economies of scale through cost amorti-
zation. Currently, most cloud providers adopt a ﬁxed price
policy and charge users a ﬁxed amount per-VM usage. For
example, Table 1 shows the available VM types at Amazon
EC2, and their hourly prices at diﬀerent datacenters. De-
spite their apparent simplicity, ﬁxed-price policies are inher-
ently lack of market agility and eﬃciency, failing to rapidly
adapt to realtime demand-supply relation changes. Conse-
quently, overpricing and underpricing routinely occur, which
either dispel or undercharge the users, jeopardizing overall
system social welfare as well as the providers’ revenue.

Table 1: Amazon EC2 VM Instances

VM Type CPU∗ RAM Disk
Virginia Ireland Tokyo
$0.175
$0.120
3.75GB 410GB
m1.medium 2
$0.350
840GB
7.5GB
4
m1.large
$0.240
1.68TB $0.480
m1.xlarge
8
15GB
$0.700
$0.185
350GB
1.7GB
c1.medium 5
$0.145
c1.xlarge
$0.740
1.68TB $0.580
7GB
m2.2xlarge
34.2GB 850GB
$0.820
$1.101
∗ EC2 compute units

$0.130
$0.260
$0.520
$0.165
$0.660
$0.920

20
13

Towards eﬀectively discovering the market value of VMs,
auction-based mechanisms have been at the focal point of
recent literature on cloud resource allocation and pricing [9,

28]. For example, Spot Instance [2] is a ﬁrst-step attempt to
apply the auction mechanism on Amazon EC2, which was
enhanced by subsequent work [24, 28]. A series of recent
work further study auction mechanism design in cloud mar-
kets from diﬀerent perspectives [27, 29, 25]. Unfortunately,
all existing cloud auction mechanisms either consider one-
round auctions only, or model VMs as type-oblivious com-
modities and fail to account for the providers’ ability to dy-
namically assemble VMs.
[Cloud auctions should be online.] Real-world cloud re-
source transactions happen either when customer demands
arrive or cloud resources become available, and hence is
modelled more naturally by an online auction that incorpo-
rates the time dimension. Most cloud computing customers,
enterprise or individual, are on a pre-allocated budget for a
given time period (e.g., a year or a month like that in an
ad-auction [7]). Thus a customer’s purchase desire drasti-
cally declines over time, which needs to be considered for a
practical auction mechanism. However, most existing cloud
auctions focus on a single-round auction only, and ignore
such temporal correlation in decision making [29].
[Cloud auctions should be combinatorial.] A cloud
computing job in practice often demands a bundle of het-
erogenous VM instances for its successful execution, and
hence a cloud auction is naturally a combinatorial auction.
For example, a social game application that consists of a
front-end web server layer, a load balancing layer and a
back-end data storage layer is best served by a combina-
tion of VMs that are intended for communication-intensive,
computation-intensive and storage-intensive tasks, respec-
tively. Such combinatorial VM auctions represent a dra-
matic departure of most existing VM auction designs that
assume VMs are type-oblivious commodities, in that all VMs
are essentially of the same type, and hence are substitutable
or substitutable up to a simple multiplicative factor. Em-
bracing heterogeneous VM types in the model further brings
about the opportunity of considering dynamic resource pro-
visioning: decisions on VM assembling, which organizes the
CPU, RAM and Disk resource pools into typed VM in-
stances, are no longer made randomly a priori [9], but made
dynamically upon receiving user bids. Dynamic resource
provisioning enables higher eﬃciency in cloud resource uti-
lization, higher seller revenue for the provider, and higher
social welfare for the entire cloud system.

This work generalizes and subsumes existing literature on
cloud auctions by designing the ﬁrst online combinatorial
auction in which VMs of heterogenous types are allocated in
multiple consecutive time slots. The ﬁnal result is an online
auction framework that simultaneously guarantees the fol-
lowing properties. (i) Truthfulness, the holy grail of auction
mechanism design. It ensures that economically-motivated
selﬁsh buyers are automatically elicited to reveal their true
valuations of the VMs they demand, in the bids submitted.
This simpliﬁes analysis of the resulting auction in theory,
and increases the predicability of auction outcomes in prac-
tice. (ii) Combinatorial auctions, supporting heterogeneous
VM types located at diﬀerent datacenters. Besides hetero-
geneity in their types, another dimension of VM diversity
may arise due to their geographical locations (assuming mul-
tiple datacenters). A combinatorial auction is hence neces-
sary. (iii) Dynamic resource provisioning. The number of
instances of each VM type is not predeﬁned, but dynami-
cally adjusted as part of the auction mechanism, tailored to

realtime user demand. (iv) Online auction: In commercial
cloud platforms, auctions are executed repeatedly and the
prices change termly. Each user is subject to a practical
budget limitation for a given time period. Our online auc-
tion models a long time auction over multiple rounds that
are coupled together by customer budgets. A competitive
ratio of e + 1
i.e., our online auction achieves a long-term social welfare
that is at least a 1

1−e (cid:39) 3.30 is guaranteed in typical scenarios,

3.30 fraction of the oﬄine optimum.

Our proposed online auction framework consists of three
main modules: (A) translating online optimization into a
series of one-round optimization problems, (B) translating
an approximation algorithm for one-round optimization into
a truthful auction, and (C) designing an eﬀective approxi-
mation algorithm for one-round optimization.

First, we formulate a linear integer program that charac-
terizes the long-term social welfare optimization problem in
the cloud market for VMs, and formulate the dual LP of its
LP relaxation (without the integer constraints). A tailored
primal-dual algorithm iteratively adjusts a dual variable cor-
responding to each customer’s budget, acting as a shadow
price that signals how “tight” the latter is. A series of one-
round combinatorial VM auctions are then executed under
a ﬁxed shadow price vector. Such primal-dual decoupling
of the auction rounds admits a rather intuitive interpreta-
tion: the algorithm strikes to avoid prematurely depleting a
user’s budget, and gives higher priority to cloud customers
with low budget pressures during each auction round. As a
result, we prove that the decomposition introduces an addi-
tive loss to the competitive ratio bounded by 1

Second, for each one-round combinatorial auction prob-
lem, we employ a randomized auction sub-framework, which
exploits the underlying packing property of one-round so-
cial welfare maximization, and translates any centralized co-
operative approximation algorithm into an auction, inherit-
ing the same approximation ratio while adding truthfulness.
At the core of this translation is a primal-dual optimization
based decomposition technique that decomposes an optimal
fractional solution to one-round social welfare maximization
into a convex combination of integral solutions, recently de-
veloped in the literature of theoretical computer science [13],
and successfully applied in the literature of computer net-
working [30]. We also propose a new technique which can
signiﬁcantly improve the performance of this translation.

e−1 .

Third, we design a speciﬁc approximation algorithm for
one-round VM allocation, by applying iterative primal-dual
solution updates followed by dual ﬁtting. The resulting al-
gorithm is polynomial-time computable, and guarantees an
approximation ratio λ that approaches e in practical sce-
narios. Combining all three modules together, the overall
competitive ratio of the resulting online auction framework
is bounded by e + 1
that the online auction framework proposed in this work, as
well as its three components, may shed light to the design
of auction mechanisms in related problem settings.

e−1 (cid:39) 3.30 in typical scenarios. We hope

In the rest of the paper, we discuss related work in Sec. 2,
and deﬁne the problem model in Sec. 3. Sec. 4 and Sec. 5
present the online algorithm framework, the auction algo-
rithm and the single round allocation algorithm. Simula-
tions are presented in Sec. 6. Sec. 7 concludes the paper.

2. RELATED WORK

Resource allocation in computing and communication sys-
tems is a classic problem that has been extensively stud-
ied, including from a game theoretical view by analyzing
the incentive compatibility of the allocation algorithm [11]
[15]. An alternative approach is designing pricing mech-
anisms with maximized social welfare [19]. Auctions are
mechanisms that combine these two approaches and simul-
taneously target both truthfulness and economic eﬃciency.
Classic applications of auctions are found in a wide range
of research areas, such as network bandwidth allocation [26]
and wireless spectrum allocation [30].

The celebrated VCG mechanism [23] is a well known type
of auctions. It is essentially the only type of auction that
simultaneously guarantees both truthfulness and absolute
economic eﬃciency (social welfare maximization), through
calculating the optimal allocation and a carefully designed
pricing rule. However, when the underlying allocation prob-
lem is NP-hard, which is common for combinatorial auc-
tions [20], VCG becomes computationally infeasible. When
polynomial-time approximation algorithms are applied to
solving the underlying social welfare maximization problem,
VCG loses its truthfulness property [17]. One usually needs
to custom design a payment rule to work in concert with
the approximation algorithm at hand, to achieve truthful-
ness; for example, this can be done by exploiting the concept
of critical bids [14]. Another relatively new alternative is to
resort to the LP decomposition technique [13], as done in
this work, which is universally applicable to problems with
a packing or covering structure.

√

Recently, a series of auction mechanisms are designed for
VM allocation in cloud computing. Wang et al. [24] apply
the critical value method, and derive a mechanism that is
collusion-resistant, an important property in practice. Yet
their work, like many others, considers only one-round auc-
k),
tions; and their algorithm has a competitive ratio O(
where k is the number of VM instances. Zaman and Grosu
[27] study the modeling of VM provisioning, but their model
does not include dynamic VM assembling. Shanmuganathan
et al. [21] introduce the concept of computing resources bun-
dles in VM allocation. Zhang et al. [29] is among the ﬁrst
to study dynamic VM provisioning, and designs a truthful
single round auction using the LP decomposition method.
However, our work is more advanced than theirs in two as-
pects: (1) We consider the problem over a period of time,
instead of just one round, and serve cloud users in an online
manner. Our mechanism more closely resembles a real-world
cloud market in practice. (2) We not only apply but also pro-
pose improvements to the decomposing method, which can
improve the performance of the online auction in practice.
Extending single round truthful auctions into online auc-
tions in a straightforward way usually breaks the truthful-
ness property [18]. The lack of future information brings
a key challenge in pursuing truthfulness. For example, the
VCG auction does not directly work in the online setting,
since the optimal allocation for the future cannot be cal-
culated, even given unlimited computational resources. A
known technique for achieving truthfulness in online auc-
tions is based on the concept of of a supply curve [12], as
applied by Zhang et al.
[28] in their design of an online
cloud auction algorithm. The bidding language and the user
characteristic proposed in their work are novel, and capture
the heterogeneous demands in cloud market. However, they

only consider a single type of VMs, signiﬁcantly simplifying
the underlying social welfare maximization. In absence of
multiple VM types, their model naturally ignores the dy-
namic provisioning problem. Wang et al. propose an online
auction for cloud markets [25], and their model also focuses
on one type of VMs only.

There have been some proposals considering bandwidth
allocation in datacenters. Ballani et al.
[5] propose Okto-
pus, a system that provides virtual network abstractions to
the cloud users. Bansal et al.
[6] discuss the allocation of
VMs while considering network congestion. Meng et al. [16]
take both intra- and inter-datacenter traﬃc into considera-
tion in deciding the placement of VMs. Allocating resources
including both network bandwidth and computing resources,
such as CPU and storage, makes the problem more diﬃcult
than focusing on only one of them. We leave the possible
discussions on bandwidth auctions as future work.

3. PROBLEM MODEL
3.1 The Cloud System

We consider a cloud spanning Q geographically distributed
datacenters, each with a pool of R types of resources in-
cluding CPU, RAM, and disk storage that can be dynam-
ically assembled into M diﬀerent types of virtual machines
(VMs), for lease to cloud users. Let [X] denote the integer
set {1, 2, . . . , X}. Each VM of type m ∈ [M ] is constituted
by αm,r units of type-r resource, for all r ∈ [R]. There are
N users of the cloud system, which request VMs of diﬀerent
types to execute their jobs. The cloud provider acts as the
auctioneer and leases VMs to the users through auctions.
The system runs in a time-slotted fashion within a span of
1, 2, . . . , T , where T is a potentially large number. We sup-
pose the available amounts of resources at each datacenter
are time-varying, i.e., there are A(t)
q,r units of type-r resource
in datacenter q at time t ∈ [T ], whose value may change from
one time slot to another.1 In each time slot, one round of the
auctions is carried out, where the cloud provider decides the
VM allocation for the current time slot based on user bids.
The terms time slot and round are used interchangeably.

The N cloud users are bidders in the auctions, each sub-
mitting a bid containing K optional bundles in each round.
A bundle consists of a list of desired quantities of VMs of
diﬀerent types, as well as the bidder’s valuation for the bun-
dle. Speciﬁcally, let d(t)
n,k,m,q denote the number of type-m
VMs in datacenter q that user n speciﬁes in its k-th bun-
dle in time slot t, and b(t)
n,k be its valuation for this k-th
bundle in t. The k-th bundle in the bid of user n in the
auction at t is described by a (M × Q + 1)-tuple of elements
n,k,m,q,∀m ∈ [M ],∀q ∈ [Q], and b(t)
d(t)
n,k. The cases where a
user may join and leave (intermittent bidding) or may bid a
smaller number of bundles than K, are all subsumed by our
bid model by allowing empty bundles in the bids.

In each auction, upon receiving users’ bids, the cloud
provider computes its resource allocation and produces the
n,k ∈ {0, 1},∀n ∈ [N ],∀k ∈ [K], where y(t)
auction results, y(t)
n,k
is 1 if user n wins bundle k and 0 otherwise, as well as user
n’s payment Π(t)
n , for actually acquiring VMs in its winning
1The varying amounts of resources may be caused by re-
moval or addition of servers, due to failure and recovery, or
potential reservation or release of resources for special pur-
poses, e.g., as part of a hybrid cloud of an enterprise.

Table 2: Notation

N # of users
T
# of time slots
M # of VM types

[X]
R
Q

integer set {1, 2, . . . , X}
# of resource types
# of datacenters

optimal fractional solution

user n’s valuation for its kth bundle at t

user n wins its kth bundle at time t or not

available resource r at datacenter q at time t

amount of resource r at dc q in n’s kth bundle at t
user n’s total budget

# of optional bundles in each bid
amount of resource r in each type-m VM

K
αr
m
A(t)
q,r
b(t)
n,k
d(t)
n,k,m,q # of type-m VM at dc q in n’s kth bundle at t
c(t)
n,k,r,q
Bn
y(t)
n,k
y(t)F
n,k
y(t)l
n,k
Π(t)
n
Π(t)F
n
Π(t)l
n
βl
u(t)
n
ν
λ
w(t)
n,k
Bmax

user n’s payment at time t under fractional VCG
user n’s payment at time t under allocation y(t)l
probability to choose integer solution y(t)l
user n’s utility at time t
the competitive ratio of Around
the approximation ratio of Alg. 2

the reduced valuation of n’s kth bundle at time t
max ratio: a single bundle bid / a user’s budget
(1 + Bmax)1/Bmax

user n’s payment at time t

an integer solution to (3)

γ

bundle. We assume that a user can win at most one bundle
among its K optional bundles in each round of the auctions
(given that any need for combining two or more bundles can
be expressed as a separate bundle already). In addition, the
VM demands in each bundle cannot be supplied partially,
i.e., the cloud provider either provides all the required VMs
in a bundle to the bidder or rejects the bundle.

Let u(t)

n denote the utility function of user n in time slot
t, which is decided by its valuations of the bundles and its
payment at t. We will present the concrete form of the util-
ity function in Sec. 5. We assume user n has a total budget
Bn, which is a bound of its overall payment in the auctions
throughout the system span [T ] under consideration, e.g., a
pre-allocated budget for VM rental over a month or a year,
which is assumed to be public information. A user’s valu-
ations in its bids are independent from its current budget
level, while its current budget level will be taken into con-
sideration at the cloud provider when allocating resources.

We list important notation in this paper in Table 2.

3.2 The Online Auction Problem

We aim to design an online auction mechanism to be
carried out by the cloud provider, which guides resource
allocation in the cloud system in a round-by-round fash-
ion through multiple consecutive rounds. The auction de-
sign targets the following properties. (i) Truthfulness (Def-
inition 1): Bidding true valuations is a dominant strat-
egy at the users, and consequently, both bidding strate-
gies and auction design are simpliﬁed.
(ii) Individual ra-
tionality: Each bidder obtains a non-negative utility by par-
n ≥ 0,
ticipating in the auction in any time slot, i.e., u(t)
∀n ∈ [N ],∀t ∈ [T ]. (iii) Social welfare maximization: The
social welfare in our system is the sum of the cloud provider’s

(cid:80)
(cid:80)

revenue,(cid:80)
(cid:80)
(cid:80)
der truthful bidding),(cid:80)

t∈[T ]
n∈[N ]

t∈[T ]

n∈[N ] Π(t)
k∈[K] b(t)

n,k −(cid:80)
(cid:80)

n , which
equals aggregated user valuation of the winning bundles (un-
n,k. Pay-

k∈[K] b(t)

n,ky(t)

n∈[N ]

t∈[T ]

t∈[T ]

n∈[N ] Π(t)

n,ky(t)

(cid:80)

ment from the users and revenue received by the cloud provider
cancel out each other.

n , and all the users’ utility gain,

(cid:80)

Deﬁnition 1. (Truthfulness) The auction mechanism is truth-
n,k,m,q,∀m, q, k,

ful if for any user n at any time t, declaring a bid that truth-
fully reveals its requirements of VM quantities, d(t)
and its valuations of bundles b(t)
expected utility, regardless of other users’ bids.

n,k,∀k, always maximizes its

We ﬁrst formulate below an oﬄine social welfare optimiza-
tion problem which provides the “ideal” optimal resource al-
location strategies for the cloud provider to address users’
VM demands in the entire system lifespan [T ], assuming
truthful bids are known. Let c(t)
n,k,m,qαm,r be
the amount of type-r resource at datacenter q required in
user n’s k-th bundle.

m d(t)

n,k,r,q =(cid:80)
(cid:88)
(cid:88)

(cid:88)

b(t)
n,ky(t)

n,k

(1)

maximize

subject to (cid:88)

(cid:88)
(cid:88)

k∈[K]

(cid:88)

n∈[N ]

k∈[K]

(cid:88)

k∈[K]
b(t)
n,ky(t)

t∈[T ]
c(t)
n,k,r,qy(t)

t∈[T ]

n∈[N ]

k∈[K]

n,k ≤ 1, ∀n ∈ [N ], t ∈ [T ],
y(t)

n,k ≤ Bn, ∀n ∈ [N ],

(1a)

(1b)

(1c)

(1d)

n,k ≤ A(t)

q,r, ∀q ∈ [Q], r ∈ [R], t ∈ [T ],

n,k ∈ {0, 1}, ∀n ∈ [N ], k ∈ [K], t ∈ [T ].
y(t)

Constraint (1a) speciﬁes that each user can win at most
one bundle each round.
(1b) is the budget constraint at
each user. (1c) limits the overall demand for each type of
resource in the winning bundles by the amount available.

Introducing dual variable vectors s, x, and z to constraints
(1a), (1b) and (1c) respectively, and ignore the binary vari-
able constraint (1d) temporarily, we can formulate the dual
of the resulting linear program, to be used in the primal-dual
algorithm design in Sec. 4:

(cid:88)

(cid:88)

(cid:88)

(cid:88)

(cid:88)

min

Bnxn +

s(t)
n +

n∈[N ]

t∈[T ]

q∈[Q]

r∈[R]

t∈[T ]

(cid:88)

n∈[N ]

Aq,r(t)z(t)
q,r

(2)

subject to

b(t)
n,kxn + s(t)

(cid:88)

(cid:88)

(2a)

q,r ≥ b(t)

n +

r∈[R]

q∈[Q]

c(t)
n,k,r,qz(t)
∀n ∈ [N ], k ∈ [K], t ∈ [T ],
q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R], t ∈ [T ].

n,k

n , z(t)

xn, s(t)
(2b)
To derive an optimal solution to (1), complete knowledge
about the system over its entire lifespan is needed, which
is apparently not practical.
In a dynamic cloud system,
the provider should allocate resources on the ﬂy, based on
the current amount of available resources, A(t)
q,r’s, and users’
bidding bundles including resource demands d(t)
n,k,m,q’s and
valuations b(t)
n,k’s, which are not known a priori. We seek to
design an online auction mechanism for realtime resource al-

location, which also guarantees truthful bidding. We achieve
the goals in two steps. First, in Sec.4, we assume that a
truthful auction mechanism to be carried out in each time
slot is known, and guarantees an approximation ratio ν, and
propose an online algorithm framework that produces a com-
petitive ratio of (1 + Bmax)(ν + 1
γ−1 ) as compared to the
oﬄine optimum. Second, in Sec. 5, we design a single-round
randomized auction, which achieves the approximation ratio
of ν as well as individual rationality and truthfulness.

only guarantees individual rationality and truthfulness, but
also employs a primal-dual approximation algorithm that
solves problem (3) and (4) to decide resource allocation in
polynomial time with a small approximation ratio. We delay
the discussion of the auction mechanism to Sec. 5, but ﬁrst
utilize its properties when analyzing our online algorithm
framework. We will show that given a competitive ratio ν
achieved by the one-round auction mechanism, our online
algorithm framework achieves a good competitive ratio.

4. AN ONLINE ALGORITHM FRAMEWORK

We design an online algorithm framework Aonline as shown
in Algorithm 1, which solves the oﬄine optimization prob-
lem (1) and its dual (2), using a subroutine Around running
at each time slot. We next discuss the one-round resource
allocation problem to be solved by Around, as well as the
design rationale of the online algorithm framework.
4.1 One-Round Resource Allocation

Assuming truthful bids are known, the one-round social
welfare maximization problem at time t is as follows, which
includes the constraints from the oﬄine optimization prob-
lem (1) related to the current time slot, and excludes the
user budget constraints (dealt with in the online algorithm
framework instead). In the optimization below, w(t)
n,k, a re-
duced valuation of user n for bundle k from the actual val-
uation b(t)
n,k in its bid according to the level of its remaining
budget, is used in the objective function. The rationale will
be detailed in Sec. 4.2. Given w(t)
n,k, the cloud provider’s cur-
rent resource supplies A(t)
q,r’s, and users’ resource demands
n,k,r,q’s, ∀n, k, r, q, the one-round optimization problem de-
c(t)
cides the optimal resource allocation y(t)

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k,∀n, k, at t.
n,ky(t)
w(t)

n,k

(3)

(3a)

(3b)

(3c)

maximize

subject to (cid:88)
(cid:88)

(cid:88)

k∈[K]
c(t)
n,k,r,qy(t)

n∈[N ]

k∈[K]

n,k ≤ 1 ∀n ∈ [N ]
y(t)

n,k ≤ A(t)

q,r

∀q ∈ [Q], r ∈ [R]

n,k ∈ {0, 1} ∀n ∈ [N ], k ∈ [K]
y(t)

(cid:88)

n∈[N ]

(cid:88)

(cid:88)

Adopting the same dural variables as in the dual of (1)
and omitting constraint (3c) temporarily, we formulate the
dual of LP (3):

s.t.
s(t)
n +

minimize

(cid:88)

(cid:88)

q∈[Q]

r∈[R]
s(t)
n , z(t)

s(t)
n +

A(t)

q,rz(t)
q,r

(4)

c(t)
n,k,r,qz(t)

q,r ≥ w(t)

r∈[R]

q∈[Q]
n,k,∀n ∈ [N ], k ∈ [K], (4a)

q,r ≥ 0, ∀n ∈ [N ], q ∈ [Q], r ∈ [R].

(4b)

The primal problem (3) is a special case of the multi-
dimensional multiple-choice 0-1 knapsack problem [8], which
is both NP-hard and more strongly, has no fully polynomial-
time approximation schemes unless P=NP [10]. What we
will pursue in Around is an auction mechanism, which not

4.2 The Online Algorithm

When a good approximation algorithm for one-round re-
source allocation (with budget constraint relaxed) is in place,
the diﬃculty of designing an online algorithm to achieve a
good competitive ratio, deﬁned as the maximum ratio be-
tween the oﬄine optimal social welfare derived by solving
(1) exactly and the social welfare produced by the online
algorithm, arises from the budget constraint at each user.
The budget limits the bundles a user can acquire over the
T rounds of auctions, leading to diﬀerent amounts of overall
social welfare when the budget is spent in diﬀerent rounds.
The intuition we follow in designing the online algorithm
is that, ineﬃciency in social welfare may appear when a
user’s budget runs out at an early stage, since its future bids
become invalid after its budget depletion, narrowing down
possible future resource allocation decisions at the cloud
provider, prohibiting larger social welfare. The ideal sce-
nario is that each user’s budget can last for all the T rounds
of auctions, making it possible for the cloud provider to ex-
plore the best resource allocation strategies over the entire
span, to approach the best overall social welfare.

n

n,k = b(t)

n,k of each bundle, w(t)

Under this intuition, we should be cautious when win-
ning a bundle suddenly exhausts a user’s remaining budget.
Our main idea in the online algorithm in Alg. 1 is to asso-
ciate the resource allocation in each round with the users’
remaining budgets. We introduce an auxiliary variable x(t)
n
for each user n ∈ [N ], whose value starts at 0, increases
with the decrease of the remaining budget of the user, and
reaches 1 when the budget is exhausted. Instead of the ac-
n,k(1 − x(t−1)
tual valuation b(t)
)
is used in the one-round resource allocation Around as in
(3), such that the bid from a user with a smaller remaining
budget will be evaluated less at the cloud provider, lead-
ing to a lower chance of acquiring a bundle. A user’s bud-
get lasts for a longer period of time as a result. x(t)
n is
updated after each round of resource allocation in Lines
Bmax .
7 and 10 of Algorithm 1, where γ = (1 + Bmax)
n,k/Bn}, which is the max-
Bmax = maxn∈[N ],t∈[T ],k∈[K]{b(t)
imum ratio between the valuation of any bundle and the
corresponding user’s budget. We consider Bmax (cid:28) 1, given
that users typically do not put a large proportion of their
total budget on one bundle in one round. x(t)
n is increased if
user n wins a new bundle in round t (Line 7) — thus user n’s
remaining budget decreases, and remains unchanged other-
wise (Line 10). The increment in Line 7 is carefully com-
puted (see proof of Thm. 1), such that the budget constraint
(1b) is guaranteed over the T rounds of online auctions. We
set dual variable xn in the oﬄine dual problem (2), asso-
ciated with constraint (1b), to the value of the auxiliary
variable x(t)
n after T rounds (Line 13). In this way, the ad-
justment of x(t)
n in each round can be understood as the

1

adjustment of the dual variable xn towards an optimal so-
lution to the oﬄine dual problem (2).
Algorithm 1 The Online Algorithm Framework Aonline
1: x(0)
2: // Loop for each time slot
3: for all 1 ≤ t ≤ T do
4:

n ← 0,∀n ∈ [N ]

(cid:40)

≥ 1

if x(t−1)
) otherwise

n

w(t)

0
n,k(1 − x(t−1)
b(t)

n,k =
Run Around. Let N be the set of winning users, and
kn be the index of their corresponding winning bundle,
for each winning user n ∈ N .

,∀n ∈ [N ], k ∈ [K].

n

for all n ∈ N do

5:

6:
7:

(cid:32)

(cid:33)

1 +

b(t)
n,kn
Bn

+

b(t)
n,kn

Bn(γ − 1)

n ← x(t−1)
x(t)

n

8:
end for
for all n /∈ N do
9:
n ← x(t−1)
x(t)
10:
11:
end for
12: end for
13: xn ← x(T )

n ,∀n ∈ [N ]

n

The performance of our online algorithm in Alg. 1 is stated

in Thm. 1, with a detailed proof in Appendix A.

Theorem 1. If we can ﬁnd an auction mechanism in
Around that carries out resource allocation in each round
to produce feasible solutions for (3) and (4), and guarantees
νp ≥ d (hence the competitive ratio of the auction algorithm
is also ν), Aonline is (1 + Bmax)(ν + 1
γ−1 )-competitive for
k∈[K] w(t)
n,k is the
objective value of the one-round resource allocation problem
q,r is the

optimization (1). Here p = (cid:80)
n +(cid:80)
in (3), and d =(cid:80)

(cid:80)
(cid:80)

n,ky(t)

q,rz(t)

n∈[N ]

r∈[R] A(t)

n∈[N ] s(t)
dual objective value in (4).

q∈[Q]

We note that when Bmax → 0, the competitive ratio ap-
e−1 , i.e., the long-term online optimization
1
e−1 in competitive

proaches ν + 1
framework incurs only an additive loss of
ratio, as compared to the one-round allocation algorithm.

5. A RANDOMIZED AUCTION MECHANISM

We now present a randomized auction mechanism Around
which eﬃciently allocates resources according to users’ bids
in each time slot, and guarantees individual rationality and
truthfulness. The auction mechanism in each round allo-
cates resources according to the one-round resource allo-
cation problem in (3) and decides the payments from the
winning bidders. The classic VCG (Vickrey-Clarke-Groves)
mechanism [23] is a potential candidate for our auction de-
sign, which assigns items (VM bundles in our case) to bid-
ders in a socially optimal manner by solving a correspond-
ing resource allocation problem, charges each winner the
externality it exerts on other bidders, and ensures that the
optimal strategy for a bidder is to bid its true valuations.
However, our allocation problem in (3) is NP-hard, and
hence a VCG mechanism becomes computationally infea-
sible. We therefore resort to a fractional version of the VCG

auction for achieving both computational eﬃciency (polyno-
mial time complexity) and economic eﬃciency (social wel-
fare maximization in (3)), by applying the VCG mechanism
to the LP relaxation of the integer program (3). The frac-
tional VCG mechanism produces fractional bundle alloca-
tion results, which are not practically applicable. We fur-
ther employ a primal-dual optimization based decomposi-
tion technique that decomposes such an optimal fractional
solution into a convex combination of integral solutions, and
then design a randomized auction which randomly picks one
from the integral solutions as the bundle allocation result in
each round and retains the nice properties of a fractional
VCG auction. We detail the fractional VCG auction, the
decomposition technique, and the randomized auction de-
sign in the following three subsections.
5.1 The Fractional VCG Auction
In the fractional VCG auction, the auctioneer solves the
LP relaxation of (3) by relaxing constraint (3c) to 0 ≤
n,k ≤ 1,∀n, k, to decide the bundle allocation in t. Let
y(t)
y(t)F = (y(t)F
n,k )∀n,k denote the resulting optimal fraction
n,k ∈ [0, 1]. To compute the VCG pay-
allocation, where y(t)F
(cid:101)V (t)−n denote the social welfare achieved when winner n is
ment from a winner, the auctioneer solves the LP relaxation
again with the winner excluded from the allocation. Let
(cid:101)V (t)−n −(cid:80)

n(cid:48),k w(t)
n of bidder n in a VCG auction is
typically deﬁned as the diﬀerence between its valuation and
its payment. In our online auction framework, a user’s util-
ity in each round should be related not only to its valuation
and payment, but also to its remaining budget: intuitively,
smaller utility gain is appreciated if a user won a bundle
when its remaining budget is small, and larger otherwise.
We characterize this property using a utility function:

k∈[K] y(t)F
The utility function u(t)

excluded. The payment of winner n, Π(t)F

, is: Π(t)F

(cid:80)

n(cid:48),k.

n(cid:48)(cid:54)=n

=

n

n

u(t)
n =

y(t)F
n,k w(t)

n,k − Π(t)F

n

.

(5)

(cid:88)

k∈[K]

Such a utility function is consistent with the social welfare
calculation in the one-round allocation problem (3). In this
way, a user’s budget can potentially last longer, enabling
its acquirement of a better bundle with the same consump-
tion of budget at a later time, contributing to social welfare
eﬃciency over all T rounds of auctions.

We show in Thm. 2 that under this utility function, bid-
ding true valuations is the best strategy for each user in
the fractional VCG auction. A non-negative utility is guar-
anteed for each bidder, based on VCG auction theory [23].
Due to space limit, most proofs in this section are omitted
in this paper and we refer the interested readers to [22] for
the details.

Theorem 2. The fractional VCG auction which produces
n,k ,∀n ∈ [N ], k ∈ [K], and payments

,∀n ∈ [N ], is truthful and individual rational.

fractional allocation y(t)F
Π(t)F
5.2 Decomposing the Fractional Solution

n

Since fractional VM bundles are impractical in real-world
cloud systems, we next decompose the fractional alloca-
tion solution into a convex combination of integer solutions,
which will be used by our randomized auction mechanism.

(cid:80)

l∈L βly(t)l

l∈L βly(t)l

n,k = y(t)F

of integer solutions, (cid:80)

n,k , ∀n ∈ [N ], k ∈ [K], and (cid:80)

We apply a LP duality based decomposition technique [13].
The goal of the decomposition is to ﬁnd βl ∈ [0, 1] and a
set of integer solutions y(t)l,∀l ∈ L (L is an index set),
to the one-round resource allocation problem (3), such that
l∈L βl = 1.
The randomized auction in each round can choose the lth
integer solution y(t)l with probability βl, achieving a good
competitive ratio in social welfare in expectation, as com-
pared to that achieved by the optimal integer solution to (3).
However, there in fact does not exist a convex combination
n,k , that equals the fraction
solution y(t)F
n,k , because otherwise, the expected social wel-
fare achieved by these integer solutions equals that achieved
by the fractional solution, which is apparently a contradic-
tion to the fact that the fractional solution achieves a higher
social welfare than any possible integer solution. Therefore,
to achieve a feasible decomposition, we need to scale down
the optimal fractional solution by a certain factor. Accord-
ing to [13], if there exists an approximation algorithm that
solves the one-round allocation problem (3) with an approx-
imation ratio of λ and guarantees λp ≥ d (where p and d
are the objective function values of the primal problem (3)
and dual (4) respectively) , then we can use λ as the scal-
ing factor, and rest assured that a feasible solution to the
following decomposition problem exists:

minimize

βl

(6)

(cid:88)

l∈L

n,k /λ,

βly(t)l

(cid:88)

l∈L

n,k = y(t)F
βl ≥ 1,
βl ≥ 0,

∀n ∈ [N ], k ∈ [K],

∀l ∈ L.

(6a)

(6b)

(6c)

s.t. (cid:88)

l∈L

We next ﬁrst present a primal-dual algorithm that solves
(3) with a good approximation ratio λ, and then discuss
how to solve the decomposition problem (6) to obtain βl
and y(t)l, ∀l ∈ L.

5.2.1 A primal-dual algorithm for one-round resource

allocation

q,r = maxn,k{c(t)
min = minr∈[R],q∈[Q]{A(t)

Alg. 2 is our primal-dual approximation algorithm to the
n,k,r,q} is
NP-hard allocation problem (3). C (t)
the maximum amount of type-r resource at datacenter q re-
q,r}
quired by any bundle in t. C (t)
q,r/C (t)
is the minimum ratio between the total amount of available
resource of a type in datacenter and the amount of the re-
source in the datacenter required by one bundle. In practice,
the resource pool is substantially larger than a single user’s
min (cid:29) 1. The main idea of the algo-
demand, and hence C (t)
rithm is to introduce an auxiliary variable z(t)
q,r for each type
of resources (which is the dual variable associated with con-
straint (3(b)), acting as the unit price in allocation decision.
The unit price z(t)
q,r is updated according to the remaining
amount of this type of resource. The algorithm evaluates
each bundle according to the unit prices and the amount
of required resources, and always chooses the users with a
higher bid on a lower valued bundle as the winner.

Theorem 3. Alg. 2 computes feasible primal and dual so-
lutions for (3) and (4), and guarantees λp ≥ d (p and d de-
ﬁned in Thm. 1), λ = 1 + (t)(e(QR)1/(C
with (t) = maxk1,k2∈[K],r∈[R]{c(t)
proximation ratio of Alg. 2 is also λ.

min−1) − 1) C
min−1
n,k2,r,q}. The ap-

n,k1,r,q/c(t)

(t)
min

(t)

(t)

C

Here (t) is the maximum ratio between the overall de-
mands for any type of resource in any two bundles in a user’s
bid in t. When Q, R are small constants and the provider’s
resource pool is relatively large compared with users’ re-
source demands in the bundles, λ tends to 1 + (t)(e − 1). If
further (t) → 1, or each user bids a single bundle, λ tends
to e.

Algorithm 2 A Primal-Dual Algorithm to Solve One-round
Allocation Problem (3)
1: N ← ∅, zbase ← QR · exp((C (t)
q,r ← 1/A(t)
2: y(t)

n ← 0, z(t)

min − 1))
q,r,∀n ∈ [N ], k ∈ [K], r ∈
q,r < zbase AND |N| (cid:54)= N do

n,k ← 0, s(t)
[R], q ∈ [Q]

3: while(cid:80)

(cid:80)

q,rz(t)

q∈[Q] A(t)

r∈[R]

4:
5:
6:

7:

8:
9:

for all n /∈ N do

k(n) = arg maxk∈[K]{w(t)
n,k}
(cid:80)

end for
n∗ = arg maxn∈[N ]{
n∗ ← w(t)
n∗,k(n∗) ← 1, s(t)
y(t)
for all r ∈ [R], q ∈ [Q] do

(cid:80)

r∈[R]

w

(t)
n,k(n)
(t)
n,k(n),r,q

}
n∗,k(n∗),N ← N ∪ {n∗}

q∈[Q] c

(t)
q,r

z

q,r ← z(t)
z(t)

q,r · zbase

(t)

n∗ ,k(n∗ ),q,r
c

/(A

10:
end for
11: end while

(t)

q,r−C

(t)
q,r )

5.2.2 Decomposition with LP duality-based technique
To solve the decomposition problem (6), we can ﬁrst ﬁnd
all the possible integer solutions y(t)l to (3) using some ex-
haustive search method, and then directly solve (6) to derive
the decomposition coeﬃcients βl’s. But this method has an
exponential-time complexity, since there are an exponential
number of possible integer solutions y(t)l, and hence an ex-
ponential number of variables in LP (6). We therefore resort
to its dual, formulated in (7), where dual variables v(t)
n,k and
τ associate with primal constraints (6a) and (6b), respec-
tively:

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

maximize

1
λ

y(t)F
n,k v(t)

n,k + τ

(7)

s.t. (cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k + τ ≤ 1,
τ ≥ 0.

∀l ∈ L,

(7a)

(7b)

Even though the dual (7) has an exponential number of con-
straints, the ellipsoid method can be applied to solve it in
polynomial-time. The ellipsoid method obtains an optimal
dual solution using a polynomial number of separating hy-
perplanes. Alg. 2 acts as a key component of a separation
oracle for generating these separating hyperplanes, and a

feasible integer solution to (3) can be derived each time a
separating hyperplane is generated [13]. Hence, a polyno-
mial number of candidate integer solutions y(t)l’s are pro-
duced through the process of the ellipsoid method, and the
primal problem (6) can be reduced to a linear program with
a polynomial number of variables (βl’s) corresponding to
these integer solutions. Then we can solve the reduced pri-
mal problem in polynomial time. The correctness of the
above decomposition method is given in Lemma 1, with de-
tailed proof and the construction of the separation oracle in
Appendix B.

Lemma 1. The decomposition method correctly obtains a
polynomial number of integer solutions {y(t)l}l∈L to the one-
round allocation problem (3), and the probabilities βl,∀l ∈
L, which solve (6), in polynomial time.
5.3 The Randomized Auction

Alg. 3 gives our randomized auction to be carried out
in each round of the online algorithm in Alg. 1. It selects
an integer bundle allocation solution y(t)l produced by the
decomposition method with probability βl (Line 8). The
payment from a winning bidder n should satisfy two condi-
tions: (1) The expectation of the payment should be equal to
/λ,
(2) The payment Π(t)l
in order to remain truthfulness.
should be no larger than n’s valuation of its winning bundle
n,k , in order to guarantee individual rational-
ity. We obtain the payment rule in Line 9, which satisﬁes
the two conditions.

the scale-down fractional payment,(cid:80)
(cid:80)

n βl = Π(t)F

k∈[K] w(t)

l∈L Π(t)l

n,ky(t)l

n

n

The following theorem provides the properties achieved

by the randomized auction.

Theorem 4. Around runs in polynomial time and is truth-

ful, individual rational and λ(1 + Bmax)-competitive.

Our online auction results when we plug in the one-round
randomized auction Around into the online algorithm frame-
work Aonline in Alg. 1. The competitive ratio of the on-
line auction can be derived readily from Thm. 1 using ν =
λ(1 + Bmax), the competitive ratio of the one-round ran-
domized auction given in Thm. 4.

Theorem 5. Aonline in Alg. 1 combining with Around
in Alg. 3 constitutes a truthful, individual rational, (1 +
Bmax)(λ(1 + Bmax) + 1

γ−1 )- competitive online auction.

The complete proof of Thm. 5 can be found in Appendix
C. We note that when Bmax → 0, the competitive ratio
tends to λ + 1
e−1 . Following the discussions on Thm. 3 in
Sec. 5.2.1, when λ tends to e, the competitive ratio of the
online auction tends to e + 1
5.4

Improving the scale-down factor

e−1 (cid:39) 3.30.

We have decomposed the fractional allocation solution in
Sec. 5.2 after scaling it down by the approximation ratio λ
of the one-round allocation Alg. 2, such that a feasible so-
lution to the decomposition problem (6) is guaranteed [13].
According to Thm. 5, λ (as the scale-down factor in the de-
composition method) is closely related to the competitive
ratio of our online auction, such that a smaller scale-down
factor may potentially lead to a better competitive ratio.
However, a scale-down factor smaller than λ may not guar-
antee a feasible decomposition. We therefore design a binary

n,k}.
)b(t)

Algorithm 3 One-Round Randomized Auction Around in t
n,k = max{0, (1 −
1: Solve LP relaxation of (3), with w(t)
solution by

x(t−1)
Denote
n
n,k ,∀n ∈ [N ], k ∈ [K].
y(t)F
(cid:48)(t)
∀n(cid:48) ∈ [N ], k ∈ [K], w
n(cid:48),k = max{0, (1 − x(t−1)
(cid:48)(t)
if n(cid:48) (cid:54)= n. Otherwise w
n(cid:48),k = 0.

2: for all n ∈ [N ] do
3:

n,k},
)b(t)

fractional

the

n

4:

(cid:48)(t)
n(cid:48),k’s. Denote the

Solve LP relaxation of (3), with w

optimal objective function value by (cid:101)V (t)−n.

n = (cid:101)V (t)−n −(cid:80)

(cid:80)

n(cid:48)(cid:54)=n

k y(t)F

n(cid:48),k w(t)
n(cid:48),k

Π(t)F
5:
6: end for
7: Solve the pair of primal-dual decomposition LPs in (6)
and (7) using the ellipsoid method, using Alg. 2 as a
separation oracle, and derive a polynomial number of
integer solutions to (3), y(t)l, ∀l ∈ L, and the corre-
sponding decomposition coeﬃcients, βl, ∀l ∈ L.

8: Choose y(t)l with probability βl, ∀l ∈ L
9: ∀n ∈ [N ], Π(t)l

n = Π(t)F

·

n

(cid:80)
(cid:80)

k∈[K] w
k∈[K] w

(t)
n,ky
(t)
n,ky

(t)l
n,k
(t)F
n,k

search-based algorithm in Alg. 4 to compute the smallest
scale-down factor that enables feasible decomposition.

The algorithm is designed based on a property of the scale-
down factor, as given in Thm. 6 . With its monotonicity, we
can ﬁnd the smallest, feasible scale-down factor using binary
search (with arbitrary small error). We should note that this
trial-and-error method may improve the performance of our
online auction algorithm on average in practice, but does
not change the theoretical competitive ratio in Thm. 5 in
the worst case. We will investigate the eﬀectiveness of the
improved scale-down factor in our trace-driven simulations.

Algorithm 4 Binary searching smallest scale-down factor
Require: allowable error δ
1: Replace Line 7 of Alg. 3 with the following steps:
2: λl ← 1, λr ← λ + δ
3: while λr − λl > δ do
λm ← (λl + λr)/2
4:
5:
Solve (7) with scale-down factor λm.
If Decomposing success then λr ← λm Else λl ←
6:

λm

7: end while
8: Solve (7) with scale-down factor λr.

Theorem 6. If the fractional allocation y(t)F

n,k can be de-
composed under scale-down factor λ1, then it can also be
decomposed under any factor λ2 > λ1.

6. PERFORMANCE EVALUATION

We evaluate our online auction design using trace-driven
simulations. We investigate 6 types of VMs distributed in
Q (default 3) datacenters, assembled from three types of
resources (CPU, RAM, Disk capacity, R = 3), following
the conﬁgurations in Table 1. Users’ resource demands are
extracted from Google cluster-usage data [3], which record
jobs submitted to the Google cluster with information on
their resource demands (CPU, RAM, Disk). We translate

each job request in the Google data into a bidding bundle
as follows: we calculate the numbers and types of VMs in
Table 1 that altogether can make up the resource demands
in the job request, and compose a bidding bundle based on
the numbers and types of VMs; the valuation in the bid-
ding bundle is calculated as the product of the total cost to
acquire these VMs according to the VM charges in Table 1
and a random coeﬃcient in the range of [0.5, 2]. In this way,
we obtain a pool of bidding bundles from the Google data.
In each round of the online auctions, each user randomly
picks K (default 3) bundles in the pool, tags each VM in
each bundle with a datacenter randomly selected from the
Q datacenters, and bids the bundles. A user n’s total budget
Bn is decided by multiplying the sum of valuations in all the
bundles the user may bid in the T rounds of auctions by a
random coeﬃcient in the range of [0.5, 1]. We also compute
the total amount of resource of each type r needed by all the
bid bundles of N users in each round, scale it down using
a random factor in [0, 1], and distribute the overall amount
of type-r resource to Q datacenters evenly, to obtain the
amount of available resource, A(t)
q,r, for each type of resource
in each datacenter at each time. Note that we run random
bundle selection for each user over T rounds ﬁrst to estimate
users’ budgets Bn’s and available resources in the datacen-
ters, A(t)
q,r’s, before running the experiments to evaluate our
online auction with the obtained Bn’s and A(t)
q,r’s. We sup-
pose the maximum ratio between the overall demands for
any type of resource in any two bundles in a user’s bid in
each time slot t, i.e., (t), is no larger than 2.5, by picking
up bundles with similar resource demands for each user in
the auctions, which we believe to reﬂect the reality better.

We compare the performance of three algorithms:
(cid:66) Alloc, a pure online resource allocation algorithm, with
the one-round resource allocation algorithm Alg. 2 serv-
ing in the place of Around in Aonline in Alg. 1.

(cid:66) Auc, our online auction algorithm presented in Sec. 5.3,

i.e., Aonline combined with Around in Alg. 3.

(cid:66) AucBS, the online auction algorithm with the improved
scale-down factor, i.e., adding the binary search in Al-
gorithm 4 to the auction algorithm Around in Aonline.

We compare these algorithms in diﬀerent settings, based
on the ratio between the oﬄine optimal social welfare de-
rived by solving (1) exactly and the overall social welfare
produced by each online algorithm over T rounds, which
we refer to as the oﬄine/online ratio. In each scenario, we
repeat each experiment for 10 times to derive the average
ratios.
6.1 Different numbers of cloud users

We ﬁrst compare the algorithms through varying the num-
ber of cloud users N from 300 to 3000, while ﬁxing the
number of rounds T = 300, as illustrated in Figure 1. The
oﬄine/online ratio of Auc declines when N is large (N >
2000), which is consistent with our theoretical analysis in
Thm. 3: The larger the scale of the cloud system, the larger
the value of C (t)
min, and consequently the better oﬄine/online
ratio results. When users’ truthful resource demands and
valuations are assumed available for free, the pure online re-
source allocation algorithm, Alloc, achieves an oﬄine/online

ratio close to 1, which shows that our online algorithm frame-
work together with the one-round resource allocation algo-
rithm performs closely to the oﬄine optimum in social wel-
fare, if all the cloud users are cooperative. AucBS achieves a
better oﬄine/online ratio as compared to Auc, revealing the
usefulness of our improved scale-down factor based on the
binary-search Alg. 4 in decomposing the fractional solution
into better integer solutions in practical scenarios.

Figure 1: Oﬄine/online ratio under diﬀerent num-
bers of users N
6.2 Different numbers of rounds

We next vary the total number of rounds T our system is
running for while ﬁxing the number of users to 500. Suppose
each round is one hour. A number of rounds in the range
of [300, 3000] corresponds to 12.5 days to about 4 months,
which represents a reasonable period of time for a user to
set a total amount of budget to use in. We observe in Fig-
ure 2 that the oﬄine/online ratio of each algorithm always
remains at similar levels, demonstrating the stable perfor-
mance of our online algorithms regardless of the total num-
ber of rounds they are applied into.

Figure 2: Oﬄine/online ratio under diﬀerent total
numbers of rounds T
6.3 Different numbers of bundles and data-

centers

We further evaluate the performance of AucBS when the
number of bundles each user bids for in each round, K, and
the number of datacenters, Q, vary. Fig. 3 shows that in
general the performance of the improved online auction is
better when the number of bundles is smaller. This can be
explained as follows: The competitive ratio of our online
auction (given in Thm. 5) is related to λ, the approxima-
tion ratio of the one-round resource allocation algorithm in
Alg. 2, which is further closely related to (t). When K is
smaller, (t) is potentially smaller (recall (t) is the maximum
ratio between the overall demands for any type of resource

300900150021002700012345T=300, K=3, Q=3Number of Users(N)Offline/online Ratio  AllocAucBSAuc300900150021002700012345N=500, K=3, Q=3Number of Rounds(T)Offline/online Ratio  AllocAucBSAucin any two bundles among the K bundles a user bids for in
t), and thus λ is smaller, leading to a lower competitive ra-
tio of the online auction. In a practical cloud system, the K
bundles that a user bids are typically diﬀerent representa-
tions of the user’s same resource demands in a time slot, e.g.,
diﬀerent bundles may specify diﬀerent numbers of diﬀerent
types of VMs requested from diﬀerent datacenters, which
add up to a similar amount of each type of resource across
diﬀerent bundles, to serve the user’s need in t. Therefore,
we do not expect a large value of (t) at any time. When
the value of (t) is capped (e.g., to 2.5 in our simulation set-
tings), the competitive ratio is bounded even when K takes
larger values, as shown by the similar oﬄine/online ratios
obtained when K = 3, 4, or 5, respectively, in Fig. 3.

number of users N , and derive the user satisfaction under
diﬀerent values of K and Q.

Fig. 5 shows that the fewer datacenters, the better user
satisfaction results. This can be explained as follows: Once
a speciﬁc type of resource is used up at one datacenter, bun-
dles requesting resources containing this type of resource in
this datacenter cannot obtained, even though other resource
is available in other datacenters; a larger number of data-
centers leads to more dispersed distribution of resources, re-
sulting in high probability for the above scenario to happen.
Fig. 6 shows that a smaller K leads to better user satis-
faction. When K is larger, λ is larger, and hence the per-
formance of the online auction degrads. On the other hand,
when a user bids for more bundles, the cloud provider has
a larger decision space for resource allocation, which should
potentially lead to a higher chance for a user to be allocated
one of the requested bundles. Therefore, the results in Fig. 6
reveal that the impact of λ dominates that of the latter.

Figure 3: Oﬄine/online ratio of AucBS with diﬀer-
ent numbers of bundles K.

Fig. 4 shows that when the total number of datacenters
in the cloud system increases, the performance of our online
auction degrades slightly, because the approximation ratio λ
of Alg. 2 is larger when Q is larger. Nevertheless, we do not
expect more than a few tens of datacenters in a real-world
cloud system, and the oﬄine/online ratio is still acceptable
around 2.70 when Q is 10.

Figure 5: User satisfaction of AucBS with diﬀerent
numbers of datacenters Q.

Figure 6: User satisfaction of AucBS with diﬀerent
numbers of bundles K.

Figure 4: Oﬄine/online ratio of AucBS with diﬀer-
ent numbers of datacenters Q.

7. CONCLUDING REMARKS

We note that the performance ratios obtained in our sim-
ulations are much smaller than the theoretical ratios com-
puted based on Thm. 5, in the range of 6− 7 under the same
settings as used in our simulations. This promises the good
performance of our online auction algorithm in practice.
6.4 User satisfaction

Finally we study the performance of the improved online
auction algorithm AucBS in terms of user satisfaction, evalu-
ated as the percentage of users who win a bundle in a round,
averaged over the number of rounds the online auction runs.
We set the total number of rounds to T = 100, vary the

This work presents the ﬁrst online combinatorial auction
for the VM market in cloud computing.
It advances the
state-of-the-art of cloud auction design in that all previous
VM auction mechanisms are either one-round only, or sim-
plify VMs into type-oblivious good (and hence circumvent
the challenge imposed by combinatorial auctions). Our on-
line auction comprises of three components. First, we de-
sign an intuition-driven primal-dual algorithm for translat-
ing the online social welfare optimization problem into a
series of one-round optimizations, incurring only a small ad-
ditive penalty in competitive ratio. Second, we apply a ran-
domized auction sub-framework that can translate a coop-
erative approximation algorithm to the one-round optimiza-

30060090012001500180021001.51.71.92.12.32.5T=100,Q=3Number of Users(N)Offline/online Ratio  K=1K=2K=3K=4K=5200500800110014001700012345T=100,K=3Number of Users(N)Offline/online Ratio  Q=2Q=4Q=6Q=8Q=1010020030040050060000.10.20.30.40.5K=3,Number of Users(N)User Satisfaction  Q=2Q=3Q=410020030040050000.10.20.30.40.5Q=3Number of Users(N)User Satisfaction  K=1K=2K=3tion into an auction. Third, we apply a greedy primal-dual
algorithm that approximates the one-round social welfare
optimization. Our overall online VM auction guarantees a
theoretical competitive ratio close to 3.30 in typical scenar-
ios, and its design may shed light to similar auction problems
in related settings.

8. ACKNOWLEDGMENT

The research was supported in part by a grant from Hong

Kong RGC under the contract HKU 718513.

9. REFERENCES
[1] Amazon Elastic Compute Cloud.

http://aws.amazon.com/ec2/.
[2] Amazon EC2 Spot Instances.

http://aws.amazon.com/ec2/spot-instances/.

[3] Google Cluster Data,

https://code.google.com/p/googleclusterdata/.

[4] Windows Azure: Microsoft’s Cloud Platform.

http://www.windowsazure.com/.

[5] H. Ballani, P. Costa, T. Karagiannis, and

A. Rowstron. Towards predictable datacenter
networks. In ACM SIGCOMM Computer
Communication Review, volume 41, pages 242–253.
ACM, 2011.

[6] N. Bansal, K.-W. Lee, V. Nagarajan, and M. Zafer.

Minimum congestion mapping in a cloud. In
Proceedings of the 30th annual ACM
SIGACT-SIGOPS symposium on Principles of
distributed computing, pages 267–276. ACM, 2011.

[7] N. Buchbinder, K. Jain, and J. S. Naor. Online

primal-dual algorithms for maximizing ad-auctions
revenue. In Proceedings of the 15th Annual European
Symposium on Algorithms, 2007.

[8] N. Cherﬁ and M. Hiﬁ. A column generation method

for the multiple-choice multi-dimensional knapsack
problem. Computational Optimization and
Applications, 46(1):51–73, 2010.

[9] H. Fu, Z. Li, and C. Wu. Core-selecting auction design
for dynamically allocating heterogeneous vms in cloud
computing. Submitted to INFOCOM 2014.

[10] G. Gens and E. Levner. Complexity of approximation
algorithms for combinatorial problems: a survey. ACM
SIGACT News, 12(3):52–65, 1980.

[11] P. Godfrey, M. Schapira, A. Zohar, and S. Shenker.
Incentive compatibility and dynamics of congestion
control. In ACM SIGMETRICS Performance
Evaluation Review, pages 95–106, 2010.

[12] R. Lavi and N. Nisan. Competitive analysis of

incentive compatible on-line auctions. In Proceedings
of the 2nd ACM Conference on Electronic Commerce,
pages 233–241. ACM, 2000.

[13] R. Lavi and C. Swamy. Truthful and near-optimal

mechanism design via linear programming. In Proc. of
FOCS, pages 595–604, 2005.

[14] D. Lehmann, L. I. O´callaghan, and Y. Shoham. Truth

revelation in approximately eﬃcient combinatorial
auctions. Journal of the ACM (JACM), 49, 2002.

[15] R. T. B. Ma, S. C. M. Lee, J. C. S. Lui, and D. K. Y.
Yau. A game theoretic approach to provide incentive
and service diﬀerentiation in p2p networks. In ACM

SIGMETRICS Performance Evaluation Review, pages
189–198, 2004.

[16] X. Meng, V. Pappas, and L. Zhang. Improving the

scalability of data center networks with traﬃc-aware
virtual machine placement. In INFOCOM, 2010
Proceedings IEEE, pages 1–9. IEEE, 2010.

[17] A. Mu’Alem and N. Nisan. Truthful approximation

mechanisms for restricted combinatorial auctions.
Games and Economic Behavior, 64(2):612–631, 2008.

[18] N. Nisan. Algorithmic game theory. Cambridge

University Press, 2007.

[19] D. Niu, C. Feng, and B. Li. Pricing cloud bandwidth

reservations under demand uncertainty. In ACM
SIGMETRICS Performance Evaluation Review, pages
151–162, 2012.

[20] M. H. Rothkopf, A. Pekeˇc, and R. M. Harstad.

Computationally manageable combinational auctions.
Management science, 44(8):1131–1147, 1998.

[21] G. Shanmuganathan, A. Gulati, and P. Varman.

Defragmenting the cloud using demand-based resource
allocation. In ACM SIGMETRICS Performance
Evaluation Review, pages 67–80, 2013.

[22] W. Shi, L. Zhang, C. Wu, Z. Li, and F. C. M. Lau. An

online auction framework for dynamic resource
provisioning in cloud computing. Technical report,
2014. http://i.cs.hku.hk/~cwu/papers/
sigmetrics14-techreport.pdf.

[23] W. Vickrey. Counterspeculation, auctions, and

competitive sealed tenders. The Journal of Finance,
16(1):8–37, 1961.

[24] Q. Wang, K. Ren, and X. Meng. When cloud meets
ebay: Towards eﬀective pricing for cloud computing.
In Proc. of IEEE INFOCOM, pages 936–944, 2012.

[25] W. Wang, B. Liang, and B. Li. Revenue maximization
with dynamic auctions in iaas cloud markets. In Proc.
IEEE ICDCS, 2013.

[26] C. Wu, Z. Li, X. Qiu, and F. C. M. Lau.

Auction-based p2p vod streaming: Incentives and
optimal scheduling. ACM Transactions on Multimedia
Computing, Communications and Applications, 2012.
[27] S. Zaman and D. Grosu. Combinatorial auction-based

mechanisms for vm provisioning and allocation in
clouds. In IEEE/ACM CCGrid, pages 729–734, 2012.

[28] H. Zhang, B. Li, H. Jiang, F. Liu, A. V. Vasilakos,

and J. Liu. A framework for truthful online auctions
in cloud computing with heterogeneous user demands.
In Proc. of IEEE INFOCOM, 2013.

[29] L. Zhang, Z. Li, and C. Wu. Dynamic resource
provisioning in cloud computing: A randomized
auction approach. In Proc. of IEEE INFOCOM, 2014.

[30] Y. Zhu, B. Li, and Z. Li. Truthful spectrum auction

design for secondary networks. In Proc. of IEEE
INFOCOM, 2012.

APPENDIX
A. PROOF OF THEOREM 1

Proof. We prove the correctness and the competitive-

ness of Aonline by proving three claims:

1. At the end of the algorithm, it produces feasible solu-

tion for dual (2).

b(t)
n,ky(t)

n,k ≤ Bn(1 + Bmax)

(8)

ln(1 +

b(t)
n,kn
Bn

) ≥ b(t)

n,kn
Bn

· ln(1 + Bmax)

Bmax

=

b(t)
n,kn
Bn

ln γ

2. Let P (t) be the value of the objective function in (1)
after t-th iteration, ∆P (t) = P (t) − P (t−1), the same
for ∆D(t) in dual (2). Then Aonline satisﬁes ∆D(t) ≤
ν + 1
γ−1

∆P (t), at any round ∀t ∈ [T ].

(cid:16)

(cid:17)

3. The algorithm produces an almost feasible solution for
primal (1). Speciﬁcally, its outputs y(t)
n,k satisfy (1a),
(1c) and (1d). For constraint (1b), we achieve a slightly
weaker property : For all user n ∈ [N ],

(cid:88)

(cid:88)

t∈[T ]

k∈[K]

whether x(t−1)

Proof of (1): Since w(t)
(cid:88)
< 1 or x(t−1)
c(t)
n,k,rz(t)

(cid:88)

s(t)
n +

n

n

r∈[R]

q∈[Q]

n,k(1 − x(t−1)

n,k ≥ b(t)
) no matter
≥ 1, constraint (4a) guarantees

n

q,r ≥ b(t)

n,k(1 − x(t−1)

n

)

Also notice x(t)

Proof of (2): At time t, ∆P (t) =(cid:80)

n is non-decreasing with t, so (2a) holds.

n∈N b(t)

n,kn

.

∆D(t) =

Bn(x(t)

n − x(t−1)

n

n∈N

(cid:88)
(cid:88)
≤ (cid:88)

=

n∈N

n∈N

b(t)
b(t)

n,kn

n,kn

x(t−1)

n

+

x(t−1)

n

+

) + d

b(t)
n,kn
γ − 1

b(t)
n,kn
γ − 1

 + d
 + νp
(cid:19)

Substitute (cid:80)
∆D(t) ≤ (cid:88)
(cid:18)

n∈N

(cid:18)

ν +

1

γ − 1

(cid:19)

≤

ν +

1

γ − 1

∆P (t)

n∈N b(t)

n,kn

(1 − x(t−1)

n

) for p, we have:

− (ν − 1)x(t−1)

n

b(t)
n,kn

Proof of (3):

Constraints (1a), (1c), (1d) are guar-
anteed by the constraints in (3).
In order to analyze the
property about constraint (1b), we prove the following in-
equality: ∀n ∈ [N ], t(cid:48) ∈ [T ],
(cid:80)

(cid:80)t(cid:48)

t=1

k∈[K] b

(t)
n,k

y

(t)
n,k

 , 0 ≤ t(cid:48) ≤ T

γ

− 1

(9)

Bn

x(t(cid:48))
n ≥ 1

γ − 1

We prove (9) by induction. (9) holds for t(cid:48) = 0 appar-
ently. Suppose it holds for t(cid:48) − 1, then for t(cid:48): If n /∈ N , the
inequality holds since both sides are still the same value at
time t(cid:48) − 1. If n ∈ N :

 +

1 +
γ

b(t)
n,kn
Bn

(cid:80)t(cid:48)−1

t=1

(cid:80)

b(t)
n,kn

Bn(γ − 1)

1 +

k∈[K] b

(t)
n,k

y

(t)
n,k

Bn

n = x(t−1)
x(t)

n

=

1

γ − 1

Comparing this with our target (9), obviously we only

need to show: 1 +

b

(t)
n,kn
Bn

≥ γ

b

(t)
n,kn
Bn . We utilize the inequality:

ln(1 + x)

x

≥ ln(1 + y)

y

, ∀0 ≤ x ≤ y ≤ 1

Since

b

(t)
n,kn
Bn

≤ Bmax, we have:

b

b

≥ γ

(t)
n,kn
Bn

(t)
n,kn
Bn , and we prove (9).

user n, suppose t(cid:48) is the ﬁrst time (cid:80)t(cid:48)
Thus, 1 +
Now we utilize the inequality (9) to prove (8). For some
n,k ≥
Bn. Then by (9), x(t(cid:48))
n ≥ 1. The algorithm never gives
n,k in Around will be set to 0. So(cid:80)T
user n any new bundles once xn ≥ 1, since the weight
(cid:80)
(cid:80)t(cid:48)
w(t)
n,k =
n,k. We know t(cid:48) is the ﬁrst time user n’s
(cid:88)
t(cid:48)−1(cid:88)

total winning bids exceeding its budget Bn. So

(cid:80)
(cid:80)

k∈[K] b(t)

k∈[K] b(t)

k∈[K] b(t)

n,ky(t)

n,ky(t)

n,ky(t)

t=1

t=1

t=1

b(t)
n,ky(t)

n,k < Bn, then:

t=1

k∈[K]

T(cid:88)

(cid:88)

t=1

k∈[K]

b(t)
n,ky(t)

n,k =

t(cid:48)−1(cid:88)

(cid:88)

n,k +

t=1

n,ky(t)
b(t)
k∈[K]
b(t(cid:48))
≤ Bn + max
k∈[K]
≤ Bn(1 + Bmax)

n,k

(cid:88)

k∈[K]

b(t(cid:48))
n,k y(t(cid:48))

n,k

Finally we put the above 3 claims together and calcu-
late the actual total social welfare. Since the increment of
valuation is the minimum between user’s valuation and his
remaining budget, total social welfare should be:

(cid:88)
≥ (cid:88)

n∈[N ]

(cid:88)

(cid:88)

k∈[K]
t∈[T ]
b(n)
n,ky(n)

min{Bn,

(cid:88)

(cid:88)

k∈[K]

n∈[N ]

t∈[T ]
= P (T )/(1 + Bmax)

n,k}
n,ky(n)
b(n)

n,k/(1 + Bmax)

By claim 2: ∆D(t) ≤ (cid:16)
D(0) = 0 , we have D(T ) ≤(cid:16)

(cid:17)

(cid:17)

ν + 1
γ−1
ν + 1
γ−1

welfare is at least D(T )/[(1+Bmax)(ν + 1
approximation ratio of Aonline is (1 + Bmax)(ν + 1

γ−1 ) .

∆P (t), and recall P (0) =

P (T ). Thus the social
γ−1 )]. By duality, the

 − 1


b(t)
n,kn
Bn

B. THE SEPARATION ORACLE AND PROOF

OF LEMMA 1

First we describe the construction of the separation oracle.
In each iteration of the ellipsoid method, a possible solution
of (7) {v(t)
n,k}, τ is generated, and is given as the input of the
severation oracle. The separation oracle we present in Alg.
5 judges whether this solution is feasible, i.e., not conﬂict
with any constraints in (7a). And if it is not feasible, the

separation oracle should return a conﬂict constraints as the
separation plane, i.e., a set of y(t)l
n,k . So if the input solution
has objective value smaller than 1, we use

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

1
λ

y(t)F
n,k v(t)

n,k + τ ≥ 1

as the separation plane. If the objective value equals to
1, then we ﬁnd a feasible solution (later we will prove why
in this case, it is a feasible solution). If the objective value
is larger than 1, we need to ﬁnd a set of y(t)l

n,k , satisﬁes:

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

n,k v(t)
y(t)l

n,k ≥ 1 − τ

Remember the input v(t)

n,k and τ makes the objective value

larger than 1 :

1
λ

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

So we ﬁnd a conﬂict constraint if we can ﬁnd y(t)l

n,k satisﬁes

y(t)F
n,k v(t)

n,k ≥ 1 − τ
(cid:88)
(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k ≥ 1

λ

y(t)F
n,k v(t)

n,k

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

λ

k∈[K]

n∈[N ]

(cid:88)

(cid:88)

n,k ≥ 1

(cid:88)
(cid:101)y(t)l
n,k(cid:101)v(t)
(cid:88)
n,k satisﬁes (cid:80)
(cid:80)
k∈[K](cid:101)y(t)l
n,k(cid:101)v(t)

≥ 1
λ

(cid:88)
(cid:88)
(cid:80)

n∈[N ]

k∈[K]

n∈[N ]

k∈[K]

n,k (cid:101)v(t)

y(t)F

n,k

y(t)F
n,k v(t)

n,k

Also note that y(t)l

n,k ≥
n,k. Thus we ﬁnd such a integer solu-

k∈[K] y(t)l

n,k v(t)

n∈[N ]

(cid:80)

n∈[N ]
tion y(t)l
n,k .

Next we show the optimal value of (7), and hence of (6)
is exactly 1. Here is a feasible solution with value 1: τ =
n,k = 0,∀n ∈ [N ], k ∈ [K], so the optimal value is at
1, v(t)
least 1. Then we claim that it is at most 1: suppose

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

1
λ

y(t)F
n,k v(t)

n,k + τ > 1

Then we can ﬁnd an integer solution using the previous

method such that

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k + τ ≥ 1

λ

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)F
n,k v(t)

n,k + τ ≥ 1

Observe the left side of the inequality. It has exactly the
same form with the objective function of (3). Furthermore,
the value of y(t)l
n,k also should satisfy all the constraints in (3).
So we can Around to get such y(t)l
n,k . Although there is a little
diﬀerence here: v(t)
n,k in (3) can
only be nonnegative value. In order to handle this problem,

we introduce new variables(cid:101)v and(cid:101)y in the separation oracle,

n,k can be negative, while w(t)

which is detailed in the proof.

,which contradicts constraint (7a).
Finally we show the function of our designed oracle is
Its correctness under two cases: objective value
correct.
equals 1 and smaller than 1 is obvious. When it is larger
n,k and calls Around. The
correctness of this method has been discussed. So this oracle
solves (7) as we expect.

than 1, the oracle generates (cid:101)v(t)

C. PROOF OF THEOREM 5

n,k + τ = 1, Then return “YES”
n,k + τ < 1, Then return “NO” with sep-

n

n

(cid:80)

(cid:80)

(cid:80)
(cid:80)
(cid:80)

aration plane 1
λ

n,k, τ
n,k v(t)
n,k v(t)

Algorithm 5 Separation Oracle
Require: input v(t)
k y(t)F
1: If 1
λ
k y(t)F
2: If 1
λ

(cid:80)
(cid:80)
(cid:80)
n
(cid:101)v(t)
n,k v(t)
n,k + τ > 1, Then
Run Around with input (cid:101)v(t)
n,k = max{0, v(t)
n,k}
(cid:101)y(t)l
n,k =(cid:101)y(t)l
Return “NO” and(cid:80)

3: If 1
λ
4:
5:

n,k . Set y(t)l

n,k if v(t)

n,k v(t)

n,k, c(t)

k y(t)F

k y(t)F

n

6:
7: EndIf

n,k + τ ≥ 1

q,r, get output

n,k,r,q, A(t)

(cid:80)
n,k ≥ 0, and 0 otherwise.
k y(t)l

n,k + τ ≤ 1

n,k v(t)

n

Proof. The only diﬀerence between Thm. 5 and Thm. 1
is we introduce randomness here. Recall the proof of Thm. 1,
the only claim aﬀected by randomness is claim (2). We
analyze the expectation of the increment on the primal and
dual E[∆P ] and E[∆D]. At time t,

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

E[∆P (t)] =

E[y(t)

n,kb(t)
n,k]

E[∆D(t)] =

(cid:88)

n∈[N ]

BnE[x(t)

n

n − x(t−1)
(cid:88)

] + E[d]

(cid:88)

E[

n∈[N ]

k∈[K]

≤λ(1 + Bmax)E[p] +

n,k]·
n,kb(t)
y(t)

The following is the detailed proof of Lemma 1. We ﬁrst
n,k}, we can ﬁnd in polynomial time a

show that for any {v(t)
feasible integer allocation y(t)l

n,k such that

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)l
n,k v(t)

n,k ≥ 1

λ

(cid:88)

(cid:88)

n∈[N ]

k∈[K]

y(t)F
n,k v(t)

n,k

(10)

Note the v(t)

invoke Around directly. That is the reason we deﬁne (cid:101)v(t)
Then we use Around, with input vector(cid:101)v(t)
n,k to get(cid:101)y(t)l

n,k here can be negative value, so we cannot
n,k.
n,k sat-

isfying:

E[1 − x(t−1)

n

]+

n

E[x(t−1)
≤E[∆P (t)]

1

]

γ − 1
λ(1 + Bmax)

+

(cid:16)
(cid:88)

(cid:88)
(cid:17)

n∈[N ]

E[x(t−1)

n

]

1

γ − 1

+

n∈[N ]
≤(λ(1 + Bmax) +

1

γ − 1

)E[∆P (t)]

So the ﬁnal actual competitive ratio is (1 + Bmax)(λ(1 +

Bmax) + 1

γ−1 ).

