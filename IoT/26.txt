This paper is a preliminary version of a paper published in the Second IEEE WoWMoM Workshop on the Internet of

GTTI 2013 Session on Telecommunication Networks

Things: Smart Objects and Services, IoT-SoS 2013

DeTAS: a Decentralized Trafﬁc Aware Scheduling

technique enabling IoT-compliant Multi-hop

Low-power and Lossy Networks

Nicola Accettura∗, Maria Rita Palattella†, Gennaro Boggia∗, Luigi Alfredo Grieco∗ and Mischa Dohler‡

∗DEI, Politecnico di Bari (Italy), {n.accettura, a.grieco, g.boggia}@poliba.it
†SnT, University of Luxembourg (Luxembourg), maria-rita.palattella@uni.lu

‡CTTC (Spain), mischa.dohler@cttc.es

Abstract—The emerging IEEE802.15.4e standard and IETF
RPL routing protocol provide key functionalities useful
for
a really viable Internet of Things. Indeed, they are core to
the organization of multi-hop Low-power and Lossy Networks.
Nevertheless, the design of effective scheduling schemes in such
systems is one of the major problems, which requires research
efforts in order to be solved. Actually, there are no speciﬁcations
about how schedules should be realized. Trying to ﬁll this gap,
the aim of this paper is twofold. First of all, we present a new
Decentralized Trafﬁc-Aware Scheduling algorithm, which is able
to construct optimum multi-hop schedules in a distributed fash-
ion. Secondly, we prove its effectiveness by means of simulation
results, and we compare such descentralized solution with a
centralized one. The reported performance results encourage the
use of such decentralized scheme, since it allows a very efﬁcient
queue management, while minimizing the network duty cycle as
well.

I. INTRODUCTION

In Internet of Things (IoT) scenarios, a potentially (very)
large number of nodes is able to establish low-power short-
range wireless links,
thus forming a capillary networking
infrastructure that can be connected to the Internet [1]. In order
to actualize the IoT vision, IEEE and IETF standardization
bodies have recently proposed several interesting protocols that
can ease plug and play operations of smart devices in IPv6
networks [2], [3], if properly combined in a communication
stack for Low-power and Lossy Networks (LLNs).

From the MAC layer perspective,

the IEEE802.15.4e
amendment [4] has been released on April 2012 with the aim
of redesigning the existing IEEE802.15.4-2011 MAC standard
[5] toward a low-power multi-hop MAC, better suitable for the
emerging needs of IoT and embedded industrial applications
[6], [7], [8]. Among other new features,
the Timeslotted
Channel Hopping (TSCH) protocol has been proposed to
address process automation facilities for oil and gas indus-
try, chemical products, water/waste water treatments, green
energy production, climate control [2]. Using TSCH, nodes
synchronize on a slotframe structure, i.e., a group of slots
which repeats over time. Each node follows a schedule which
indicates its operative mode (i.e., transmit, receive, or sleep)
and, in case it is active, the channel to use and the neighbor to
communicate with. The IEEE802.15.4e standard explains how
the MAC layer executes a schedule, but it does not specify how

such a schedule is built.

At the same time, from a networking point of view, the
IETF has recently standardized the Routing Protocol for LLNs
(RPL) [9]. It is a gradient-based routing protocol, which can
easily organize and manage multi-hop topologies based on
short-range low-power links. In the most typical setting, RPL-
enabled nodes are connected through multi-hop paths to a
small set of LLN sinks, which are usually responsible for
data collection and coordination duties. For each of them,
a Destination Oriented Directed Acyclic Graph (DODAG) is
created by accounting for link costs, node attributes/status
information, and an Objective Function, which maps the
optimization requirements of the target scenario. In that case,
each LLN sink assumes the role of DODAG root. A more
sophisticated and ﬂexible conﬁguration could contain a single
DODAG with a virtual DODAG root coordinating several LLN
sinks.

The gradient strategy employed by RPL relies on the deﬁ-
nition of node’s rank, which speciﬁes the individual position
of a node with respect to its (virtual) DODAG root. As a
consequence, the rank should monotonically decrease along
the DODAG and towards the destination, in accordance to
the gradient-based approach. Speciﬁcally, the virtual DODAG
root’s rank is always 0, while the rank of LLN sinks is
1. In general, for each sensor device,
the rank is a real
number, whose integer part, r, accounts for the minimum hop-
distance from the (virtual) DODAG root. Instead, the decimal
part of the rank is used by RPL for selecting the preferred
parent among some candidate ones, according to metrics and
objective functions. In this paper, we are not concerning the
RPL strategy for selecting a preferred parent, hence, for our
purposes, the main information is carried into the integer part r
of the rank. For this motivation and for the sake of exposition,
when referring to rank in what follows, we are considering its
integer part r.

Supported by the strong evidence that the IEEE802.15.4e
TSCH MAC and the IETF RPL protocols are core to a viable
IoT protocol stack [2], we have been facing the problem of
building multi-hop schedules for RPL-organized, TSCH-based
networks [10]. The ﬁrst outcome of such investigation has
been the Trafﬁc-Aware Scheduling Algorithm (TASA) [11],
[12], which builds time/frequency collision-free patterns in a

This paper is a preliminary version of a paper published in the Second IEEE WoWMoM Workshop on the Internet of

GTTI 2013 Session on Telecommunication Networks

Things: Smart Objects and Services, IoT-SoS 2013

DeTAS: a Decentralized Trafﬁc Aware Scheduling

technique enabling IoT-compliant Multi-hop

Low-power and Lossy Networks

Nicola Accettura∗, Maria Rita Palattella†, Gennaro Boggia∗, Luigi Alfredo Grieco∗ and Mischa Dohler‡

∗DEI, Politecnico di Bari (Italy), {n.accettura, a.grieco, g.boggia}@poliba.it
†SnT, University of Luxembourg (Luxembourg), maria-rita.palattella@uni.lu

‡CTTC (Spain), mischa.dohler@cttc.es

Abstract—The emerging IEEE802.15.4e standard and IETF
RPL routing protocol provide key functionalities useful
for
a really viable Internet of Things. Indeed, they are core to
the organization of multi-hop Low-power and Lossy Networks.
Nevertheless, the design of effective scheduling schemes in such
systems is one of the major problems, which requires research
efforts in order to be solved. Actually, there are no speciﬁcations
about how schedules should be realized. Trying to ﬁll this gap,
the aim of this paper is twofold. First of all, we present a new
Decentralized Trafﬁc-Aware Scheduling algorithm, which is able
to construct optimum multi-hop schedules in a distributed fash-
ion. Secondly, we prove its effectiveness by means of simulation
results, and we compare such descentralized solution with a
centralized one. The reported performance results encourage the
use of such decentralized scheme, since it allows a very efﬁcient
queue management, while minimizing the network duty cycle as
well.

I. INTRODUCTION

In Internet of Things (IoT) scenarios, a potentially (very)
large number of nodes is able to establish low-power short-
range wireless links,
thus forming a capillary networking
infrastructure that can be connected to the Internet [1]. In order
to actualize the IoT vision, IEEE and IETF standardization
bodies have recently proposed several interesting protocols that
can ease plug and play operations of smart devices in IPv6
networks [2], [3], if properly combined in a communication
stack for Low-power and Lossy Networks (LLNs).

From the MAC layer perspective,

the IEEE802.15.4e
amendment [4] has been released on April 2012 with the aim
of redesigning the existing IEEE802.15.4-2011 MAC standard
[5] toward a low-power multi-hop MAC, better suitable for the
emerging needs of IoT and embedded industrial applications
[6], [7], [8]. Among other new features,
the Timeslotted
Channel Hopping (TSCH) protocol has been proposed to
address process automation facilities for oil and gas indus-
try, chemical products, water/waste water treatments, green
energy production, climate control [2]. Using TSCH, nodes
synchronize on a slotframe structure, i.e., a group of slots
which repeats over time. Each node follows a schedule which
indicates its operative mode (i.e., transmit, receive, or sleep)
and, in case it is active, the channel to use and the neighbor to
communicate with. The IEEE802.15.4e standard explains how
the MAC layer executes a schedule, but it does not specify how

such a schedule is built.

At the same time, from a networking point of view, the
IETF has recently standardized the Routing Protocol for LLNs
(RPL) [9]. It is a gradient-based routing protocol, which can
easily organize and manage multi-hop topologies based on
short-range low-power links. In the most typical setting, RPL-
enabled nodes are connected through multi-hop paths to a
small set of LLN sinks, which are usually responsible for
data collection and coordination duties. For each of them,
a Destination Oriented Directed Acyclic Graph (DODAG) is
created by accounting for link costs, node attributes/status
information, and an Objective Function, which maps the
optimization requirements of the target scenario. In that case,
each LLN sink assumes the role of DODAG root. A more
sophisticated and ﬂexible conﬁguration could contain a single
DODAG with a virtual DODAG root coordinating several LLN
sinks.

The gradient strategy employed by RPL relies on the deﬁ-
nition of node’s rank, which speciﬁes the individual position
of a node with respect to its (virtual) DODAG root. As a
consequence, the rank should monotonically decrease along
the DODAG and towards the destination, in accordance to
the gradient-based approach. Speciﬁcally, the virtual DODAG
root’s rank is always 0, while the rank of LLN sinks is
1. In general, for each sensor device,
the rank is a real
number, whose integer part, r, accounts for the minimum hop-
distance from the (virtual) DODAG root. Instead, the decimal
part of the rank is used by RPL for selecting the preferred
parent among some candidate ones, according to metrics and
objective functions. In this paper, we are not concerning the
RPL strategy for selecting a preferred parent, hence, for our
purposes, the main information is carried into the integer part r
of the rank. For this motivation and for the sake of exposition,
when referring to rank in what follows, we are considering its
integer part r.

Supported by the strong evidence that the IEEE802.15.4e
TSCH MAC and the IETF RPL protocols are core to a viable
IoT protocol stack [2], we have been facing the problem of
building multi-hop schedules for RPL-organized, TSCH-based
networks [10]. The ﬁrst outcome of such investigation has
been the Trafﬁc-Aware Scheduling Algorithm (TASA) [11],
[12], which builds time/frequency collision-free patterns in a

centralized manner. This strategy allows a master node to
collect information about the entire network topology and
on the trafﬁc load at each node. Afterwards, such master
node computes the schedule for the whole network by ex-
ploiting the graph theory’s matching and vertex-coloring tech-
niques. Finally, it provides each node in the network with its
time/frequency schedule. Such a centralized approach requires
a multi-hop signaling phase, which could impair the power
efﬁciency. Moreover, TASA employs a greedy solution for
allocating transmissions for each timeslot. Therefore, TASA
does not take into account queue congestion. Finally, such
greedy solution ﬁnds an optimal time/frequency pattern, whose
length is not known a priori: in this sense, supporting topolo-
gies with multiple LLN sinks would be not straightforward.
Nevertheless, TASA represents a solid ground for comparison
in future approaches to packet scheduling in multi-hop TSCH
networks.

In this paper, we propose the new Decentralized Traf-
ﬁc Aware Scheduling (DeTAS) algorithm, which, starting
from the same requirements of TASA, ﬁnds the optimum
time/frequency schedule in a decentralized way, while en-
abling a 1-hop signaling and the queue management of device
memory. Remarkably, DeTAS is thought also for multi-sink
topologies.

The rest of the paper is organized as follows: we present
the DeTAS algorithm in Sec. II and a preliminary performance
evaluation with respect to TASA in Sec. III. Finally, in Sec.
IV we draw conclusions and future research.

II. ALGORITHM DESCRIPTION

The suggested DeTAS algorithm is designed for LLN net-
works organized by RPL in a single DODAG. For this reason,
in what follows, we use the RPL terminology [9].

Let {ns}, with s = 1, . . . , NS, be the set of all the NS sinks,
and {ni}, with i = NS + 1, . . . , NS + N be the set of source
nodes. If NS = 1, the LLN sink n1 is also a DODAG root;
otherwise, there is a virtual DODAG root, n0, coordinating all
the NS LLN sinks.

G1
G2G3

n 4

n

1

n 5

n 0

n 2

n 6

n 7

Virtual

DODAG root

LLN sinks

n 3

n 8

n 9

r=0

r=1

r=2

n10 n

11

n

12

n

13

n

14

n

15

n

16

n

17

n

18

r=3

n

19

n

20

n

21

n

22

n

23

n

24

n

25

n26

r=4

Fig. 1: Example of a LLN with a virtual DODAG root, 3 LLN
sinks, and 23 source nodes.

We deﬁne Routing Graph each destination-oriented tree
graph Gs = (Vs, Es), rooted at the LLN sink ns, with s =
1, . . . , NS. Note that {V1, V2, . . . , VS} is a partition of the
set of all nodes (sink and source ones) V = {n1, . . . , nNS+N },
and Es is the set of directed links between each sensor
node ni and its preferred parent, pi. Thus, |Es| = |Vs| − 1.
Furthermore, for each node nl ∈ V, with l = 1, . . . , NS + N ,
it is possible to identify the set ch(nl) of its children, and
the sub-tree STl, composed by nl itself and all the nodes
connected to it through multi-hop paths. It is easy to ﬁnd that
STs ≡ Gs, with s = 1, . . . , NS, i.e., the subtree STs rooted
at the LLN sink ns is the routing graph Gs itself. According
to the network topology built by RPL, and indicating the rank
assigned to a node nl with rnl, it results rnl = rpl + 1.

Figure 1 shows an example network, with the virtual
DODAG root n0 coordinating 3 LLN sinks, n1, n2 and n3.
In turn, each LLN sink coordinates a Routing Graph. In this
sense, the 3 Routing Graphs G1, G2 and G3 are branches of
the same destination-oriented tree graph rooted at n0.

DeTAS is a trafﬁc-aware algorithm that builds the sched-
ule based on the trafﬁc generated by each source node.
We assume that the network supports a multi-point-to-point
trafﬁc. In detail, every source node in the set {ni}, with
i = NS + 1, . . . , NS + N , generates a constant1 integer
number of packets, i.e., the local packet number, qi, within
a slotframe, destined to one among the LLN sinks in the
set {ns}, with s = 1, . . . , NS. For each node nl ∈ V, with
l = 1, . . . , NS + N , we deﬁne also the global packet number,
Ql, as the total amount of packets generated within a slotframe
by the nodes belonging to the sub-tree STl.

A. A general overview

DeTAS is able to build optimum collision-free schedules
for multi-hop IEEE802.15.4e TSCH networks, using a tiny
amount of information, locally exchanged among neighbor
nodes. At the same time, its decentralized nature allows a dis-
tributed computation of such schedule, while keeping very low
the amount of signaling messages exchanged among neighbor
nodes. Whilst scheduling the trafﬁc, DeTAS manages queue
levels, avoiding trafﬁc congestion and, thus, possible packets
drops due to overﬂow of nodes’ memory buffer. Finally,
DeTAS can exploit the availability of the 16 IEEE802.15.4
frequencies [4] in order to: parallelize several transmissions at
the same time, reduce the number of active slots per slotframe
(i.e., the network duty cycle), and increase the reliability of
wireless links.

In a IEEE802.15.4e TSCH network running DeTAS, all de-
vices are assumed to be synchronized with the same slotframe,
having size equal to S time slots. Hence, all nodes follow a
common schedule. The latter is built as a macro-schedule,
given by the combination of a set of micro-schedules, one for
each Routing Graph Gs, with s = 1, . . . , NS. It has to be

1Such an assumption is supported by the fact that trafﬁc is typically different
between sensors, but relatively constant over time in emerging heterogeneous
embedded applications. Actually, with an efﬁcient signaling, DeTAS could
also support variable bit rate trafﬁc ﬂows.

This paper is a preliminary version of a paper published in the Second IEEE WoWMoM Workshop on the Internet of

GTTI 2013 Session on Telecommunication Networks

Things: Smart Objects and Services, IoT-SoS 2013

DeTAS: a Decentralized Trafﬁc Aware Scheduling

technique enabling IoT-compliant Multi-hop

Low-power and Lossy Networks

Nicola Accettura∗, Maria Rita Palattella†, Gennaro Boggia∗, Luigi Alfredo Grieco∗ and Mischa Dohler‡

∗DEI, Politecnico di Bari (Italy), {n.accettura, a.grieco, g.boggia}@poliba.it
†SnT, University of Luxembourg (Luxembourg), maria-rita.palattella@uni.lu

‡CTTC (Spain), mischa.dohler@cttc.es

Abstract—The emerging IEEE802.15.4e standard and IETF
RPL routing protocol provide key functionalities useful
for
a really viable Internet of Things. Indeed, they are core to
the organization of multi-hop Low-power and Lossy Networks.
Nevertheless, the design of effective scheduling schemes in such
systems is one of the major problems, which requires research
efforts in order to be solved. Actually, there are no speciﬁcations
about how schedules should be realized. Trying to ﬁll this gap,
the aim of this paper is twofold. First of all, we present a new
Decentralized Trafﬁc-Aware Scheduling algorithm, which is able
to construct optimum multi-hop schedules in a distributed fash-
ion. Secondly, we prove its effectiveness by means of simulation
results, and we compare such descentralized solution with a
centralized one. The reported performance results encourage the
use of such decentralized scheme, since it allows a very efﬁcient
queue management, while minimizing the network duty cycle as
well.

I. INTRODUCTION

In Internet of Things (IoT) scenarios, a potentially (very)
large number of nodes is able to establish low-power short-
range wireless links,
thus forming a capillary networking
infrastructure that can be connected to the Internet [1]. In order
to actualize the IoT vision, IEEE and IETF standardization
bodies have recently proposed several interesting protocols that
can ease plug and play operations of smart devices in IPv6
networks [2], [3], if properly combined in a communication
stack for Low-power and Lossy Networks (LLNs).

From the MAC layer perspective,

the IEEE802.15.4e
amendment [4] has been released on April 2012 with the aim
of redesigning the existing IEEE802.15.4-2011 MAC standard
[5] toward a low-power multi-hop MAC, better suitable for the
emerging needs of IoT and embedded industrial applications
[6], [7], [8]. Among other new features,
the Timeslotted
Channel Hopping (TSCH) protocol has been proposed to
address process automation facilities for oil and gas indus-
try, chemical products, water/waste water treatments, green
energy production, climate control [2]. Using TSCH, nodes
synchronize on a slotframe structure, i.e., a group of slots
which repeats over time. Each node follows a schedule which
indicates its operative mode (i.e., transmit, receive, or sleep)
and, in case it is active, the channel to use and the neighbor to
communicate with. The IEEE802.15.4e standard explains how
the MAC layer executes a schedule, but it does not specify how

such a schedule is built.

At the same time, from a networking point of view, the
IETF has recently standardized the Routing Protocol for LLNs
(RPL) [9]. It is a gradient-based routing protocol, which can
easily organize and manage multi-hop topologies based on
short-range low-power links. In the most typical setting, RPL-
enabled nodes are connected through multi-hop paths to a
small set of LLN sinks, which are usually responsible for
data collection and coordination duties. For each of them,
a Destination Oriented Directed Acyclic Graph (DODAG) is
created by accounting for link costs, node attributes/status
information, and an Objective Function, which maps the
optimization requirements of the target scenario. In that case,
each LLN sink assumes the role of DODAG root. A more
sophisticated and ﬂexible conﬁguration could contain a single
DODAG with a virtual DODAG root coordinating several LLN
sinks.

The gradient strategy employed by RPL relies on the deﬁ-
nition of node’s rank, which speciﬁes the individual position
of a node with respect to its (virtual) DODAG root. As a
consequence, the rank should monotonically decrease along
the DODAG and towards the destination, in accordance to
the gradient-based approach. Speciﬁcally, the virtual DODAG
root’s rank is always 0, while the rank of LLN sinks is
1. In general, for each sensor device,
the rank is a real
number, whose integer part, r, accounts for the minimum hop-
distance from the (virtual) DODAG root. Instead, the decimal
part of the rank is used by RPL for selecting the preferred
parent among some candidate ones, according to metrics and
objective functions. In this paper, we are not concerning the
RPL strategy for selecting a preferred parent, hence, for our
purposes, the main information is carried into the integer part r
of the rank. For this motivation and for the sake of exposition,
when referring to rank in what follows, we are considering its
integer part r.

Supported by the strong evidence that the IEEE802.15.4e
TSCH MAC and the IETF RPL protocols are core to a viable
IoT protocol stack [2], we have been facing the problem of
building multi-hop schedules for RPL-organized, TSCH-based
networks [10]. The ﬁrst outcome of such investigation has
been the Trafﬁc-Aware Scheduling Algorithm (TASA) [11],
[12], which builds time/frequency collision-free patterns in a

centralized manner. This strategy allows a master node to
collect information about the entire network topology and
on the trafﬁc load at each node. Afterwards, such master
node computes the schedule for the whole network by ex-
ploiting the graph theory’s matching and vertex-coloring tech-
niques. Finally, it provides each node in the network with its
time/frequency schedule. Such a centralized approach requires
a multi-hop signaling phase, which could impair the power
efﬁciency. Moreover, TASA employs a greedy solution for
allocating transmissions for each timeslot. Therefore, TASA
does not take into account queue congestion. Finally, such
greedy solution ﬁnds an optimal time/frequency pattern, whose
length is not known a priori: in this sense, supporting topolo-
gies with multiple LLN sinks would be not straightforward.
Nevertheless, TASA represents a solid ground for comparison
in future approaches to packet scheduling in multi-hop TSCH
networks.

In this paper, we propose the new Decentralized Traf-
ﬁc Aware Scheduling (DeTAS) algorithm, which, starting
from the same requirements of TASA, ﬁnds the optimum
time/frequency schedule in a decentralized way, while en-
abling a 1-hop signaling and the queue management of device
memory. Remarkably, DeTAS is thought also for multi-sink
topologies.

The rest of the paper is organized as follows: we present
the DeTAS algorithm in Sec. II and a preliminary performance
evaluation with respect to TASA in Sec. III. Finally, in Sec.
IV we draw conclusions and future research.

II. ALGORITHM DESCRIPTION

The suggested DeTAS algorithm is designed for LLN net-
works organized by RPL in a single DODAG. For this reason,
in what follows, we use the RPL terminology [9].

Let {ns}, with s = 1, . . . , NS, be the set of all the NS sinks,
and {ni}, with i = NS + 1, . . . , NS + N be the set of source
nodes. If NS = 1, the LLN sink n1 is also a DODAG root;
otherwise, there is a virtual DODAG root, n0, coordinating all
the NS LLN sinks.

G1
G2G3

n 4

n

1

n 5

n 0

n 2

n 6

n 7

Virtual

DODAG root

LLN sinks

n 3

n 8

n 9

r=0

r=1

r=2

n10 n

11

n

12

n

13

n

14

n

15

n

16

n

17

n

18

r=3

n

19

n

20

n

21

n

22

n

23

n

24

n

25

n26

r=4

Fig. 1: Example of a LLN with a virtual DODAG root, 3 LLN
sinks, and 23 source nodes.

We deﬁne Routing Graph each destination-oriented tree
graph Gs = (Vs, Es), rooted at the LLN sink ns, with s =
1, . . . , NS. Note that {V1, V2, . . . , VS} is a partition of the
set of all nodes (sink and source ones) V = {n1, . . . , nNS+N },
and Es is the set of directed links between each sensor
node ni and its preferred parent, pi. Thus, |Es| = |Vs| − 1.
Furthermore, for each node nl ∈ V, with l = 1, . . . , NS + N ,
it is possible to identify the set ch(nl) of its children, and
the sub-tree STl, composed by nl itself and all the nodes
connected to it through multi-hop paths. It is easy to ﬁnd that
STs ≡ Gs, with s = 1, . . . , NS, i.e., the subtree STs rooted
at the LLN sink ns is the routing graph Gs itself. According
to the network topology built by RPL, and indicating the rank
assigned to a node nl with rnl, it results rnl = rpl + 1.

Figure 1 shows an example network, with the virtual
DODAG root n0 coordinating 3 LLN sinks, n1, n2 and n3.
In turn, each LLN sink coordinates a Routing Graph. In this
sense, the 3 Routing Graphs G1, G2 and G3 are branches of
the same destination-oriented tree graph rooted at n0.

DeTAS is a trafﬁc-aware algorithm that builds the sched-
ule based on the trafﬁc generated by each source node.
We assume that the network supports a multi-point-to-point
trafﬁc. In detail, every source node in the set {ni}, with
i = NS + 1, . . . , NS + N , generates a constant1 integer
number of packets, i.e., the local packet number, qi, within
a slotframe, destined to one among the LLN sinks in the
set {ns}, with s = 1, . . . , NS. For each node nl ∈ V, with
l = 1, . . . , NS + N , we deﬁne also the global packet number,
Ql, as the total amount of packets generated within a slotframe
by the nodes belonging to the sub-tree STl.

A. A general overview

DeTAS is able to build optimum collision-free schedules
for multi-hop IEEE802.15.4e TSCH networks, using a tiny
amount of information, locally exchanged among neighbor
nodes. At the same time, its decentralized nature allows a dis-
tributed computation of such schedule, while keeping very low
the amount of signaling messages exchanged among neighbor
nodes. Whilst scheduling the trafﬁc, DeTAS manages queue
levels, avoiding trafﬁc congestion and, thus, possible packets
drops due to overﬂow of nodes’ memory buffer. Finally,
DeTAS can exploit the availability of the 16 IEEE802.15.4
frequencies [4] in order to: parallelize several transmissions at
the same time, reduce the number of active slots per slotframe
(i.e., the network duty cycle), and increase the reliability of
wireless links.

In a IEEE802.15.4e TSCH network running DeTAS, all de-
vices are assumed to be synchronized with the same slotframe,
having size equal to S time slots. Hence, all nodes follow a
common schedule. The latter is built as a macro-schedule,
given by the combination of a set of micro-schedules, one for
each Routing Graph Gs, with s = 1, . . . , NS. It has to be

1Such an assumption is supported by the fact that trafﬁc is typically different
between sensors, but relatively constant over time in emerging heterogeneous
embedded applications. Actually, with an efﬁcient signaling, DeTAS could
also support variable bit rate trafﬁc ﬂows.

noted that, when NS = 1, the macro-schedule includes only
the micro-schedule related to the Routing Graph G1.

In details, for each Routing Graph Gs, with s = 1, . . . , NS,
DeTAS builds a time/frequency micro-schedule, using Ls
time slots and Ws channel offsets2. Such micro-schedule is
setup minimizing the number of active slots, Ls, needed for
delivering to the LLN sink, ns, the trafﬁc load generated by the
source nodes belonging to Gs, during a single slotframe. More
speciﬁcally, all transmissions are scheduled in consecutive Ls
slots, with Ls ≤ S,
leaving the remaining S − Ls slots
empty and, therefore, available for packet transmissions related
to other Routing graphs or other applications (e.g., other
RPL instances). In this manner, the branch of the network
represented by the Routing Graph Gs, will be able to achieve
a duty cycle equal to Ls/S. The length Ls of the micro-
schedule is computed by the LLN sink ns using the formu-
lation introduced in Sec.II-C. Instead, the width of the micro-
schedule, i.e., the number of available channel offsets (and
thus the channels), is Ws = 3, since frequencies are reused
every 3-hops, thus avoiding also collisions due to interference.

t
e
s
ﬀ
O
l
e
n
n
a
h
c

15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0

timeOﬀset

Fig. 2: Displacement of micro-schedules within a slotframe
structure, using 12 channels.

Afterwards, the virtual DODAG root, n0, collects the length
values Ls of each of the NS micro-schedules, as computed
from the LLN sinks it coordinates. It arranges such micro-
schedules into a macro-schedule within the network slotframe.
Speciﬁcally, it makes sure that they do not overlap and they
occupy the smallest number of time slots to provide low duty-
cycle to the whole DODAG. Given that each micro-schedule is
characterized by a width Ws = 3, and assuming that all the 16
IEEE802.15.4 channels are available, it results that maximum
5 Routing Graphs can be micro-scheduled at the same time
within the slotframe, leaving 1 channel offset (and, thus, one
frequency) available for broadcast and/or signaling. The virtual
DODAG root computes the time offset and the channel offset
shift of each micro-schedule, with respect to the start of the
slotframe.

More speciﬁcally, we assume that the number of channels
really used among all the 16 available ones is equal to 3K,
where K is an integer parameter chosen in the interval [1, 5]

2In IEEE802.15.4e, the channel offset is related to the channel hopping
procedure and it is translated into a given frequency; the couple (time slot,
channel offset) deﬁnes the channel used for communications.

for black-listing purposes (i.e., some channels should not be
used if they are more keen to interference and multipath fading
[13], [14]). The suggested DeTAS macro-scheduling technique
collects in a set all the micro-schedules’ lengths Ls, with
s = 1, ..., NS. This set is divided in K subsets, so that the
sums computed over such subsets are as close as possible. The
problem at hand is known as the multiprocessor scheduling
problem [15]; we apply the greedy heuristic described in [16]
for organizing the macro-schedule. Once the partition into K
subsets has been done, all the micro-schedules belonging to
the k-th subset will be activated sequentially, and they will use
the values 3(k − 1), 3(k − 1) + 1 and 3(k − 1) + 2 as channel
offsets. The ﬁnal macro-schedule will have width equal to 3K
channel offsets and time length equal to the maximum sum
among those computed over the K subsets. Fig. 2 shows an
example of macro-schedule that use 12 channels (i.e., K = 4).

B. Decentralized Micro-scheduling

To setup the micro-schedule related to a Routing Graph Gs,
each source node ni ∈ Vs needs to know the amount of trafﬁc
it will receive from its children that should be forwarded to
the parent node pi, toward the LLN sink, ns. Note that every
source node ni can locally compute its global packet number,
Qi, as sum of its local packet number, qi, and the global packet
numbers of its children, and then forward such information to
its parent node, pi. In particular, the LLN sink, ns, needs to
collect information also about the local packet number of its
children. Starting from the aforementioned trafﬁc information,
exchanged at 1-hop distance, the micro-schedule is built in a
distributed fashion, with each node, ni, allocating some slots
within the schedule to its children.

The micro-schedule is built making sure that no collision
the source
occurs in the network. In detail, at any time,
nodes that can simultaneously transmit belong to the subtrees
rooted at only two child nodes of the LLN sink. For instance,
considering the LLN sink n1 in Figure 1 and assuming that
n4 and n5 are the two selected child nodes at a given time,
only the source nodes ∈ ST4 and ∈ ST5 can be scheduled
for packet transmissions simultaneously. Speciﬁcally, a single
packet transmission per odd rank is allowed in ST4 and a
single packet transmission per even rank is allowed in ST5.
Furthermore, in order to avoid collision due to interference,
the same frequency is reused only after 3-hops. Therefore,
each source node ni will transmit packets to its parent, pi,
using a channel offset equal to [(r − 2) mod 3], and receive
packets from its children ∈ ch(ni) with a channel offset equal
to [(r − 1) mod 3].

To avoid buffer overﬂow, in DeTAS each node ni assigns
an alternate sequence of “transmit” and “receive” slots (i.e.,
slots for transmission and reception of packets, respectively) to
every child node. In this way, a queue is emptied of 1 packet,
as soon as it receives a new one, and viceversa. In detail, 2Qi
time slots will be allocated to each node ni, given that it will
receives Qi − qi packets from the other nodes ∈ STi and
transmits Qi packets to its parent pi.

This paper is a preliminary version of a paper published in the Second IEEE WoWMoM Workshop on the Internet of

GTTI 2013 Session on Telecommunication Networks

Things: Smart Objects and Services, IoT-SoS 2013

DeTAS: a Decentralized Trafﬁc Aware Scheduling

technique enabling IoT-compliant Multi-hop

Low-power and Lossy Networks

Nicola Accettura∗, Maria Rita Palattella†, Gennaro Boggia∗, Luigi Alfredo Grieco∗ and Mischa Dohler‡

∗DEI, Politecnico di Bari (Italy), {n.accettura, a.grieco, g.boggia}@poliba.it
†SnT, University of Luxembourg (Luxembourg), maria-rita.palattella@uni.lu

‡CTTC (Spain), mischa.dohler@cttc.es

Abstract—The emerging IEEE802.15.4e standard and IETF
RPL routing protocol provide key functionalities useful
for
a really viable Internet of Things. Indeed, they are core to
the organization of multi-hop Low-power and Lossy Networks.
Nevertheless, the design of effective scheduling schemes in such
systems is one of the major problems, which requires research
efforts in order to be solved. Actually, there are no speciﬁcations
about how schedules should be realized. Trying to ﬁll this gap,
the aim of this paper is twofold. First of all, we present a new
Decentralized Trafﬁc-Aware Scheduling algorithm, which is able
to construct optimum multi-hop schedules in a distributed fash-
ion. Secondly, we prove its effectiveness by means of simulation
results, and we compare such descentralized solution with a
centralized one. The reported performance results encourage the
use of such decentralized scheme, since it allows a very efﬁcient
queue management, while minimizing the network duty cycle as
well.

I. INTRODUCTION

In Internet of Things (IoT) scenarios, a potentially (very)
large number of nodes is able to establish low-power short-
range wireless links,
thus forming a capillary networking
infrastructure that can be connected to the Internet [1]. In order
to actualize the IoT vision, IEEE and IETF standardization
bodies have recently proposed several interesting protocols that
can ease plug and play operations of smart devices in IPv6
networks [2], [3], if properly combined in a communication
stack for Low-power and Lossy Networks (LLNs).

From the MAC layer perspective,

the IEEE802.15.4e
amendment [4] has been released on April 2012 with the aim
of redesigning the existing IEEE802.15.4-2011 MAC standard
[5] toward a low-power multi-hop MAC, better suitable for the
emerging needs of IoT and embedded industrial applications
[6], [7], [8]. Among other new features,
the Timeslotted
Channel Hopping (TSCH) protocol has been proposed to
address process automation facilities for oil and gas indus-
try, chemical products, water/waste water treatments, green
energy production, climate control [2]. Using TSCH, nodes
synchronize on a slotframe structure, i.e., a group of slots
which repeats over time. Each node follows a schedule which
indicates its operative mode (i.e., transmit, receive, or sleep)
and, in case it is active, the channel to use and the neighbor to
communicate with. The IEEE802.15.4e standard explains how
the MAC layer executes a schedule, but it does not specify how

such a schedule is built.

At the same time, from a networking point of view, the
IETF has recently standardized the Routing Protocol for LLNs
(RPL) [9]. It is a gradient-based routing protocol, which can
easily organize and manage multi-hop topologies based on
short-range low-power links. In the most typical setting, RPL-
enabled nodes are connected through multi-hop paths to a
small set of LLN sinks, which are usually responsible for
data collection and coordination duties. For each of them,
a Destination Oriented Directed Acyclic Graph (DODAG) is
created by accounting for link costs, node attributes/status
information, and an Objective Function, which maps the
optimization requirements of the target scenario. In that case,
each LLN sink assumes the role of DODAG root. A more
sophisticated and ﬂexible conﬁguration could contain a single
DODAG with a virtual DODAG root coordinating several LLN
sinks.

The gradient strategy employed by RPL relies on the deﬁ-
nition of node’s rank, which speciﬁes the individual position
of a node with respect to its (virtual) DODAG root. As a
consequence, the rank should monotonically decrease along
the DODAG and towards the destination, in accordance to
the gradient-based approach. Speciﬁcally, the virtual DODAG
root’s rank is always 0, while the rank of LLN sinks is
1. In general, for each sensor device,
the rank is a real
number, whose integer part, r, accounts for the minimum hop-
distance from the (virtual) DODAG root. Instead, the decimal
part of the rank is used by RPL for selecting the preferred
parent among some candidate ones, according to metrics and
objective functions. In this paper, we are not concerning the
RPL strategy for selecting a preferred parent, hence, for our
purposes, the main information is carried into the integer part r
of the rank. For this motivation and for the sake of exposition,
when referring to rank in what follows, we are considering its
integer part r.

Supported by the strong evidence that the IEEE802.15.4e
TSCH MAC and the IETF RPL protocols are core to a viable
IoT protocol stack [2], we have been facing the problem of
building multi-hop schedules for RPL-organized, TSCH-based
networks [10]. The ﬁrst outcome of such investigation has
been the Trafﬁc-Aware Scheduling Algorithm (TASA) [11],
[12], which builds time/frequency collision-free patterns in a

centralized manner. This strategy allows a master node to
collect information about the entire network topology and
on the trafﬁc load at each node. Afterwards, such master
node computes the schedule for the whole network by ex-
ploiting the graph theory’s matching and vertex-coloring tech-
niques. Finally, it provides each node in the network with its
time/frequency schedule. Such a centralized approach requires
a multi-hop signaling phase, which could impair the power
efﬁciency. Moreover, TASA employs a greedy solution for
allocating transmissions for each timeslot. Therefore, TASA
does not take into account queue congestion. Finally, such
greedy solution ﬁnds an optimal time/frequency pattern, whose
length is not known a priori: in this sense, supporting topolo-
gies with multiple LLN sinks would be not straightforward.
Nevertheless, TASA represents a solid ground for comparison
in future approaches to packet scheduling in multi-hop TSCH
networks.

In this paper, we propose the new Decentralized Traf-
ﬁc Aware Scheduling (DeTAS) algorithm, which, starting
from the same requirements of TASA, ﬁnds the optimum
time/frequency schedule in a decentralized way, while en-
abling a 1-hop signaling and the queue management of device
memory. Remarkably, DeTAS is thought also for multi-sink
topologies.

The rest of the paper is organized as follows: we present
the DeTAS algorithm in Sec. II and a preliminary performance
evaluation with respect to TASA in Sec. III. Finally, in Sec.
IV we draw conclusions and future research.

II. ALGORITHM DESCRIPTION

The suggested DeTAS algorithm is designed for LLN net-
works organized by RPL in a single DODAG. For this reason,
in what follows, we use the RPL terminology [9].

Let {ns}, with s = 1, . . . , NS, be the set of all the NS sinks,
and {ni}, with i = NS + 1, . . . , NS + N be the set of source
nodes. If NS = 1, the LLN sink n1 is also a DODAG root;
otherwise, there is a virtual DODAG root, n0, coordinating all
the NS LLN sinks.

G1
G2G3

n 4

n

1

n 5

n 0

n 2

n 6

n 7

Virtual

DODAG root

LLN sinks

n 3

n 8

n 9

r=0

r=1

r=2

n10 n

11

n

12

n

13

n

14

n

15

n

16

n

17

n

18

r=3

n

19

n

20

n

21

n

22

n

23

n

24

n

25

n26

r=4

Fig. 1: Example of a LLN with a virtual DODAG root, 3 LLN
sinks, and 23 source nodes.

We deﬁne Routing Graph each destination-oriented tree
graph Gs = (Vs, Es), rooted at the LLN sink ns, with s =
1, . . . , NS. Note that {V1, V2, . . . , VS} is a partition of the
set of all nodes (sink and source ones) V = {n1, . . . , nNS+N },
and Es is the set of directed links between each sensor
node ni and its preferred parent, pi. Thus, |Es| = |Vs| − 1.
Furthermore, for each node nl ∈ V, with l = 1, . . . , NS + N ,
it is possible to identify the set ch(nl) of its children, and
the sub-tree STl, composed by nl itself and all the nodes
connected to it through multi-hop paths. It is easy to ﬁnd that
STs ≡ Gs, with s = 1, . . . , NS, i.e., the subtree STs rooted
at the LLN sink ns is the routing graph Gs itself. According
to the network topology built by RPL, and indicating the rank
assigned to a node nl with rnl, it results rnl = rpl + 1.

Figure 1 shows an example network, with the virtual
DODAG root n0 coordinating 3 LLN sinks, n1, n2 and n3.
In turn, each LLN sink coordinates a Routing Graph. In this
sense, the 3 Routing Graphs G1, G2 and G3 are branches of
the same destination-oriented tree graph rooted at n0.

DeTAS is a trafﬁc-aware algorithm that builds the sched-
ule based on the trafﬁc generated by each source node.
We assume that the network supports a multi-point-to-point
trafﬁc. In detail, every source node in the set {ni}, with
i = NS + 1, . . . , NS + N , generates a constant1 integer
number of packets, i.e., the local packet number, qi, within
a slotframe, destined to one among the LLN sinks in the
set {ns}, with s = 1, . . . , NS. For each node nl ∈ V, with
l = 1, . . . , NS + N , we deﬁne also the global packet number,
Ql, as the total amount of packets generated within a slotframe
by the nodes belonging to the sub-tree STl.

A. A general overview

DeTAS is able to build optimum collision-free schedules
for multi-hop IEEE802.15.4e TSCH networks, using a tiny
amount of information, locally exchanged among neighbor
nodes. At the same time, its decentralized nature allows a dis-
tributed computation of such schedule, while keeping very low
the amount of signaling messages exchanged among neighbor
nodes. Whilst scheduling the trafﬁc, DeTAS manages queue
levels, avoiding trafﬁc congestion and, thus, possible packets
drops due to overﬂow of nodes’ memory buffer. Finally,
DeTAS can exploit the availability of the 16 IEEE802.15.4
frequencies [4] in order to: parallelize several transmissions at
the same time, reduce the number of active slots per slotframe
(i.e., the network duty cycle), and increase the reliability of
wireless links.

In a IEEE802.15.4e TSCH network running DeTAS, all de-
vices are assumed to be synchronized with the same slotframe,
having size equal to S time slots. Hence, all nodes follow a
common schedule. The latter is built as a macro-schedule,
given by the combination of a set of micro-schedules, one for
each Routing Graph Gs, with s = 1, . . . , NS. It has to be

1Such an assumption is supported by the fact that trafﬁc is typically different
between sensors, but relatively constant over time in emerging heterogeneous
embedded applications. Actually, with an efﬁcient signaling, DeTAS could
also support variable bit rate trafﬁc ﬂows.

noted that, when NS = 1, the macro-schedule includes only
the micro-schedule related to the Routing Graph G1.

In details, for each Routing Graph Gs, with s = 1, . . . , NS,
DeTAS builds a time/frequency micro-schedule, using Ls
time slots and Ws channel offsets2. Such micro-schedule is
setup minimizing the number of active slots, Ls, needed for
delivering to the LLN sink, ns, the trafﬁc load generated by the
source nodes belonging to Gs, during a single slotframe. More
speciﬁcally, all transmissions are scheduled in consecutive Ls
slots, with Ls ≤ S,
leaving the remaining S − Ls slots
empty and, therefore, available for packet transmissions related
to other Routing graphs or other applications (e.g., other
RPL instances). In this manner, the branch of the network
represented by the Routing Graph Gs, will be able to achieve
a duty cycle equal to Ls/S. The length Ls of the micro-
schedule is computed by the LLN sink ns using the formu-
lation introduced in Sec.II-C. Instead, the width of the micro-
schedule, i.e., the number of available channel offsets (and
thus the channels), is Ws = 3, since frequencies are reused
every 3-hops, thus avoiding also collisions due to interference.

t
e
s
ﬀ
O
l
e
n
n
a
h
c

15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0

timeOﬀset

Fig. 2: Displacement of micro-schedules within a slotframe
structure, using 12 channels.

Afterwards, the virtual DODAG root, n0, collects the length
values Ls of each of the NS micro-schedules, as computed
from the LLN sinks it coordinates. It arranges such micro-
schedules into a macro-schedule within the network slotframe.
Speciﬁcally, it makes sure that they do not overlap and they
occupy the smallest number of time slots to provide low duty-
cycle to the whole DODAG. Given that each micro-schedule is
characterized by a width Ws = 3, and assuming that all the 16
IEEE802.15.4 channels are available, it results that maximum
5 Routing Graphs can be micro-scheduled at the same time
within the slotframe, leaving 1 channel offset (and, thus, one
frequency) available for broadcast and/or signaling. The virtual
DODAG root computes the time offset and the channel offset
shift of each micro-schedule, with respect to the start of the
slotframe.

More speciﬁcally, we assume that the number of channels
really used among all the 16 available ones is equal to 3K,
where K is an integer parameter chosen in the interval [1, 5]

2In IEEE802.15.4e, the channel offset is related to the channel hopping
procedure and it is translated into a given frequency; the couple (time slot,
channel offset) deﬁnes the channel used for communications.

for black-listing purposes (i.e., some channels should not be
used if they are more keen to interference and multipath fading
[13], [14]). The suggested DeTAS macro-scheduling technique
collects in a set all the micro-schedules’ lengths Ls, with
s = 1, ..., NS. This set is divided in K subsets, so that the
sums computed over such subsets are as close as possible. The
problem at hand is known as the multiprocessor scheduling
problem [15]; we apply the greedy heuristic described in [16]
for organizing the macro-schedule. Once the partition into K
subsets has been done, all the micro-schedules belonging to
the k-th subset will be activated sequentially, and they will use
the values 3(k − 1), 3(k − 1) + 1 and 3(k − 1) + 2 as channel
offsets. The ﬁnal macro-schedule will have width equal to 3K
channel offsets and time length equal to the maximum sum
among those computed over the K subsets. Fig. 2 shows an
example of macro-schedule that use 12 channels (i.e., K = 4).

B. Decentralized Micro-scheduling

To setup the micro-schedule related to a Routing Graph Gs,
each source node ni ∈ Vs needs to know the amount of trafﬁc
it will receive from its children that should be forwarded to
the parent node pi, toward the LLN sink, ns. Note that every
source node ni can locally compute its global packet number,
Qi, as sum of its local packet number, qi, and the global packet
numbers of its children, and then forward such information to
its parent node, pi. In particular, the LLN sink, ns, needs to
collect information also about the local packet number of its
children. Starting from the aforementioned trafﬁc information,
exchanged at 1-hop distance, the micro-schedule is built in a
distributed fashion, with each node, ni, allocating some slots
within the schedule to its children.

The micro-schedule is built making sure that no collision
the source
occurs in the network. In detail, at any time,
nodes that can simultaneously transmit belong to the subtrees
rooted at only two child nodes of the LLN sink. For instance,
considering the LLN sink n1 in Figure 1 and assuming that
n4 and n5 are the two selected child nodes at a given time,
only the source nodes ∈ ST4 and ∈ ST5 can be scheduled
for packet transmissions simultaneously. Speciﬁcally, a single
packet transmission per odd rank is allowed in ST4 and a
single packet transmission per even rank is allowed in ST5.
Furthermore, in order to avoid collision due to interference,
the same frequency is reused only after 3-hops. Therefore,
each source node ni will transmit packets to its parent, pi,
using a channel offset equal to [(r − 2) mod 3], and receive
packets from its children ∈ ch(ni) with a channel offset equal
to [(r − 1) mod 3].

To avoid buffer overﬂow, in DeTAS each node ni assigns
an alternate sequence of “transmit” and “receive” slots (i.e.,
slots for transmission and reception of packets, respectively) to
every child node. In this way, a queue is emptied of 1 packet,
as soon as it receives a new one, and viceversa. In detail, 2Qi
time slots will be allocated to each node ni, given that it will
receives Qi − qi packets from the other nodes ∈ STi and
transmits Qi packets to its parent pi.

Obviously, to allow packets to be correctly sent and re-
ceived, the transmit slots of the children ∈ ch(ni) must be
synchronized with the receive slots of the parent, pi. Thus, it
follows that a sub-tree STi rooted at a node ni can be even-
or odd-scheduled, i.e., it can follow an even or odd micro-
schedule.

Deﬁnition 1. A subtree STi is even-scheduled, if all nodes
∈ STi with even r transmit in even time slots, indicating with
0 the ﬁrst slot in the schedule, and those with odd r transmit
in odd time slots.

Deﬁnition 2. A subtree STi is odd-scheduled, if all nodes
∈ STi with even r transmit in odd time slots, indicating with
0 the ﬁrst slot in the schedule, and those with odd r transmit
in even time slots.

n 4

n10

n11

2Q4

2Q10

2(Q 4 -q 4 )

2(Q10-q 10)

2Q11

2(Q11-q 11)

Fig. 3: Even micro-schedule for nodes belonging to ST4 of
DODAG in Fig. 1.

Fig. 3 shows an even micro-schedule followed by the sub-
tree ST4 of the DODAG in Fig. 1, and, details the time slots
reserved to the nodes n4, n10 and n11. We can see that n4,
having even r spends the Qi even time slots in transmission,
the ﬁrst Qi − qi odd time slots in reception, and the last qi
odd time slots in idle (having already received all the packets
from its children n10 and n11).

C. Micro-schedule length Ls

Even though the micro-schedule is built with a distributed
approach, it is initialized by the LLN sink, ns, that computes
the length Ls of the micro-schedule, and selects, among the
sub-trees rooted at its children, the ones to be even-scheduled,
and thus, those to be odd-scheduled.

Being DeTAS a trafﬁc-aware scheduling algorithm,

the
length, Ls, of the micro-schedule is a function of the network
trafﬁc. In fact, the LLN sink can receive at most one packet
per time slot (i.e., Ls ≥ Qs). At the same time, the child of
the LLN sink, referred hereafter as nM , having the maximum
global packet number, i.e., QM = maxni∈ch(ns) Qi, will need
a schedule long enough for containing QM transmit slots and
QM − qM receive slots, i.e., Ls ≥ 2QM − qM . For every
randomly scattered physical topology, the proposed DeTAS
scheme is able to ﬁnd the optimum schedule with the minimum
length, given by:

Ls = max {2QM − qM , Qs} .

(1)

sub-tree rooted at another sink’ child is odd-scheduled, thus,
they will not incur in any kind of collision, since the related
schedules are perfectly overlapped. Therefore, a LLN sink
running DeTAS must divide its children in two lists, i.e., an
even list and an odd one. The sub-trees rooted at the children
in the even list could be sequentially even-scheduled, for a
total even-schedule with a length equal to Le
s time slots. At
the same time, the sub-trees rooted at the children in the
odd list could be sequentially odd-scheduled, for a total odd-
schedule with a length equal to Lo
s time slots. Obviously,
those lists should be load balanced, since the schedule length
Ls will be equal to the maximum between Le
s. This
load balancing problem falls into the class of multiprocessor
scheduling problems [15]. The greedy heuristic employed in
this paper is the same described in [16]: the sink’ children
are ordered in a descending order, according to their global
packet number. Then, they are appended subsequently to the
list (even or odd) with the current smallest sum of global
packet numbers.

s and Lo

DeTAS assumes a different behavior depending on the
trafﬁc loads of the children of the LLN sink. Speciﬁcally,
if QM ≥ Qs/2, the node nM will be the only one in the
even-list. DeTAS will odd-schedules subsequently the sub-tree
rooted at the nodes in the odd-list. At the same time, it will
even-schedule the sub-tree STM for exactly 2(QM − α) slots,
where:

α = min{2(Qs − QM ), qM }.

(2)

It can be shown that, after this phase, the number of packets
to be still received by the LLN sink would be equal to α, and
that those packets would be located on nM . Hence, nM will
allocate the following α consecutive time slots for transmitting
the pending packets to the LLN sink. It can be veriﬁed that
eq. (1) is always fulﬁlled. In such case, the node nM should
be informed about α, in order to compute accordingly the
instant when switching from the even-scheduling mode to the
continuos one.

When QM < Qs/2, DeTAS reduces the discrepancy be-
s, computed over the global packet numbers
tween the sum Qe
related to the even-list, and the sum Qo
s, computed over the
odd-list, to 1 (if Qs is odd) or 0 (if Qs is even). It is worth to
note that Qe
s = Qs. The LLN sink computes the value
β, which levels off the two lists:

s + Qo

s − Qo
s

β = (cid:22) Qe

2

(cid:23)

(3)

and it selects the ﬁrst child in the list with the maximum
associated sum of global packets numbers, referred hereafter
as ncut. If β ≥ 0 (β < 0)3, DeTAS will even-schedule (odd-
schedule) ﬁrstly the sub-tree STcut for 2(Qcut − |β|) time
slots and, then, all the sub-trees related to the other nodes
appended in the even-list (odd-list). Simultaneously, it will
odd-schedule (even-schedule) ﬁrstly all the sub-trees related to
the nodes in the odd-list (even-list), then the sub-tree STcut

To this aim, DeTAS simultaneously guarantees that a single
sub-tree rooted at a sink’ child is even-scheduled, while the

3In the rest of the paragraph, we indicate the alternative case and the related

settings in brackets.

This paper is a preliminary version of a paper published in the Second IEEE WoWMoM Workshop on the Internet of

GTTI 2013 Session on Telecommunication Networks

Things: Smart Objects and Services, IoT-SoS 2013

DeTAS: a Decentralized Trafﬁc Aware Scheduling

technique enabling IoT-compliant Multi-hop

Low-power and Lossy Networks

Nicola Accettura∗, Maria Rita Palattella†, Gennaro Boggia∗, Luigi Alfredo Grieco∗ and Mischa Dohler‡

∗DEI, Politecnico di Bari (Italy), {n.accettura, a.grieco, g.boggia}@poliba.it
†SnT, University of Luxembourg (Luxembourg), maria-rita.palattella@uni.lu

‡CTTC (Spain), mischa.dohler@cttc.es

Abstract—The emerging IEEE802.15.4e standard and IETF
RPL routing protocol provide key functionalities useful
for
a really viable Internet of Things. Indeed, they are core to
the organization of multi-hop Low-power and Lossy Networks.
Nevertheless, the design of effective scheduling schemes in such
systems is one of the major problems, which requires research
efforts in order to be solved. Actually, there are no speciﬁcations
about how schedules should be realized. Trying to ﬁll this gap,
the aim of this paper is twofold. First of all, we present a new
Decentralized Trafﬁc-Aware Scheduling algorithm, which is able
to construct optimum multi-hop schedules in a distributed fash-
ion. Secondly, we prove its effectiveness by means of simulation
results, and we compare such descentralized solution with a
centralized one. The reported performance results encourage the
use of such decentralized scheme, since it allows a very efﬁcient
queue management, while minimizing the network duty cycle as
well.

I. INTRODUCTION

In Internet of Things (IoT) scenarios, a potentially (very)
large number of nodes is able to establish low-power short-
range wireless links,
thus forming a capillary networking
infrastructure that can be connected to the Internet [1]. In order
to actualize the IoT vision, IEEE and IETF standardization
bodies have recently proposed several interesting protocols that
can ease plug and play operations of smart devices in IPv6
networks [2], [3], if properly combined in a communication
stack for Low-power and Lossy Networks (LLNs).

From the MAC layer perspective,

the IEEE802.15.4e
amendment [4] has been released on April 2012 with the aim
of redesigning the existing IEEE802.15.4-2011 MAC standard
[5] toward a low-power multi-hop MAC, better suitable for the
emerging needs of IoT and embedded industrial applications
[6], [7], [8]. Among other new features,
the Timeslotted
Channel Hopping (TSCH) protocol has been proposed to
address process automation facilities for oil and gas indus-
try, chemical products, water/waste water treatments, green
energy production, climate control [2]. Using TSCH, nodes
synchronize on a slotframe structure, i.e., a group of slots
which repeats over time. Each node follows a schedule which
indicates its operative mode (i.e., transmit, receive, or sleep)
and, in case it is active, the channel to use and the neighbor to
communicate with. The IEEE802.15.4e standard explains how
the MAC layer executes a schedule, but it does not specify how

such a schedule is built.

At the same time, from a networking point of view, the
IETF has recently standardized the Routing Protocol for LLNs
(RPL) [9]. It is a gradient-based routing protocol, which can
easily organize and manage multi-hop topologies based on
short-range low-power links. In the most typical setting, RPL-
enabled nodes are connected through multi-hop paths to a
small set of LLN sinks, which are usually responsible for
data collection and coordination duties. For each of them,
a Destination Oriented Directed Acyclic Graph (DODAG) is
created by accounting for link costs, node attributes/status
information, and an Objective Function, which maps the
optimization requirements of the target scenario. In that case,
each LLN sink assumes the role of DODAG root. A more
sophisticated and ﬂexible conﬁguration could contain a single
DODAG with a virtual DODAG root coordinating several LLN
sinks.

The gradient strategy employed by RPL relies on the deﬁ-
nition of node’s rank, which speciﬁes the individual position
of a node with respect to its (virtual) DODAG root. As a
consequence, the rank should monotonically decrease along
the DODAG and towards the destination, in accordance to
the gradient-based approach. Speciﬁcally, the virtual DODAG
root’s rank is always 0, while the rank of LLN sinks is
1. In general, for each sensor device,
the rank is a real
number, whose integer part, r, accounts for the minimum hop-
distance from the (virtual) DODAG root. Instead, the decimal
part of the rank is used by RPL for selecting the preferred
parent among some candidate ones, according to metrics and
objective functions. In this paper, we are not concerning the
RPL strategy for selecting a preferred parent, hence, for our
purposes, the main information is carried into the integer part r
of the rank. For this motivation and for the sake of exposition,
when referring to rank in what follows, we are considering its
integer part r.

Supported by the strong evidence that the IEEE802.15.4e
TSCH MAC and the IETF RPL protocols are core to a viable
IoT protocol stack [2], we have been facing the problem of
building multi-hop schedules for RPL-organized, TSCH-based
networks [10]. The ﬁrst outcome of such investigation has
been the Trafﬁc-Aware Scheduling Algorithm (TASA) [11],
[12], which builds time/frequency collision-free patterns in a

centralized manner. This strategy allows a master node to
collect information about the entire network topology and
on the trafﬁc load at each node. Afterwards, such master
node computes the schedule for the whole network by ex-
ploiting the graph theory’s matching and vertex-coloring tech-
niques. Finally, it provides each node in the network with its
time/frequency schedule. Such a centralized approach requires
a multi-hop signaling phase, which could impair the power
efﬁciency. Moreover, TASA employs a greedy solution for
allocating transmissions for each timeslot. Therefore, TASA
does not take into account queue congestion. Finally, such
greedy solution ﬁnds an optimal time/frequency pattern, whose
length is not known a priori: in this sense, supporting topolo-
gies with multiple LLN sinks would be not straightforward.
Nevertheless, TASA represents a solid ground for comparison
in future approaches to packet scheduling in multi-hop TSCH
networks.

In this paper, we propose the new Decentralized Traf-
ﬁc Aware Scheduling (DeTAS) algorithm, which, starting
from the same requirements of TASA, ﬁnds the optimum
time/frequency schedule in a decentralized way, while en-
abling a 1-hop signaling and the queue management of device
memory. Remarkably, DeTAS is thought also for multi-sink
topologies.

The rest of the paper is organized as follows: we present
the DeTAS algorithm in Sec. II and a preliminary performance
evaluation with respect to TASA in Sec. III. Finally, in Sec.
IV we draw conclusions and future research.

II. ALGORITHM DESCRIPTION

The suggested DeTAS algorithm is designed for LLN net-
works organized by RPL in a single DODAG. For this reason,
in what follows, we use the RPL terminology [9].

Let {ns}, with s = 1, . . . , NS, be the set of all the NS sinks,
and {ni}, with i = NS + 1, . . . , NS + N be the set of source
nodes. If NS = 1, the LLN sink n1 is also a DODAG root;
otherwise, there is a virtual DODAG root, n0, coordinating all
the NS LLN sinks.

G1
G2G3

n 4

n

1

n 5

n 0

n 2

n 6

n 7

Virtual

DODAG root

LLN sinks

n 3

n 8

n 9

r=0

r=1

r=2

n10 n

11

n

12

n

13

n

14

n

15

n

16

n

17

n

18

r=3

n

19

n

20

n

21

n

22

n

23

n

24

n

25

n26

r=4

Fig. 1: Example of a LLN with a virtual DODAG root, 3 LLN
sinks, and 23 source nodes.

We deﬁne Routing Graph each destination-oriented tree
graph Gs = (Vs, Es), rooted at the LLN sink ns, with s =
1, . . . , NS. Note that {V1, V2, . . . , VS} is a partition of the
set of all nodes (sink and source ones) V = {n1, . . . , nNS+N },
and Es is the set of directed links between each sensor
node ni and its preferred parent, pi. Thus, |Es| = |Vs| − 1.
Furthermore, for each node nl ∈ V, with l = 1, . . . , NS + N ,
it is possible to identify the set ch(nl) of its children, and
the sub-tree STl, composed by nl itself and all the nodes
connected to it through multi-hop paths. It is easy to ﬁnd that
STs ≡ Gs, with s = 1, . . . , NS, i.e., the subtree STs rooted
at the LLN sink ns is the routing graph Gs itself. According
to the network topology built by RPL, and indicating the rank
assigned to a node nl with rnl, it results rnl = rpl + 1.

Figure 1 shows an example network, with the virtual
DODAG root n0 coordinating 3 LLN sinks, n1, n2 and n3.
In turn, each LLN sink coordinates a Routing Graph. In this
sense, the 3 Routing Graphs G1, G2 and G3 are branches of
the same destination-oriented tree graph rooted at n0.

DeTAS is a trafﬁc-aware algorithm that builds the sched-
ule based on the trafﬁc generated by each source node.
We assume that the network supports a multi-point-to-point
trafﬁc. In detail, every source node in the set {ni}, with
i = NS + 1, . . . , NS + N , generates a constant1 integer
number of packets, i.e., the local packet number, qi, within
a slotframe, destined to one among the LLN sinks in the
set {ns}, with s = 1, . . . , NS. For each node nl ∈ V, with
l = 1, . . . , NS + N , we deﬁne also the global packet number,
Ql, as the total amount of packets generated within a slotframe
by the nodes belonging to the sub-tree STl.

A. A general overview

DeTAS is able to build optimum collision-free schedules
for multi-hop IEEE802.15.4e TSCH networks, using a tiny
amount of information, locally exchanged among neighbor
nodes. At the same time, its decentralized nature allows a dis-
tributed computation of such schedule, while keeping very low
the amount of signaling messages exchanged among neighbor
nodes. Whilst scheduling the trafﬁc, DeTAS manages queue
levels, avoiding trafﬁc congestion and, thus, possible packets
drops due to overﬂow of nodes’ memory buffer. Finally,
DeTAS can exploit the availability of the 16 IEEE802.15.4
frequencies [4] in order to: parallelize several transmissions at
the same time, reduce the number of active slots per slotframe
(i.e., the network duty cycle), and increase the reliability of
wireless links.

In a IEEE802.15.4e TSCH network running DeTAS, all de-
vices are assumed to be synchronized with the same slotframe,
having size equal to S time slots. Hence, all nodes follow a
common schedule. The latter is built as a macro-schedule,
given by the combination of a set of micro-schedules, one for
each Routing Graph Gs, with s = 1, . . . , NS. It has to be

1Such an assumption is supported by the fact that trafﬁc is typically different
between sensors, but relatively constant over time in emerging heterogeneous
embedded applications. Actually, with an efﬁcient signaling, DeTAS could
also support variable bit rate trafﬁc ﬂows.

noted that, when NS = 1, the macro-schedule includes only
the micro-schedule related to the Routing Graph G1.

In details, for each Routing Graph Gs, with s = 1, . . . , NS,
DeTAS builds a time/frequency micro-schedule, using Ls
time slots and Ws channel offsets2. Such micro-schedule is
setup minimizing the number of active slots, Ls, needed for
delivering to the LLN sink, ns, the trafﬁc load generated by the
source nodes belonging to Gs, during a single slotframe. More
speciﬁcally, all transmissions are scheduled in consecutive Ls
slots, with Ls ≤ S,
leaving the remaining S − Ls slots
empty and, therefore, available for packet transmissions related
to other Routing graphs or other applications (e.g., other
RPL instances). In this manner, the branch of the network
represented by the Routing Graph Gs, will be able to achieve
a duty cycle equal to Ls/S. The length Ls of the micro-
schedule is computed by the LLN sink ns using the formu-
lation introduced in Sec.II-C. Instead, the width of the micro-
schedule, i.e., the number of available channel offsets (and
thus the channels), is Ws = 3, since frequencies are reused
every 3-hops, thus avoiding also collisions due to interference.

t
e
s
ﬀ
O
l
e
n
n
a
h
c

15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0

timeOﬀset

Fig. 2: Displacement of micro-schedules within a slotframe
structure, using 12 channels.

Afterwards, the virtual DODAG root, n0, collects the length
values Ls of each of the NS micro-schedules, as computed
from the LLN sinks it coordinates. It arranges such micro-
schedules into a macro-schedule within the network slotframe.
Speciﬁcally, it makes sure that they do not overlap and they
occupy the smallest number of time slots to provide low duty-
cycle to the whole DODAG. Given that each micro-schedule is
characterized by a width Ws = 3, and assuming that all the 16
IEEE802.15.4 channels are available, it results that maximum
5 Routing Graphs can be micro-scheduled at the same time
within the slotframe, leaving 1 channel offset (and, thus, one
frequency) available for broadcast and/or signaling. The virtual
DODAG root computes the time offset and the channel offset
shift of each micro-schedule, with respect to the start of the
slotframe.

More speciﬁcally, we assume that the number of channels
really used among all the 16 available ones is equal to 3K,
where K is an integer parameter chosen in the interval [1, 5]

2In IEEE802.15.4e, the channel offset is related to the channel hopping
procedure and it is translated into a given frequency; the couple (time slot,
channel offset) deﬁnes the channel used for communications.

for black-listing purposes (i.e., some channels should not be
used if they are more keen to interference and multipath fading
[13], [14]). The suggested DeTAS macro-scheduling technique
collects in a set all the micro-schedules’ lengths Ls, with
s = 1, ..., NS. This set is divided in K subsets, so that the
sums computed over such subsets are as close as possible. The
problem at hand is known as the multiprocessor scheduling
problem [15]; we apply the greedy heuristic described in [16]
for organizing the macro-schedule. Once the partition into K
subsets has been done, all the micro-schedules belonging to
the k-th subset will be activated sequentially, and they will use
the values 3(k − 1), 3(k − 1) + 1 and 3(k − 1) + 2 as channel
offsets. The ﬁnal macro-schedule will have width equal to 3K
channel offsets and time length equal to the maximum sum
among those computed over the K subsets. Fig. 2 shows an
example of macro-schedule that use 12 channels (i.e., K = 4).

B. Decentralized Micro-scheduling

To setup the micro-schedule related to a Routing Graph Gs,
each source node ni ∈ Vs needs to know the amount of trafﬁc
it will receive from its children that should be forwarded to
the parent node pi, toward the LLN sink, ns. Note that every
source node ni can locally compute its global packet number,
Qi, as sum of its local packet number, qi, and the global packet
numbers of its children, and then forward such information to
its parent node, pi. In particular, the LLN sink, ns, needs to
collect information also about the local packet number of its
children. Starting from the aforementioned trafﬁc information,
exchanged at 1-hop distance, the micro-schedule is built in a
distributed fashion, with each node, ni, allocating some slots
within the schedule to its children.

The micro-schedule is built making sure that no collision
the source
occurs in the network. In detail, at any time,
nodes that can simultaneously transmit belong to the subtrees
rooted at only two child nodes of the LLN sink. For instance,
considering the LLN sink n1 in Figure 1 and assuming that
n4 and n5 are the two selected child nodes at a given time,
only the source nodes ∈ ST4 and ∈ ST5 can be scheduled
for packet transmissions simultaneously. Speciﬁcally, a single
packet transmission per odd rank is allowed in ST4 and a
single packet transmission per even rank is allowed in ST5.
Furthermore, in order to avoid collision due to interference,
the same frequency is reused only after 3-hops. Therefore,
each source node ni will transmit packets to its parent, pi,
using a channel offset equal to [(r − 2) mod 3], and receive
packets from its children ∈ ch(ni) with a channel offset equal
to [(r − 1) mod 3].

To avoid buffer overﬂow, in DeTAS each node ni assigns
an alternate sequence of “transmit” and “receive” slots (i.e.,
slots for transmission and reception of packets, respectively) to
every child node. In this way, a queue is emptied of 1 packet,
as soon as it receives a new one, and viceversa. In detail, 2Qi
time slots will be allocated to each node ni, given that it will
receives Qi − qi packets from the other nodes ∈ STi and
transmits Qi packets to its parent pi.

Obviously, to allow packets to be correctly sent and re-
ceived, the transmit slots of the children ∈ ch(ni) must be
synchronized with the receive slots of the parent, pi. Thus, it
follows that a sub-tree STi rooted at a node ni can be even-
or odd-scheduled, i.e., it can follow an even or odd micro-
schedule.

Deﬁnition 1. A subtree STi is even-scheduled, if all nodes
∈ STi with even r transmit in even time slots, indicating with
0 the ﬁrst slot in the schedule, and those with odd r transmit
in odd time slots.

Deﬁnition 2. A subtree STi is odd-scheduled, if all nodes
∈ STi with even r transmit in odd time slots, indicating with
0 the ﬁrst slot in the schedule, and those with odd r transmit
in even time slots.

n 4

n10

n11

2Q4

2Q10

2(Q 4 -q 4 )

2(Q10-q 10)

2Q11

2(Q11-q 11)

Fig. 3: Even micro-schedule for nodes belonging to ST4 of
DODAG in Fig. 1.

Fig. 3 shows an even micro-schedule followed by the sub-
tree ST4 of the DODAG in Fig. 1, and, details the time slots
reserved to the nodes n4, n10 and n11. We can see that n4,
having even r spends the Qi even time slots in transmission,
the ﬁrst Qi − qi odd time slots in reception, and the last qi
odd time slots in idle (having already received all the packets
from its children n10 and n11).

C. Micro-schedule length Ls

Even though the micro-schedule is built with a distributed
approach, it is initialized by the LLN sink, ns, that computes
the length Ls of the micro-schedule, and selects, among the
sub-trees rooted at its children, the ones to be even-scheduled,
and thus, those to be odd-scheduled.

Being DeTAS a trafﬁc-aware scheduling algorithm,

the
length, Ls, of the micro-schedule is a function of the network
trafﬁc. In fact, the LLN sink can receive at most one packet
per time slot (i.e., Ls ≥ Qs). At the same time, the child of
the LLN sink, referred hereafter as nM , having the maximum
global packet number, i.e., QM = maxni∈ch(ns) Qi, will need
a schedule long enough for containing QM transmit slots and
QM − qM receive slots, i.e., Ls ≥ 2QM − qM . For every
randomly scattered physical topology, the proposed DeTAS
scheme is able to ﬁnd the optimum schedule with the minimum
length, given by:

Ls = max {2QM − qM , Qs} .

(1)

sub-tree rooted at another sink’ child is odd-scheduled, thus,
they will not incur in any kind of collision, since the related
schedules are perfectly overlapped. Therefore, a LLN sink
running DeTAS must divide its children in two lists, i.e., an
even list and an odd one. The sub-trees rooted at the children
in the even list could be sequentially even-scheduled, for a
total even-schedule with a length equal to Le
s time slots. At
the same time, the sub-trees rooted at the children in the
odd list could be sequentially odd-scheduled, for a total odd-
schedule with a length equal to Lo
s time slots. Obviously,
those lists should be load balanced, since the schedule length
Ls will be equal to the maximum between Le
s. This
load balancing problem falls into the class of multiprocessor
scheduling problems [15]. The greedy heuristic employed in
this paper is the same described in [16]: the sink’ children
are ordered in a descending order, according to their global
packet number. Then, they are appended subsequently to the
list (even or odd) with the current smallest sum of global
packet numbers.

s and Lo

DeTAS assumes a different behavior depending on the
trafﬁc loads of the children of the LLN sink. Speciﬁcally,
if QM ≥ Qs/2, the node nM will be the only one in the
even-list. DeTAS will odd-schedules subsequently the sub-tree
rooted at the nodes in the odd-list. At the same time, it will
even-schedule the sub-tree STM for exactly 2(QM − α) slots,
where:

α = min{2(Qs − QM ), qM }.

(2)

It can be shown that, after this phase, the number of packets
to be still received by the LLN sink would be equal to α, and
that those packets would be located on nM . Hence, nM will
allocate the following α consecutive time slots for transmitting
the pending packets to the LLN sink. It can be veriﬁed that
eq. (1) is always fulﬁlled. In such case, the node nM should
be informed about α, in order to compute accordingly the
instant when switching from the even-scheduling mode to the
continuos one.

When QM < Qs/2, DeTAS reduces the discrepancy be-
s, computed over the global packet numbers
tween the sum Qe
related to the even-list, and the sum Qo
s, computed over the
odd-list, to 1 (if Qs is odd) or 0 (if Qs is even). It is worth to
note that Qe
s = Qs. The LLN sink computes the value
β, which levels off the two lists:

s + Qo

s − Qo
s

β = (cid:22) Qe

2

(cid:23)

(3)

and it selects the ﬁrst child in the list with the maximum
associated sum of global packets numbers, referred hereafter
as ncut. If β ≥ 0 (β < 0)3, DeTAS will even-schedule (odd-
schedule) ﬁrstly the sub-tree STcut for 2(Qcut − |β|) time
slots and, then, all the sub-trees related to the other nodes
appended in the even-list (odd-list). Simultaneously, it will
odd-schedule (even-schedule) ﬁrstly all the sub-trees related to
the nodes in the odd-list (even-list), then the sub-tree STcut

To this aim, DeTAS simultaneously guarantees that a single
sub-tree rooted at a sink’ child is even-scheduled, while the

3In the rest of the paragraph, we indicate the alternative case and the related

settings in brackets.

for exactly 2|β| time slots. It can be shown that the micro-
schedule length is always Ls = Qs, according to eq. (1). In
this trafﬁc load conditions, ncut should be informed by the
LLN sink about when to even- and when to odd-schedule
STcut. This information must be accordingly updated and
propagated along STcut.

III. PERFORMANCE EVALUATION

Herein, some preliminary simulation results are present in
order to show the effectiveness of the proposed scheme in
terms of maximum queue occupation in the source nodes.
We highlight that the maximum queue occupation has been
selected as performance parameter because it indicates how
much trafﬁc load can be managed by source nodes, avoiding
packet discards due to possible buffer overﬂows.

Results obtained with DeTAS have been compared with
the ones achieved exploiting the TASA algorithm which, as
known, has very good performance in IEEE802.15.4e net-
works [11]. We consider only single sink topologies, i.e., with
a single LLN sink acting as DODAG root, in order to picture
also a fair comparison between DeTAS and TASA.

Results have been obtained by using an ad-hoc simulator
written with the Python language. We have simulated a TSCH
network with a tree topology, deployed in an area of 200×200
m2. Each node, located in a random position in the network,
has a coverage range R = 50 m. Since DeTAS builds the
schedule based on the network topology, we analyze the
performance in several scenarios, varying the total number of
nodes, N in the interval [30, 150]. For each network size, we
have also considered 25 different random displacements for
the source nodes.

Given that DeTAS allocates time slots and channel offsets
based not only on the network topology, but also on the trafﬁc
load. We test the algorithm under different trafﬁc conditions:
we assume that the average number of packets, ¯npkt, generated
by each node within a single slotframe can vary between 3
and 5. Speciﬁcally, we have imposed that, at the beginning
of the slotframe, each node generates a number of packets,
randomly selected in the range [1, 5] (if ¯npkt = 3) and [1, 9] (if
¯npkt = 5). To better characterize the performance comparison,
for each average number of packets, we have also considered
25 different random arrangements for the trafﬁc load on each
source node. We further assume that the slotframe size S
is as large as to contain the whole schedules computed by
DeTAS. Finally, we assume for TASA a number of 3 available
channels.

Figures 4, 5 and 6, show the maximum queue occupation
as function of the rank of the source nodes, in three different
network scenario, having respectively 30, 90, and 150 source
nodes. These results have been obtained, averaging on 625
simulations runs, derived from the combination of 25 different
network-topologies and 25 different trafﬁc load sets.

From the above ﬁgures, we can observe how DeTAS queue
management provides a bounded quasi-deterministic queue
occupation, since the standard deviation is close to 0.

¯npkt=3, DeTAS
¯npkt=3, TASA
¯npkt=5, DeTAS
¯npkt=5, TASA

70

60

50

40

30

20

10

]
s
t
e
k
c
a
p

[

e
z
i
s

e
u
e
u
q
m
u
m
i
x
a
M

0
1

2

3

4

6

5
Rank (r)

7

8

9

10 11

Fig. 4: Maximum queue occupation as function of r, in LLNs
with 30 source nodes.

70

60

50

40

30

20

10

]
s
t
e
k
c
a
p

[

e
z
i
s

e
u
e
u
q
m
u
m
i
x
a
M

0
1

¯npkt=3, DeTAS
¯npkt=3, TASA
¯npkt=5, DeTAS
¯npkt=5, TASA

2

3

4

5

Rank (r)

6

7

8

9

Fig. 5: Maximum queue occupation as function of r, in LLNs
with 90 source nodes.

¯npkt=3, DeTAS
¯npkt=3, TASA
¯npkt=5, DeTAS
¯npkt=5, TASA

70

60

50

40

30

20

10

]
s
t
e
k
c
a
p

[

e
z
i
s

e
u
e
u
q
m
u
m
i
x
a
M

0
1

2

3

5
4
Rank (r)

6

7

8

Fig. 6: Maximum queue occupation as function of r, in LLNs
with 150 source nodes.

This paper is a preliminary version of a paper published in the Second IEEE WoWMoM Workshop on the Internet of

GTTI 2013 Session on Telecommunication Networks

Things: Smart Objects and Services, IoT-SoS 2013

DeTAS: a Decentralized Trafﬁc Aware Scheduling

technique enabling IoT-compliant Multi-hop

Low-power and Lossy Networks

Nicola Accettura∗, Maria Rita Palattella†, Gennaro Boggia∗, Luigi Alfredo Grieco∗ and Mischa Dohler‡

∗DEI, Politecnico di Bari (Italy), {n.accettura, a.grieco, g.boggia}@poliba.it
†SnT, University of Luxembourg (Luxembourg), maria-rita.palattella@uni.lu

‡CTTC (Spain), mischa.dohler@cttc.es

Abstract—The emerging IEEE802.15.4e standard and IETF
RPL routing protocol provide key functionalities useful
for
a really viable Internet of Things. Indeed, they are core to
the organization of multi-hop Low-power and Lossy Networks.
Nevertheless, the design of effective scheduling schemes in such
systems is one of the major problems, which requires research
efforts in order to be solved. Actually, there are no speciﬁcations
about how schedules should be realized. Trying to ﬁll this gap,
the aim of this paper is twofold. First of all, we present a new
Decentralized Trafﬁc-Aware Scheduling algorithm, which is able
to construct optimum multi-hop schedules in a distributed fash-
ion. Secondly, we prove its effectiveness by means of simulation
results, and we compare such descentralized solution with a
centralized one. The reported performance results encourage the
use of such decentralized scheme, since it allows a very efﬁcient
queue management, while minimizing the network duty cycle as
well.

I. INTRODUCTION

In Internet of Things (IoT) scenarios, a potentially (very)
large number of nodes is able to establish low-power short-
range wireless links,
thus forming a capillary networking
infrastructure that can be connected to the Internet [1]. In order
to actualize the IoT vision, IEEE and IETF standardization
bodies have recently proposed several interesting protocols that
can ease plug and play operations of smart devices in IPv6
networks [2], [3], if properly combined in a communication
stack for Low-power and Lossy Networks (LLNs).

From the MAC layer perspective,

the IEEE802.15.4e
amendment [4] has been released on April 2012 with the aim
of redesigning the existing IEEE802.15.4-2011 MAC standard
[5] toward a low-power multi-hop MAC, better suitable for the
emerging needs of IoT and embedded industrial applications
[6], [7], [8]. Among other new features,
the Timeslotted
Channel Hopping (TSCH) protocol has been proposed to
address process automation facilities for oil and gas indus-
try, chemical products, water/waste water treatments, green
energy production, climate control [2]. Using TSCH, nodes
synchronize on a slotframe structure, i.e., a group of slots
which repeats over time. Each node follows a schedule which
indicates its operative mode (i.e., transmit, receive, or sleep)
and, in case it is active, the channel to use and the neighbor to
communicate with. The IEEE802.15.4e standard explains how
the MAC layer executes a schedule, but it does not specify how

such a schedule is built.

At the same time, from a networking point of view, the
IETF has recently standardized the Routing Protocol for LLNs
(RPL) [9]. It is a gradient-based routing protocol, which can
easily organize and manage multi-hop topologies based on
short-range low-power links. In the most typical setting, RPL-
enabled nodes are connected through multi-hop paths to a
small set of LLN sinks, which are usually responsible for
data collection and coordination duties. For each of them,
a Destination Oriented Directed Acyclic Graph (DODAG) is
created by accounting for link costs, node attributes/status
information, and an Objective Function, which maps the
optimization requirements of the target scenario. In that case,
each LLN sink assumes the role of DODAG root. A more
sophisticated and ﬂexible conﬁguration could contain a single
DODAG with a virtual DODAG root coordinating several LLN
sinks.

The gradient strategy employed by RPL relies on the deﬁ-
nition of node’s rank, which speciﬁes the individual position
of a node with respect to its (virtual) DODAG root. As a
consequence, the rank should monotonically decrease along
the DODAG and towards the destination, in accordance to
the gradient-based approach. Speciﬁcally, the virtual DODAG
root’s rank is always 0, while the rank of LLN sinks is
1. In general, for each sensor device,
the rank is a real
number, whose integer part, r, accounts for the minimum hop-
distance from the (virtual) DODAG root. Instead, the decimal
part of the rank is used by RPL for selecting the preferred
parent among some candidate ones, according to metrics and
objective functions. In this paper, we are not concerning the
RPL strategy for selecting a preferred parent, hence, for our
purposes, the main information is carried into the integer part r
of the rank. For this motivation and for the sake of exposition,
when referring to rank in what follows, we are considering its
integer part r.

Supported by the strong evidence that the IEEE802.15.4e
TSCH MAC and the IETF RPL protocols are core to a viable
IoT protocol stack [2], we have been facing the problem of
building multi-hop schedules for RPL-organized, TSCH-based
networks [10]. The ﬁrst outcome of such investigation has
been the Trafﬁc-Aware Scheduling Algorithm (TASA) [11],
[12], which builds time/frequency collision-free patterns in a

centralized manner. This strategy allows a master node to
collect information about the entire network topology and
on the trafﬁc load at each node. Afterwards, such master
node computes the schedule for the whole network by ex-
ploiting the graph theory’s matching and vertex-coloring tech-
niques. Finally, it provides each node in the network with its
time/frequency schedule. Such a centralized approach requires
a multi-hop signaling phase, which could impair the power
efﬁciency. Moreover, TASA employs a greedy solution for
allocating transmissions for each timeslot. Therefore, TASA
does not take into account queue congestion. Finally, such
greedy solution ﬁnds an optimal time/frequency pattern, whose
length is not known a priori: in this sense, supporting topolo-
gies with multiple LLN sinks would be not straightforward.
Nevertheless, TASA represents a solid ground for comparison
in future approaches to packet scheduling in multi-hop TSCH
networks.

In this paper, we propose the new Decentralized Traf-
ﬁc Aware Scheduling (DeTAS) algorithm, which, starting
from the same requirements of TASA, ﬁnds the optimum
time/frequency schedule in a decentralized way, while en-
abling a 1-hop signaling and the queue management of device
memory. Remarkably, DeTAS is thought also for multi-sink
topologies.

The rest of the paper is organized as follows: we present
the DeTAS algorithm in Sec. II and a preliminary performance
evaluation with respect to TASA in Sec. III. Finally, in Sec.
IV we draw conclusions and future research.

II. ALGORITHM DESCRIPTION

The suggested DeTAS algorithm is designed for LLN net-
works organized by RPL in a single DODAG. For this reason,
in what follows, we use the RPL terminology [9].

Let {ns}, with s = 1, . . . , NS, be the set of all the NS sinks,
and {ni}, with i = NS + 1, . . . , NS + N be the set of source
nodes. If NS = 1, the LLN sink n1 is also a DODAG root;
otherwise, there is a virtual DODAG root, n0, coordinating all
the NS LLN sinks.

G1
G2G3

n 4

n

1

n 5

n 0

n 2

n 6

n 7

Virtual

DODAG root

LLN sinks

n 3

n 8

n 9

r=0

r=1

r=2

n10 n

11

n

12

n

13

n

14

n

15

n

16

n

17

n

18

r=3

n

19

n

20

n

21

n

22

n

23

n

24

n

25

n26

r=4

Fig. 1: Example of a LLN with a virtual DODAG root, 3 LLN
sinks, and 23 source nodes.

We deﬁne Routing Graph each destination-oriented tree
graph Gs = (Vs, Es), rooted at the LLN sink ns, with s =
1, . . . , NS. Note that {V1, V2, . . . , VS} is a partition of the
set of all nodes (sink and source ones) V = {n1, . . . , nNS+N },
and Es is the set of directed links between each sensor
node ni and its preferred parent, pi. Thus, |Es| = |Vs| − 1.
Furthermore, for each node nl ∈ V, with l = 1, . . . , NS + N ,
it is possible to identify the set ch(nl) of its children, and
the sub-tree STl, composed by nl itself and all the nodes
connected to it through multi-hop paths. It is easy to ﬁnd that
STs ≡ Gs, with s = 1, . . . , NS, i.e., the subtree STs rooted
at the LLN sink ns is the routing graph Gs itself. According
to the network topology built by RPL, and indicating the rank
assigned to a node nl with rnl, it results rnl = rpl + 1.

Figure 1 shows an example network, with the virtual
DODAG root n0 coordinating 3 LLN sinks, n1, n2 and n3.
In turn, each LLN sink coordinates a Routing Graph. In this
sense, the 3 Routing Graphs G1, G2 and G3 are branches of
the same destination-oriented tree graph rooted at n0.

DeTAS is a trafﬁc-aware algorithm that builds the sched-
ule based on the trafﬁc generated by each source node.
We assume that the network supports a multi-point-to-point
trafﬁc. In detail, every source node in the set {ni}, with
i = NS + 1, . . . , NS + N , generates a constant1 integer
number of packets, i.e., the local packet number, qi, within
a slotframe, destined to one among the LLN sinks in the
set {ns}, with s = 1, . . . , NS. For each node nl ∈ V, with
l = 1, . . . , NS + N , we deﬁne also the global packet number,
Ql, as the total amount of packets generated within a slotframe
by the nodes belonging to the sub-tree STl.

A. A general overview

DeTAS is able to build optimum collision-free schedules
for multi-hop IEEE802.15.4e TSCH networks, using a tiny
amount of information, locally exchanged among neighbor
nodes. At the same time, its decentralized nature allows a dis-
tributed computation of such schedule, while keeping very low
the amount of signaling messages exchanged among neighbor
nodes. Whilst scheduling the trafﬁc, DeTAS manages queue
levels, avoiding trafﬁc congestion and, thus, possible packets
drops due to overﬂow of nodes’ memory buffer. Finally,
DeTAS can exploit the availability of the 16 IEEE802.15.4
frequencies [4] in order to: parallelize several transmissions at
the same time, reduce the number of active slots per slotframe
(i.e., the network duty cycle), and increase the reliability of
wireless links.

In a IEEE802.15.4e TSCH network running DeTAS, all de-
vices are assumed to be synchronized with the same slotframe,
having size equal to S time slots. Hence, all nodes follow a
common schedule. The latter is built as a macro-schedule,
given by the combination of a set of micro-schedules, one for
each Routing Graph Gs, with s = 1, . . . , NS. It has to be

1Such an assumption is supported by the fact that trafﬁc is typically different
between sensors, but relatively constant over time in emerging heterogeneous
embedded applications. Actually, with an efﬁcient signaling, DeTAS could
also support variable bit rate trafﬁc ﬂows.

noted that, when NS = 1, the macro-schedule includes only
the micro-schedule related to the Routing Graph G1.

In details, for each Routing Graph Gs, with s = 1, . . . , NS,
DeTAS builds a time/frequency micro-schedule, using Ls
time slots and Ws channel offsets2. Such micro-schedule is
setup minimizing the number of active slots, Ls, needed for
delivering to the LLN sink, ns, the trafﬁc load generated by the
source nodes belonging to Gs, during a single slotframe. More
speciﬁcally, all transmissions are scheduled in consecutive Ls
slots, with Ls ≤ S,
leaving the remaining S − Ls slots
empty and, therefore, available for packet transmissions related
to other Routing graphs or other applications (e.g., other
RPL instances). In this manner, the branch of the network
represented by the Routing Graph Gs, will be able to achieve
a duty cycle equal to Ls/S. The length Ls of the micro-
schedule is computed by the LLN sink ns using the formu-
lation introduced in Sec.II-C. Instead, the width of the micro-
schedule, i.e., the number of available channel offsets (and
thus the channels), is Ws = 3, since frequencies are reused
every 3-hops, thus avoiding also collisions due to interference.

t
e
s
ﬀ
O
l
e
n
n
a
h
c

15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0

timeOﬀset

Fig. 2: Displacement of micro-schedules within a slotframe
structure, using 12 channels.

Afterwards, the virtual DODAG root, n0, collects the length
values Ls of each of the NS micro-schedules, as computed
from the LLN sinks it coordinates. It arranges such micro-
schedules into a macro-schedule within the network slotframe.
Speciﬁcally, it makes sure that they do not overlap and they
occupy the smallest number of time slots to provide low duty-
cycle to the whole DODAG. Given that each micro-schedule is
characterized by a width Ws = 3, and assuming that all the 16
IEEE802.15.4 channels are available, it results that maximum
5 Routing Graphs can be micro-scheduled at the same time
within the slotframe, leaving 1 channel offset (and, thus, one
frequency) available for broadcast and/or signaling. The virtual
DODAG root computes the time offset and the channel offset
shift of each micro-schedule, with respect to the start of the
slotframe.

More speciﬁcally, we assume that the number of channels
really used among all the 16 available ones is equal to 3K,
where K is an integer parameter chosen in the interval [1, 5]

2In IEEE802.15.4e, the channel offset is related to the channel hopping
procedure and it is translated into a given frequency; the couple (time slot,
channel offset) deﬁnes the channel used for communications.

for black-listing purposes (i.e., some channels should not be
used if they are more keen to interference and multipath fading
[13], [14]). The suggested DeTAS macro-scheduling technique
collects in a set all the micro-schedules’ lengths Ls, with
s = 1, ..., NS. This set is divided in K subsets, so that the
sums computed over such subsets are as close as possible. The
problem at hand is known as the multiprocessor scheduling
problem [15]; we apply the greedy heuristic described in [16]
for organizing the macro-schedule. Once the partition into K
subsets has been done, all the micro-schedules belonging to
the k-th subset will be activated sequentially, and they will use
the values 3(k − 1), 3(k − 1) + 1 and 3(k − 1) + 2 as channel
offsets. The ﬁnal macro-schedule will have width equal to 3K
channel offsets and time length equal to the maximum sum
among those computed over the K subsets. Fig. 2 shows an
example of macro-schedule that use 12 channels (i.e., K = 4).

B. Decentralized Micro-scheduling

To setup the micro-schedule related to a Routing Graph Gs,
each source node ni ∈ Vs needs to know the amount of trafﬁc
it will receive from its children that should be forwarded to
the parent node pi, toward the LLN sink, ns. Note that every
source node ni can locally compute its global packet number,
Qi, as sum of its local packet number, qi, and the global packet
numbers of its children, and then forward such information to
its parent node, pi. In particular, the LLN sink, ns, needs to
collect information also about the local packet number of its
children. Starting from the aforementioned trafﬁc information,
exchanged at 1-hop distance, the micro-schedule is built in a
distributed fashion, with each node, ni, allocating some slots
within the schedule to its children.

The micro-schedule is built making sure that no collision
the source
occurs in the network. In detail, at any time,
nodes that can simultaneously transmit belong to the subtrees
rooted at only two child nodes of the LLN sink. For instance,
considering the LLN sink n1 in Figure 1 and assuming that
n4 and n5 are the two selected child nodes at a given time,
only the source nodes ∈ ST4 and ∈ ST5 can be scheduled
for packet transmissions simultaneously. Speciﬁcally, a single
packet transmission per odd rank is allowed in ST4 and a
single packet transmission per even rank is allowed in ST5.
Furthermore, in order to avoid collision due to interference,
the same frequency is reused only after 3-hops. Therefore,
each source node ni will transmit packets to its parent, pi,
using a channel offset equal to [(r − 2) mod 3], and receive
packets from its children ∈ ch(ni) with a channel offset equal
to [(r − 1) mod 3].

To avoid buffer overﬂow, in DeTAS each node ni assigns
an alternate sequence of “transmit” and “receive” slots (i.e.,
slots for transmission and reception of packets, respectively) to
every child node. In this way, a queue is emptied of 1 packet,
as soon as it receives a new one, and viceversa. In detail, 2Qi
time slots will be allocated to each node ni, given that it will
receives Qi − qi packets from the other nodes ∈ STi and
transmits Qi packets to its parent pi.

Obviously, to allow packets to be correctly sent and re-
ceived, the transmit slots of the children ∈ ch(ni) must be
synchronized with the receive slots of the parent, pi. Thus, it
follows that a sub-tree STi rooted at a node ni can be even-
or odd-scheduled, i.e., it can follow an even or odd micro-
schedule.

Deﬁnition 1. A subtree STi is even-scheduled, if all nodes
∈ STi with even r transmit in even time slots, indicating with
0 the ﬁrst slot in the schedule, and those with odd r transmit
in odd time slots.

Deﬁnition 2. A subtree STi is odd-scheduled, if all nodes
∈ STi with even r transmit in odd time slots, indicating with
0 the ﬁrst slot in the schedule, and those with odd r transmit
in even time slots.

n 4

n10

n11

2Q4

2Q10

2(Q 4 -q 4 )

2(Q10-q 10)

2Q11

2(Q11-q 11)

Fig. 3: Even micro-schedule for nodes belonging to ST4 of
DODAG in Fig. 1.

Fig. 3 shows an even micro-schedule followed by the sub-
tree ST4 of the DODAG in Fig. 1, and, details the time slots
reserved to the nodes n4, n10 and n11. We can see that n4,
having even r spends the Qi even time slots in transmission,
the ﬁrst Qi − qi odd time slots in reception, and the last qi
odd time slots in idle (having already received all the packets
from its children n10 and n11).

C. Micro-schedule length Ls

Even though the micro-schedule is built with a distributed
approach, it is initialized by the LLN sink, ns, that computes
the length Ls of the micro-schedule, and selects, among the
sub-trees rooted at its children, the ones to be even-scheduled,
and thus, those to be odd-scheduled.

Being DeTAS a trafﬁc-aware scheduling algorithm,

the
length, Ls, of the micro-schedule is a function of the network
trafﬁc. In fact, the LLN sink can receive at most one packet
per time slot (i.e., Ls ≥ Qs). At the same time, the child of
the LLN sink, referred hereafter as nM , having the maximum
global packet number, i.e., QM = maxni∈ch(ns) Qi, will need
a schedule long enough for containing QM transmit slots and
QM − qM receive slots, i.e., Ls ≥ 2QM − qM . For every
randomly scattered physical topology, the proposed DeTAS
scheme is able to ﬁnd the optimum schedule with the minimum
length, given by:

Ls = max {2QM − qM , Qs} .

(1)

sub-tree rooted at another sink’ child is odd-scheduled, thus,
they will not incur in any kind of collision, since the related
schedules are perfectly overlapped. Therefore, a LLN sink
running DeTAS must divide its children in two lists, i.e., an
even list and an odd one. The sub-trees rooted at the children
in the even list could be sequentially even-scheduled, for a
total even-schedule with a length equal to Le
s time slots. At
the same time, the sub-trees rooted at the children in the
odd list could be sequentially odd-scheduled, for a total odd-
schedule with a length equal to Lo
s time slots. Obviously,
those lists should be load balanced, since the schedule length
Ls will be equal to the maximum between Le
s. This
load balancing problem falls into the class of multiprocessor
scheduling problems [15]. The greedy heuristic employed in
this paper is the same described in [16]: the sink’ children
are ordered in a descending order, according to their global
packet number. Then, they are appended subsequently to the
list (even or odd) with the current smallest sum of global
packet numbers.

s and Lo

DeTAS assumes a different behavior depending on the
trafﬁc loads of the children of the LLN sink. Speciﬁcally,
if QM ≥ Qs/2, the node nM will be the only one in the
even-list. DeTAS will odd-schedules subsequently the sub-tree
rooted at the nodes in the odd-list. At the same time, it will
even-schedule the sub-tree STM for exactly 2(QM − α) slots,
where:

α = min{2(Qs − QM ), qM }.

(2)

It can be shown that, after this phase, the number of packets
to be still received by the LLN sink would be equal to α, and
that those packets would be located on nM . Hence, nM will
allocate the following α consecutive time slots for transmitting
the pending packets to the LLN sink. It can be veriﬁed that
eq. (1) is always fulﬁlled. In such case, the node nM should
be informed about α, in order to compute accordingly the
instant when switching from the even-scheduling mode to the
continuos one.

When QM < Qs/2, DeTAS reduces the discrepancy be-
s, computed over the global packet numbers
tween the sum Qe
related to the even-list, and the sum Qo
s, computed over the
odd-list, to 1 (if Qs is odd) or 0 (if Qs is even). It is worth to
note that Qe
s = Qs. The LLN sink computes the value
β, which levels off the two lists:

s + Qo

s − Qo
s

β = (cid:22) Qe

2

(cid:23)

(3)

and it selects the ﬁrst child in the list with the maximum
associated sum of global packets numbers, referred hereafter
as ncut. If β ≥ 0 (β < 0)3, DeTAS will even-schedule (odd-
schedule) ﬁrstly the sub-tree STcut for 2(Qcut − |β|) time
slots and, then, all the sub-trees related to the other nodes
appended in the even-list (odd-list). Simultaneously, it will
odd-schedule (even-schedule) ﬁrstly all the sub-trees related to
the nodes in the odd-list (even-list), then the sub-tree STcut

To this aim, DeTAS simultaneously guarantees that a single
sub-tree rooted at a sink’ child is even-scheduled, while the

3In the rest of the paragraph, we indicate the alternative case and the related

settings in brackets.

for exactly 2|β| time slots. It can be shown that the micro-
schedule length is always Ls = Qs, according to eq. (1). In
this trafﬁc load conditions, ncut should be informed by the
LLN sink about when to even- and when to odd-schedule
STcut. This information must be accordingly updated and
propagated along STcut.

III. PERFORMANCE EVALUATION

Herein, some preliminary simulation results are present in
order to show the effectiveness of the proposed scheme in
terms of maximum queue occupation in the source nodes.
We highlight that the maximum queue occupation has been
selected as performance parameter because it indicates how
much trafﬁc load can be managed by source nodes, avoiding
packet discards due to possible buffer overﬂows.

Results obtained with DeTAS have been compared with
the ones achieved exploiting the TASA algorithm which, as
known, has very good performance in IEEE802.15.4e net-
works [11]. We consider only single sink topologies, i.e., with
a single LLN sink acting as DODAG root, in order to picture
also a fair comparison between DeTAS and TASA.

Results have been obtained by using an ad-hoc simulator
written with the Python language. We have simulated a TSCH
network with a tree topology, deployed in an area of 200×200
m2. Each node, located in a random position in the network,
has a coverage range R = 50 m. Since DeTAS builds the
schedule based on the network topology, we analyze the
performance in several scenarios, varying the total number of
nodes, N in the interval [30, 150]. For each network size, we
have also considered 25 different random displacements for
the source nodes.

Given that DeTAS allocates time slots and channel offsets
based not only on the network topology, but also on the trafﬁc
load. We test the algorithm under different trafﬁc conditions:
we assume that the average number of packets, ¯npkt, generated
by each node within a single slotframe can vary between 3
and 5. Speciﬁcally, we have imposed that, at the beginning
of the slotframe, each node generates a number of packets,
randomly selected in the range [1, 5] (if ¯npkt = 3) and [1, 9] (if
¯npkt = 5). To better characterize the performance comparison,
for each average number of packets, we have also considered
25 different random arrangements for the trafﬁc load on each
source node. We further assume that the slotframe size S
is as large as to contain the whole schedules computed by
DeTAS. Finally, we assume for TASA a number of 3 available
channels.

Figures 4, 5 and 6, show the maximum queue occupation
as function of the rank of the source nodes, in three different
network scenario, having respectively 30, 90, and 150 source
nodes. These results have been obtained, averaging on 625
simulations runs, derived from the combination of 25 different
network-topologies and 25 different trafﬁc load sets.

From the above ﬁgures, we can observe how DeTAS queue
management provides a bounded quasi-deterministic queue
occupation, since the standard deviation is close to 0.

¯npkt=3, DeTAS
¯npkt=3, TASA
¯npkt=5, DeTAS
¯npkt=5, TASA

70

60

50

40

30

20

10

]
s
t
e
k
c
a
p

[

e
z
i
s

e
u
e
u
q
m
u
m
i
x
a
M

0
1

2

3

4

6

5
Rank (r)

7

8

9

10 11

Fig. 4: Maximum queue occupation as function of r, in LLNs
with 30 source nodes.

70

60

50

40

30

20

10

]
s
t
e
k
c
a
p

[

e
z
i
s

e
u
e
u
q
m
u
m
i
x
a
M

0
1

¯npkt=3, DeTAS
¯npkt=3, TASA
¯npkt=5, DeTAS
¯npkt=5, TASA

2

3

4

5

Rank (r)

6

7

8

9

Fig. 5: Maximum queue occupation as function of r, in LLNs
with 90 source nodes.

¯npkt=3, DeTAS
¯npkt=3, TASA
¯npkt=5, DeTAS
¯npkt=5, TASA

70

60

50

40

30

20

10

]
s
t
e
k
c
a
p

[

e
z
i
s

e
u
e
u
q
m
u
m
i
x
a
M

0
1

2

3

5
4
Rank (r)

6

7

8

Fig. 6: Maximum queue occupation as function of r, in LLNs
with 150 source nodes.

ACKNOWLEDGMENT

This work was supported by the PON projects (ERMES-
01-03113, DSS-01-02499, EURO6-01-02238) funded by the
Italian MIUR, the Apulia Region Project PS 025, and the
FP7 Project OUTSMART-285038, partially funded by the
European Community.

REFERENCES

[1] O. Hersent, D. Boswarthick, and O. Elloumi, The Internet of Things:

Key Applications and Protocols, 2nd ed. Wiley, 2012.

[2] M. Palattella, N. Accettura, X. Vilajosana, T. Watteyne, L. Grieco,
G. Boggia, and M. Dohler, “Standardized Protocol Stack for the Internet
of (Important) Things,” Communications Surveys & Tutorials, IEEE,
2012.

[3] J. Hui and P. Thubert, Compression Format for IPv6 Datagrams over
IEEE 802.15.4-Based Networks, RFC 6282, IETF RFC 6282, September
2011.

[4] 802.15.4e-2012: IEEE Standard for Local and Metropolitan Area Net-
works – Part 15.4: Low-Rate Wireless Personal Area Networks (LR-
WPANs) Amendment 1: MAC Sublayer, IEEE Std., 16 April 2012.

[5] IEEE std. 802.15.4, Part 15.4: Low-Rate Wireless Personal Area Net-
works (LR-WPANs), Standard for Information Technology Std., 16 June
2011.

[6] J. P. Vasseur and A. Dunkels, Interconnecting Smart Objects with IP:

The Next Internet. Morgan Kaufmann, 2010.

[7] Z. Shelby and C. Bormann, 6LoWPAN: The Wireless Embedded Inter-
net, ser. Wiley Series on Communications Networking & Distributed
Systems.

John Wiley & Sons, 2010.

[8] D. Miorandi, S. Sicari, F. D. Pellegrini, and I. Chlamtac, “Internet of
Things: Vision, Applications & Research Challenges,” Ad Hoc Networks,
2012.

[9] T. Winter, P. Thubert, A. Brandt, J. Hui, R. Kelsey, P. Levis, K. Pister,
R. Struik, J. P. Vasseur, and R. Alexander, RPL: IPv6 Routing Protocol
for Low-Power and Lossy Networks, RFC 6550, IETF RFC 6550, March
2012.

[10] N. Accettura, M. R. Palattella, M. Dohler, L. A. Grieco, and G. Bog-
gia, “Standardized Power-Efﬁcient & Internet-Enabled Communication
Stack for Capillary M2M Networks,” in IEEE Wireless Communications
and Networking Conference, WCNC, April 2012.

[11] M. R. Palattella, N. Accettura, M. Dohler, L. A. Grieco, and G. Boggia,
“Trafﬁc Aware Scheduling Algorithm for Reliable Low-Power Multi-
Hop IEEE 802.15.4e Networks,” in 23rd IEEE International Sympo-
sium on Personal, Indoor and Mobile Radio Communications, PIMRC,
September 2012.

[12] ——, “Trafﬁc-Aware Time-Critical Scheduling in Heavily Duty-Cycled
IEEE 802.15.4e for an Industrial IoT,” in IEEE Sensors, October 2012.
[13] B. Kerkez, T. Watteyne, and M. Magliocco, “Feasibility Analysis of
Controller Design for Adaptive Channel Hopping,” in ICST International
Workshop on Performance Methodologies and Tools for Wireless Sensor
Networks, WSNPERF, October 2009.

[14] T. Watteyne, A. Mehta, and K. S. J. Pister, “Reliability Through Fre-
quency Diversity: Why Channel Hopping Makes Sense,” in Performance
Evaluation of Wireless Ad Hoc, Sensor, and Ubiquitous Networks, PE-
WASUN, October 2009.

[15] V. Sarkar, Partitioning and scheduling parallel programs for multipro-

cessors. MIT press, 1989.

[16] R. E. Korf, “Multi-way number partitioning,” in Proceedings of the
21st international jont conference on Artiﬁcal intelligence. Morgan
Kaufmann Publishers Inc., 2009, pp. 538–543.

Moreover, DeTAS always maintains the queue occupation
close to 2 times the average number of packets generated on
each node (i.e., the maximum number of packets that a node
can generate within a slotframe). Such a queue occupation is
quite constant independently on the node ranks and on the
network size. This inference let us guess that DeTAS would
totally avoid packet drops due to buffer overﬂows, allowing
the use of smart devices with smaller memories.

DeTAS shows also a great improvement with respect to a
centralized solution like TASA. In fact, the TASA maximum
buffer occupation increases with a decreasing rank. This means
that nodes close to the sink are more keen to buffer overﬂows.
In this sense, the maximum queue occupation on average can
be more than 4 times greater than the queue occupation at the
beginning of the slotframe.

Focusing on the nodes with smaller ranks, although the
behaviors of DeTAS and TASA are almost indistinguishable
in small-sized networks (see Figure 4), a thoroughgoing dif-
ference is evident for larger networks (Figures 5 and 6), since
the DeTAS performance in terms of queue occupation remains
constant regardless of the network size. Moreover, varying
the average trafﬁc load ¯npkt a very strong difference can be
appreciated between DeTAS and TASA: the DeTAS and TASA
queue occupation respectively increase proportionally to ¯npkt
with a factor 2 and 6. It is easy to ﬁnd also that the very good
queue management of DeTAS translates also in a queueing
delay extremely reduced w.r.t. TASA.

IV. CONCLUSION

In this paper, we have witnessed how a decentralized
solution better suits the multi-hop scheduling problem is-
sued in RPL-enabled IEEE802.15.4e TSCH networks. To
this aim, a new scheduling scheme, DeTAS, has been in-
troduced and described in details. Enabling a lightweight 1-
hop signaling,
the presented technique naturally addresses
some pendent issues that limit an actual deployment of IoT-
compliant multi-hop LLNs. Furthermore, DeTAS exploits very
well the time/frequency resources available with TSCH, being
already suitable for complex LLN topologies. The reported
preliminary simulation results show the effectiveness of the
proposed approach in terms of queue management of the
nodes’ memory buffer. Moreover, they strongly encourages the
use of RPL for organizing multi-hop IEEE802.15.4e TSCH
networks. In order to better characterize the performance of
the DeTAS distribution scheme, future research works will
quantify and discuss the signalling overhead. Furthermore,
DeTAS will account for the possibility that a node can forward
packets towards the LLN sinks using a set of candidate next-
hops as relayers, rather than a single preferred parent, thus
load-balancing the routing tree and improving the end-to-end
reliability through path diversity. Finally, we will deal with
experimental tests of the stack employed in this paper, when
corroborated by the DeTAS powerful features.

