Toward an Inverse-free Lightweight Encryption Scheme for IoT

HakJu Kim* Kwangjo Kim*

*Department of Computer Science, KAIST.

Abstract

The current

IoT (Internet of Things) systems cannot provide the overhead caused by existing

encryption scheme for confidentiality. Thus, the development of lightweight encryption schemes is

necessary without degrading the system performance. In this paper, we introduce a well-known

lightweight encryption scheme, PRINCE, and a method to enrich the message space of PRINCE by

introducing XLS (eXtension by Latin Square). We discuss the cryptographic requirements of our

inverse-free lightweight encryption scheme and suggest how to extend a PRINCE-like encryption

scheme for the secure IoT system.

Keywords: Lightweight encryption, inverse-free, multipermutation, and IoT

I. Introduction

Since Internet was born in the 1980s, the

connectivity

of

human

life

has

been

increasing.

The

improvement

of

IT

(Information Technology) gave the birth of

new generation

of

the

connectivity;

the

connectivity between things as known as IoT

(Internet on Things).

Coins have both sides.

IoT creates new

markets and services via the communication

between many things, but the development of

IoT has caused new potential threats to the

security. While the traditional security issue

was

restricted

to

the

threat

in

the

cyber-world, the IoT security issue must be

extended

to

the

threat

in

the

cyber/physical-world. A successful attack on

IoT can endanger human lives[1].

The

cryptographic

primitives

like AES

(Advanced Encryption Standard) and SHA-3

(Secure Hash Algorithm) were designed to

defend against

the cyber-threat, but

those

essential to the IoT environment, because the

encryption scheme is one of the fundamental

cryptographic primitives for confidentiality.

In this paper, we aim to design a new

lightweight encryption scheme specialized for

IoT. Our goal

is to make an inverse-free

lightweight encryption scheme, which means

that the encryption scheme does not require

its inverse to decrypt. This paper discusses

the requirements of our encryption scheme

and

extends

one well-known

lightweight

encryption scheme called PRINCE[2].

The remainder of this paper is organized

as follows: We introduce PRINCE and XLS[3]

in Section

2. The

requirements

of

our

inverse-free encryption scheme is discussed

in Section 3. We propose the methodology to

extend PRINCE in Section 4. Our

future

work and conclusion are stated in Section 5

and Section 6, respectively.

II. Related work

primitives would

cause

an

unacceptable

2.1 PRINCE[2]

overhead to the resource-constrained devices.

PRINCE

is

a

lightweight

encryption

Therefore,

the

lightweight

cryptographic

scheme designed to perform the instantaneous

primitives have been researched recently. The

encryption without

a warm-up

phase

at

design of a lightweight encryption scheme is

minimum hardware cost. The scheme is a

Toward an Inverse-free Lightweight Encryption Scheme for IoT

HakJu Kim* Kwangjo Kim*

*Department of Computer Science, KAIST.

Abstract

The current

IoT (Internet of Things) systems cannot provide the overhead caused by existing

encryption scheme for confidentiality. Thus, the development of lightweight encryption schemes is

necessary without degrading the system performance. In this paper, we introduce a well-known

lightweight encryption scheme, PRINCE, and a method to enrich the message space of PRINCE by

introducing XLS (eXtension by Latin Square). We discuss the cryptographic requirements of our

inverse-free lightweight encryption scheme and suggest how to extend a PRINCE-like encryption

scheme for the secure IoT system.

Keywords: Lightweight encryption, inverse-free, multipermutation, and IoT

I. Introduction

Since Internet was born in the 1980s, the

connectivity

of

human

life

has

been

increasing.

The

improvement

of

IT

(Information Technology) gave the birth of

new generation

of

the

connectivity;

the

connectivity between things as known as IoT

(Internet on Things).

Coins have both sides.

IoT creates new

markets and services via the communication

between many things, but the development of

IoT has caused new potential threats to the

security. While the traditional security issue

was

restricted

to

the

threat

in

the

cyber-world, the IoT security issue must be

extended

to

the

threat

in

the

cyber/physical-world. A successful attack on

IoT can endanger human lives[1].

The

cryptographic

primitives

like AES

(Advanced Encryption Standard) and SHA-3

(Secure Hash Algorithm) were designed to

defend against

the cyber-threat, but

those

essential to the IoT environment, because the

encryption scheme is one of the fundamental

cryptographic primitives for confidentiality.

In this paper, we aim to design a new

lightweight encryption scheme specialized for

IoT. Our goal

is to make an inverse-free

lightweight encryption scheme, which means

that the encryption scheme does not require

its inverse to decrypt. This paper discusses

the requirements of our encryption scheme

and

extends

one well-known

lightweight

encryption scheme called PRINCE[2].

The remainder of this paper is organized

as follows: We introduce PRINCE and XLS[3]

in Section

2. The

requirements

of

our

inverse-free encryption scheme is discussed

in Section 3. We propose the methodology to

extend PRINCE in Section 4. Our

future

work and conclusion are stated in Section 5

and Section 6, respectively.

II. Related work

primitives would

cause

an

unacceptable

2.1 PRINCE[2]

overhead to the resource-constrained devices.

PRINCE

is

a

lightweight

encryption

Therefore,

the

lightweight

cryptographic

scheme designed to perform the instantaneous

primitives have been researched recently. The

encryption without

a warm-up

phase

at

design of a lightweight encryption scheme is

minimum hardware cost. The scheme is a

64-bit block cipher with 128-bit key. The

⍺-reflection property is used to achieve the

construction is lightweight.

inverse-free

structure;

PRINCE(k)

is equal

the

inverse

of
to PRINCE(k XOR ⍺). The
low

to

the

III. Cryptographic Requirements

Our goal

is to design an inverse-free

lightweight encryption scheme specialized for

inverse-freeness

contributes

hardware cost of PRINCE. The structure of

IoT. Our

encryption scheme,

inspired by

PRINCE core

is

illustrated in Figure

1.

PRINCE, should be designed to have high

PRINCE achieves the encryption in one clock

execution speed,

low hardware

chip area

cycle at the maximum frequency of 200 MHz,

usage,

and

low power

consumption.

In

and the unrolled version of

the

scheme

addition, our scheme should support 128-bit

consumes 14-15 times less hardware chip

block size, 128/192/256-bit

flexible key size,

area

than AES-128

and 4-7

times

less

and provable security. This paper focuses on

hardware chip area than other

lightweight

the methodology to extend the block size and

encryption schemes in the literature.

the key size of PRINCE. Table 1 shows the

Figure 1. Structure of PRINCE core[2]

However, PRINCE has a major limitation.

The scheme supports 128-bit key size and

64-bit

block

size

only. Most modern

encryption schemes support 128-bit block size

and the flexible key size.

2.2 XLS[3]

XLS (eXtension by Latin Square)

is a

way to extend the message

space of a

cipher. Most block ciphers have the problem

of ciphertext expansion, which causes more

network overhead. XLS solves the problem

using three block cipher calls to encrypt a

2n-1 bit string using an n-bit block cipher.

XLS uses a pair of orthogonal

latin squares,

which are one type of the multipermutation,

to

prevent

the

problem of

ciphertext

expansion. In addition, the implementation of

XLS requires three bit-wise XOR, one shift,

summary of the requirements.

Table 1. Summary of the requirements

Cryptographic Requirements
Security level
Flexible key
Block size

Goal

Provable Security
128/192/256-bit key
128-bit

Other requirements

Goal

Execution speed
Hardware cost

Faster than PRINCE
Lower than PRINCE

IV. Extending PRINCE

4.1 Parallel construction

A straightforward method to extend an

encryption scheme is to simply connect

the

scheme in parallel. However,

the resulting

scheme is only a mode of operation of

the

original scheme. We illustrate two schematics

to increase the block size and the key size of

PRINCE in Figure 2.

Figure 2. Schematics to increase the block size

and the key size of PRINCE

and one

conditional XOR operations. The

Using the theorem in [2], we believe that

permutation is

involution,

so

the

inverse

we can claim the following theorem if you

permutation is not required. Thus,

the XLS

used the schematics in Figure 2.

Toward an Inverse-free Lightweight Encryption Scheme for IoT

HakJu Kim* Kwangjo Kim*

*Department of Computer Science, KAIST.

Abstract

The current

IoT (Internet of Things) systems cannot provide the overhead caused by existing

encryption scheme for confidentiality. Thus, the development of lightweight encryption schemes is

necessary without degrading the system performance. In this paper, we introduce a well-known

lightweight encryption scheme, PRINCE, and a method to enrich the message space of PRINCE by

introducing XLS (eXtension by Latin Square). We discuss the cryptographic requirements of our

inverse-free lightweight encryption scheme and suggest how to extend a PRINCE-like encryption

scheme for the secure IoT system.

Keywords: Lightweight encryption, inverse-free, multipermutation, and IoT

I. Introduction

Since Internet was born in the 1980s, the

connectivity

of

human

life

has

been

increasing.

The

improvement

of

IT

(Information Technology) gave the birth of

new generation

of

the

connectivity;

the

connectivity between things as known as IoT

(Internet on Things).

Coins have both sides.

IoT creates new

markets and services via the communication

between many things, but the development of

IoT has caused new potential threats to the

security. While the traditional security issue

was

restricted

to

the

threat

in

the

cyber-world, the IoT security issue must be

extended

to

the

threat

in

the

cyber/physical-world. A successful attack on

IoT can endanger human lives[1].

The

cryptographic

primitives

like AES

(Advanced Encryption Standard) and SHA-3

(Secure Hash Algorithm) were designed to

defend against

the cyber-threat, but

those

essential to the IoT environment, because the

encryption scheme is one of the fundamental

cryptographic primitives for confidentiality.

In this paper, we aim to design a new

lightweight encryption scheme specialized for

IoT. Our goal

is to make an inverse-free

lightweight encryption scheme, which means

that the encryption scheme does not require

its inverse to decrypt. This paper discusses

the requirements of our encryption scheme

and

extends

one well-known

lightweight

encryption scheme called PRINCE[2].

The remainder of this paper is organized

as follows: We introduce PRINCE and XLS[3]

in Section

2. The

requirements

of

our

inverse-free encryption scheme is discussed

in Section 3. We propose the methodology to

extend PRINCE in Section 4. Our

future

work and conclusion are stated in Section 5

and Section 6, respectively.

II. Related work

primitives would

cause

an

unacceptable

2.1 PRINCE[2]

overhead to the resource-constrained devices.

PRINCE

is

a

lightweight

encryption

Therefore,

the

lightweight

cryptographic

scheme designed to perform the instantaneous

primitives have been researched recently. The

encryption without

a warm-up

phase

at

design of a lightweight encryption scheme is

minimum hardware cost. The scheme is a

64-bit block cipher with 128-bit key. The

⍺-reflection property is used to achieve the

construction is lightweight.

inverse-free

structure;

PRINCE(k)

is equal

the

inverse

of
to PRINCE(k XOR ⍺). The
low

to

the

III. Cryptographic Requirements

Our goal

is to design an inverse-free

lightweight encryption scheme specialized for

inverse-freeness

contributes

hardware cost of PRINCE. The structure of

IoT. Our

encryption scheme,

inspired by

PRINCE core

is

illustrated in Figure

1.

PRINCE, should be designed to have high

PRINCE achieves the encryption in one clock

execution speed,

low hardware

chip area

cycle at the maximum frequency of 200 MHz,

usage,

and

low power

consumption.

In

and the unrolled version of

the

scheme

addition, our scheme should support 128-bit

consumes 14-15 times less hardware chip

block size, 128/192/256-bit

flexible key size,

area

than AES-128

and 4-7

times

less

and provable security. This paper focuses on

hardware chip area than other

lightweight

the methodology to extend the block size and

encryption schemes in the literature.

the key size of PRINCE. Table 1 shows the

Figure 1. Structure of PRINCE core[2]

However, PRINCE has a major limitation.

The scheme supports 128-bit key size and

64-bit

block

size

only. Most modern

encryption schemes support 128-bit block size

and the flexible key size.

2.2 XLS[3]

XLS (eXtension by Latin Square)

is a

way to extend the message

space of a

cipher. Most block ciphers have the problem

of ciphertext expansion, which causes more

network overhead. XLS solves the problem

using three block cipher calls to encrypt a

2n-1 bit string using an n-bit block cipher.

XLS uses a pair of orthogonal

latin squares,

which are one type of the multipermutation,

to

prevent

the

problem of

ciphertext

expansion. In addition, the implementation of

XLS requires three bit-wise XOR, one shift,

summary of the requirements.

Table 1. Summary of the requirements

Cryptographic Requirements
Security level
Flexible key
Block size

Goal

Provable Security
128/192/256-bit key
128-bit

Other requirements

Goal

Execution speed
Hardware cost

Faster than PRINCE
Lower than PRINCE

IV. Extending PRINCE

4.1 Parallel construction

A straightforward method to extend an

encryption scheme is to simply connect

the

scheme in parallel. However,

the resulting

scheme is only a mode of operation of

the

original scheme. We illustrate two schematics

to increase the block size and the key size of

PRINCE in Figure 2.

Figure 2. Schematics to increase the block size

and the key size of PRINCE

and one

conditional XOR operations. The

Using the theorem in [2], we believe that

permutation is

involution,

so

the

inverse

we can claim the following theorem if you

permutation is not required. Thus,

the XLS

used the schematics in Figure 2.

Theorem 1. The advantage of any adversary who

not degrade the security level of PRINCE,

makes D queries to the E oracle and T queries

because

the orthogonal

latin square

is a

to the F/F-1 oracle satisfies

  Pr 
 
 Pr 


  


  


    


   



 

 

secure

construction[3]. The

approximated

version is

less

secure

than the

original

  

  ≤       

orthogonal

latin square, but the difference is

Parameter n is the block size and k is the key

size of the extension of PRINCE. Rest of

parameters are explained in [2].

(Proof) Skipped.

negligible[3].

In addition,

the approximated

version of the orthogonal latin square is more

lightweight than the original version. We can

have

the

security- performance

trade-off.

Although the security proof is not completed,

4.2 Swapping using Multipermutation

the resulting lightweight encryption scheme

The scheme in Figure 2 is very naïve and

meets the cryptographic requirements of our

inflexible. The orthogonal

latin square is a

secure mixing function, and is flexible to

inverse-free lightweight encryption scheme in

Table

1. Our

extension

of PRINCE is

extend PRINCE to have the block size larger

illustrated in Figure 4.

than 128-bit. The

implementation of

the

orthogonal

latin

square

requires

three

bit-wise XOR, one shift and one conditional

XOR operations (dbl), and the implementation

of

the approximated version requires three

bit-wise

XOR

and

one

left

circular

bit-rotation

(rol)[3].

Both

versions

involutions,

so

they

correspond

to

inverse-freeness

of

PRINCE.

are

the

The

implementation of orthogonal

latin square and

its approximated version illustrated in Figure 3.

Figure 3. The implementation of orthogonal

latin

square (left) and its approximated version (right) [3]

We propose

the

extension of PRINCE

using

the

orthogonal

latin

square. The

orthogonal

latin square replaces the simple-

swapping in Figure 2. The key is divided

Figure 4. Our extension of PRINCE (first half of

the construction)

We bring the

definition of

a mixing

function from [3] and build a conjecture that

Theorem 1 still holds for the extension of

PRINCE using the orthogonal latin square.

Definition 1. Fix a set ⊆ ≥ , let mix:

→ be a length-preserving permutation, and

let   →. We say that mix is an -good

mixing function if, for all s such that  ⊆ , we

have that
(1) mixLLL(A,·) is a permutation for all   ,
(2) mixR(·,B) is a permutation for all ∈ ,
     ≤ for ∈ ,
(3) Pr 
(4) Pr 
     ≤ for ∈





into four 64-bit subkeys, which are XORed at

Conjecture 1. Let the multipermutation be a 

each round. The block size of

the resulting

encryption scheme is 128-bit, and the scheme

has the flexible key size of 128/192/256-bit.

The use of the orthogonal

latin square does

-good mixing function, Theorem 1 still holds for

the extension of PRINCE using the orthogonal

latin square.

Toward an Inverse-free Lightweight Encryption Scheme for IoT

HakJu Kim* Kwangjo Kim*

*Department of Computer Science, KAIST.

Abstract

The current

IoT (Internet of Things) systems cannot provide the overhead caused by existing

encryption scheme for confidentiality. Thus, the development of lightweight encryption schemes is

necessary without degrading the system performance. In this paper, we introduce a well-known

lightweight encryption scheme, PRINCE, and a method to enrich the message space of PRINCE by

introducing XLS (eXtension by Latin Square). We discuss the cryptographic requirements of our

inverse-free lightweight encryption scheme and suggest how to extend a PRINCE-like encryption

scheme for the secure IoT system.

Keywords: Lightweight encryption, inverse-free, multipermutation, and IoT

I. Introduction

Since Internet was born in the 1980s, the

connectivity

of

human

life

has

been

increasing.

The

improvement

of

IT

(Information Technology) gave the birth of

new generation

of

the

connectivity;

the

connectivity between things as known as IoT

(Internet on Things).

Coins have both sides.

IoT creates new

markets and services via the communication

between many things, but the development of

IoT has caused new potential threats to the

security. While the traditional security issue

was

restricted

to

the

threat

in

the

cyber-world, the IoT security issue must be

extended

to

the

threat

in

the

cyber/physical-world. A successful attack on

IoT can endanger human lives[1].

The

cryptographic

primitives

like AES

(Advanced Encryption Standard) and SHA-3

(Secure Hash Algorithm) were designed to

defend against

the cyber-threat, but

those

essential to the IoT environment, because the

encryption scheme is one of the fundamental

cryptographic primitives for confidentiality.

In this paper, we aim to design a new

lightweight encryption scheme specialized for

IoT. Our goal

is to make an inverse-free

lightweight encryption scheme, which means

that the encryption scheme does not require

its inverse to decrypt. This paper discusses

the requirements of our encryption scheme

and

extends

one well-known

lightweight

encryption scheme called PRINCE[2].

The remainder of this paper is organized

as follows: We introduce PRINCE and XLS[3]

in Section

2. The

requirements

of

our

inverse-free encryption scheme is discussed

in Section 3. We propose the methodology to

extend PRINCE in Section 4. Our

future

work and conclusion are stated in Section 5

and Section 6, respectively.

II. Related work

primitives would

cause

an

unacceptable

2.1 PRINCE[2]

overhead to the resource-constrained devices.

PRINCE

is

a

lightweight

encryption

Therefore,

the

lightweight

cryptographic

scheme designed to perform the instantaneous

primitives have been researched recently. The

encryption without

a warm-up

phase

at

design of a lightweight encryption scheme is

minimum hardware cost. The scheme is a

64-bit block cipher with 128-bit key. The

⍺-reflection property is used to achieve the

construction is lightweight.

inverse-free

structure;

PRINCE(k)

is equal

the

inverse

of
to PRINCE(k XOR ⍺). The
low

to

the

III. Cryptographic Requirements

Our goal

is to design an inverse-free

lightweight encryption scheme specialized for

inverse-freeness

contributes

hardware cost of PRINCE. The structure of

IoT. Our

encryption scheme,

inspired by

PRINCE core

is

illustrated in Figure

1.

PRINCE, should be designed to have high

PRINCE achieves the encryption in one clock

execution speed,

low hardware

chip area

cycle at the maximum frequency of 200 MHz,

usage,

and

low power

consumption.

In

and the unrolled version of

the

scheme

addition, our scheme should support 128-bit

consumes 14-15 times less hardware chip

block size, 128/192/256-bit

flexible key size,

area

than AES-128

and 4-7

times

less

and provable security. This paper focuses on

hardware chip area than other

lightweight

the methodology to extend the block size and

encryption schemes in the literature.

the key size of PRINCE. Table 1 shows the

Figure 1. Structure of PRINCE core[2]

However, PRINCE has a major limitation.

The scheme supports 128-bit key size and

64-bit

block

size

only. Most modern

encryption schemes support 128-bit block size

and the flexible key size.

2.2 XLS[3]

XLS (eXtension by Latin Square)

is a

way to extend the message

space of a

cipher. Most block ciphers have the problem

of ciphertext expansion, which causes more

network overhead. XLS solves the problem

using three block cipher calls to encrypt a

2n-1 bit string using an n-bit block cipher.

XLS uses a pair of orthogonal

latin squares,

which are one type of the multipermutation,

to

prevent

the

problem of

ciphertext

expansion. In addition, the implementation of

XLS requires three bit-wise XOR, one shift,

summary of the requirements.

Table 1. Summary of the requirements

Cryptographic Requirements
Security level
Flexible key
Block size

Goal

Provable Security
128/192/256-bit key
128-bit

Other requirements

Goal

Execution speed
Hardware cost

Faster than PRINCE
Lower than PRINCE

IV. Extending PRINCE

4.1 Parallel construction

A straightforward method to extend an

encryption scheme is to simply connect

the

scheme in parallel. However,

the resulting

scheme is only a mode of operation of

the

original scheme. We illustrate two schematics

to increase the block size and the key size of

PRINCE in Figure 2.

Figure 2. Schematics to increase the block size

and the key size of PRINCE

and one

conditional XOR operations. The

Using the theorem in [2], we believe that

permutation is

involution,

so

the

inverse

we can claim the following theorem if you

permutation is not required. Thus,

the XLS

used the schematics in Figure 2.

Theorem 1. The advantage of any adversary who

not degrade the security level of PRINCE,

makes D queries to the E oracle and T queries

because

the orthogonal

latin square

is a

to the F/F-1 oracle satisfies

  Pr 
 
 Pr 


  


  


    


   



 

 

secure

construction[3]. The

approximated

version is

less

secure

than the

original

  

  ≤       

orthogonal

latin square, but the difference is

Parameter n is the block size and k is the key

size of the extension of PRINCE. Rest of

parameters are explained in [2].

(Proof) Skipped.

negligible[3].

In addition,

the approximated

version of the orthogonal latin square is more

lightweight than the original version. We can

have

the

security- performance

trade-off.

Although the security proof is not completed,

4.2 Swapping using Multipermutation

the resulting lightweight encryption scheme

The scheme in Figure 2 is very naïve and

meets the cryptographic requirements of our

inflexible. The orthogonal

latin square is a

secure mixing function, and is flexible to

inverse-free lightweight encryption scheme in

Table

1. Our

extension

of PRINCE is

extend PRINCE to have the block size larger

illustrated in Figure 4.

than 128-bit. The

implementation of

the

orthogonal

latin

square

requires

three

bit-wise XOR, one shift and one conditional

XOR operations (dbl), and the implementation

of

the approximated version requires three

bit-wise

XOR

and

one

left

circular

bit-rotation

(rol)[3].

Both

versions

involutions,

so

they

correspond

to

inverse-freeness

of

PRINCE.

are

the

The

implementation of orthogonal

latin square and

its approximated version illustrated in Figure 3.

Figure 3. The implementation of orthogonal

latin

square (left) and its approximated version (right) [3]

We propose

the

extension of PRINCE

using

the

orthogonal

latin

square. The

orthogonal

latin square replaces the simple-

swapping in Figure 2. The key is divided

Figure 4. Our extension of PRINCE (first half of

the construction)

We bring the

definition of

a mixing

function from [3] and build a conjecture that

Theorem 1 still holds for the extension of

PRINCE using the orthogonal latin square.

Definition 1. Fix a set ⊆ ≥ , let mix:

→ be a length-preserving permutation, and

let   →. We say that mix is an -good

mixing function if, for all s such that  ⊆ , we

have that
(1) mixLLL(A,·) is a permutation for all   ,
(2) mixR(·,B) is a permutation for all ∈ ,
     ≤ for ∈ ,
(3) Pr 
(4) Pr 
     ≤ for ∈





into four 64-bit subkeys, which are XORed at

Conjecture 1. Let the multipermutation be a 

each round. The block size of

the resulting

encryption scheme is 128-bit, and the scheme

has the flexible key size of 128/192/256-bit.

The use of the orthogonal

latin square does

-good mixing function, Theorem 1 still holds for

the extension of PRINCE using the orthogonal

latin square.

4.3 Evaluation

We believe that the security level of our

design is at least as strong as the security

level of PRINCE. However, our design can be

vulnerable

against

the

related key attack

proposed in [4].

cipher. Third, we

have

discussed

the

requirements of our inverse-free lightweight

encryption scheme specialized for IoT. Fourth,

we have extended PRINCE using orthogonal

latin

square

to meet

the

cryptographic

requirements.

One orthogonal

latin square block consists

of

five bit-wise operations. There are ten

Acknowledgement

orthogonal

latin square blocks in our scheme,

This research was funded by the MSIP

so

the

scheme

has

increased

the

(Ministry

of

Science,

ICT & Future

performance/cost overhead by 50 bit-wise

Planning), Korea in the ICT R&D Program

operations from the original PRINCE. The

2014 [1391104001, Research on Communication

increased

overhead

is negligible, but we

Technology using Bio-inspired Algorithm].

should design the scheme to have a faster

performance and a lower cost than PRINCE.

[References]

V. Future work

Our proposed scheme should be revised to

resist the related key attack, and a complete

[1] 미래창조과학부: 스마트 안심국가 실현을

위한 사물인터넷(IoT) 정보보호 로드맵

(2014년 10월 31일)

security proof of the scheme against all the

[2] Julia Borghoff, Anne Canteaut, Tim

known attacks including side-channel attacks

should be done. The different kinds of

the

multipermutation

and

the

components

of

PRINCE should be studied to design a faster

and cost-efficient encryption scheme. We will

evaluate our design by SoC (System on

Chip) later.

VI. Conclusion

Güneysu, Elif Bilge Kavun, Miroslav

Knezevic,

Lars R. Knudsen, Gregor

Leander, Ventzislav Nikov, Christof Paar,

Christian Rechberger, Peter Rombouts,

Søren S. Thomsen, and Tolga Yalçın,

“PRINCE–A Low-latency Block Cipher

for Pervasive Computing Applications,”

Advances

in Cryptology–ASIACRYPT

2012. Springer Berlin Heidelberg,

2012,

IoT is

entering

human

lives

quickly.

208-225.

Increased connection between physical-world

[3] Thomas Ristenpart and Phillip Rogaway.

and

cyber-world

poses more

dangerous

"How to enrich the message space of a

threats. The resource-constrained environment

cipher." Fast Software Encryption.

of

IoT has

challenged

the

cryptographic

Springer Berlin Heidelberg, 2007.

academia. Our

contribution is

as

follows:

First, we have explained the need to develop

new lightweight

cryptographic

primitives

specialized

for

IoT.

Second, we

have

introduced

a

well-known

lightweight

encryption scheme

called PRINCE and a

method to extend the message space of a

[4] 주왕호, 안현정, 이옥연, 강주성, 김종성.

"최신 경량 블록암호 PRINCE에 대한 향상된

연관키 공격" 정보보호학회논문지 제24권 3

호. 한국정보보호학회, 2014년 6월, 445-451.

