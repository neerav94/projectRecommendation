Super-resolution Image Processing Pipeline 

 

Hassan K Najjar1 

 
 

Abstract—this  project  describes  the  steps  to  process  a  Bayer 
raw  sensor  output  image  which  is  noisy,  undersampled,  and 
blurred.  The  final  output  is  a  de-noised,  de-blurred,  and 
upsampled  version  of  the  input  image.  Some  of  the  in-between 
steps 
shading  correction,  color  balancing, 
demosaicing, color correction, etc.  

include 

lens 

Keywords—raw  image  ;  deblurring  ;  denoising  ;  image 

deconvolution ;  

I.   INTRODUCTION  

Processing a raw image requires many steps to 

correct artifacts stemming from the optics (e.g., lens shading), 
imaging sensor (e.g., defective pixels, noise, Bayer sampling) 
among others before the image can be properly displayed or 
printed. In this project, an ISP pipeline was developed in 
MATLAB with post-processing that includes de-convolution 
and interpolation (super-resolution) and detail enhancement. 
Parameters for each can be adjusted depending on the input 
image, for instance, to accomplish stronger/weaker de-noise, 
sharpening, or defective pixel correction.  

 

II.  ALGORITHMS 

A.  Pipeline sequence 

The pipeline is split in 3 stages: 1) Bayer domain 

processing, 2) linear RGB processing, 3) post-processing in 
gamma-encoded domain. In the first stage, we begin by 
applying defective pixel correction (DPC) via Median 
filtering. Followed by lens shading correction (LSC), black 
level correction (BLC), white balancing (WB), and then 
denoising via adaptive Wiener filtering. In the second stage, 
the image is first demosaicked with local polynomial 
approximation combined with intersection of confidence rule 
(LPA-ICI) implementation, color correction, white balancing 
(again), and finally, gamma encoding. In the last stage, a de-
convolution-interpolation algorithm is applied followed by 
Median sharpening.  

calculated as the average of all the local estimated variances in 
the channel image.  

By  adaptively  filtering  noise,  edges  and  high  frequency 

details are better preserved than linearly filtering an image. 

Lens shading correction is applied on the image by use of an 
a  posteriori  algorithm  which  uses  a  white  image,  and  a  black 
image: 

 

 

 

𝑦𝑙𝑠𝑐(𝑖, 𝑗) = 𝑐𝑜𝑛𝑠𝑡 ∗

𝑦(𝑖,𝑗)−𝑏(𝑖,𝑗)
𝑤(𝑖,𝑗)−𝑏(𝑖,𝑗)

  

     (2) 

Where ylsc(i,j)  is  the  lens  shading  corrected  image,  y(i.j)  is 
the uncorrected image, b(i,j) is the black image, and w(i,j) is the 
white image, and const is a scalar. 

Black level is subtracted followed by white balancing using 

the shades-of-gray algorithm.  

C.  Linear rgb processing 

The LPA-ICI algorithm is used for color filter array 
interpolation (CFAI) only, though the implementation can be 
used for simultaneous denoising and demosaicking [1]. Based 
on preliminary testing, it’s best to separate the operations. 

Color balancing is repeated in the rgb space, as it’s been 

found to give better results. Followed by a posteriori color 
correction via a 3x3 matrix calibrated from the Macbeth 
ColorChecker chart. Finally, the color space gamma coding (γ 
= 1.8) is applied on the image for display. 

D.  Post-processing in non-linear domain 

The final stage involves deblurring the image using the 

measured camera PSF, followed by an interpolation to achieve 
superresolution. See section blah blah for a comparison of low 
resolution image with high resolution image achieved using 
this method. 

III.  PIPELINE IMPLEMENTATION 

In this section, the algorithms’ implementation will be 

shown with detailed discussions on each implementation.  

B.  Bayer domain processing 

A.  Defective pixel correction 

 

The  raw  image  contains  4  channels  of  red,  green1, 
green2  and  blue.  Median  filtering  is  applied  on  each  channel 
separately  to  remove  ‘salt-and-pepper’  noise,  also  known  as 
defective pixels. Denoise is applied on each channel separately 
as well. The denoising algorithm is an adaptive Wiener filtering. 
The noise is modeled as additive white noise: 



𝑦𝑐(𝑖, 𝑗) = 𝑥𝑐(𝑖, 𝑗) + 𝑛𝑐(𝑖, 𝑗)



Where  xc(i,j) is the ideal channel image, nc(i,j) is the noise 
modeled  as  a  Gaussian  N(0,σc).  The  noise  variance,  σc,  is 

Defective pixels in CMOS sensors appear in mainly 4 

patterns: 1) single pixel, 2) 2-sharing, 3) 2x2 sharing pixel, 
and 4) 4 sharing pixel. The Median kernel size has to be 
adjusted according to which of those are known to be output 
by the sensor. Defective pixels can be black or white, and for 
this reason, DPC must be applied prior to black level 
subtraction.  

Figure 1a shows an input raw image with defective pixels 

which are then corrected in Figure 1b. Various kernel sizes 
have been tested, and for this special case, the sensor has 

1 EE368: Digital Image Processing, Stanford University. 

Super-resolution Image Processing Pipeline 

 

Hassan K Najjar1 

 
 

Abstract—this  project  describes  the  steps  to  process  a  Bayer 
raw  sensor  output  image  which  is  noisy,  undersampled,  and 
blurred.  The  final  output  is  a  de-noised,  de-blurred,  and 
upsampled  version  of  the  input  image.  Some  of  the  in-between 
steps 
shading  correction,  color  balancing, 
demosaicing, color correction, etc.  

include 

lens 

Keywords—raw  image  ;  deblurring  ;  denoising  ;  image 

deconvolution ;  

I.   INTRODUCTION  

Processing a raw image requires many steps to 

correct artifacts stemming from the optics (e.g., lens shading), 
imaging sensor (e.g., defective pixels, noise, Bayer sampling) 
among others before the image can be properly displayed or 
printed. In this project, an ISP pipeline was developed in 
MATLAB with post-processing that includes de-convolution 
and interpolation (super-resolution) and detail enhancement. 
Parameters for each can be adjusted depending on the input 
image, for instance, to accomplish stronger/weaker de-noise, 
sharpening, or defective pixel correction.  

 

II.  ALGORITHMS 

A.  Pipeline sequence 

The pipeline is split in 3 stages: 1) Bayer domain 

processing, 2) linear RGB processing, 3) post-processing in 
gamma-encoded domain. In the first stage, we begin by 
applying defective pixel correction (DPC) via Median 
filtering. Followed by lens shading correction (LSC), black 
level correction (BLC), white balancing (WB), and then 
denoising via adaptive Wiener filtering. In the second stage, 
the image is first demosaicked with local polynomial 
approximation combined with intersection of confidence rule 
(LPA-ICI) implementation, color correction, white balancing 
(again), and finally, gamma encoding. In the last stage, a de-
convolution-interpolation algorithm is applied followed by 
Median sharpening.  

calculated as the average of all the local estimated variances in 
the channel image.  

By  adaptively  filtering  noise,  edges  and  high  frequency 

details are better preserved than linearly filtering an image. 

Lens shading correction is applied on the image by use of an 
a  posteriori  algorithm  which  uses  a  white  image,  and  a  black 
image: 

 

 

 

𝑦𝑙𝑠𝑐(𝑖, 𝑗) = 𝑐𝑜𝑛𝑠𝑡 ∗

𝑦(𝑖,𝑗)−𝑏(𝑖,𝑗)
𝑤(𝑖,𝑗)−𝑏(𝑖,𝑗)

  

     (2) 

Where ylsc(i,j)  is  the  lens  shading  corrected  image,  y(i.j)  is 
the uncorrected image, b(i,j) is the black image, and w(i,j) is the 
white image, and const is a scalar. 

Black level is subtracted followed by white balancing using 

the shades-of-gray algorithm.  

C.  Linear rgb processing 

The LPA-ICI algorithm is used for color filter array 
interpolation (CFAI) only, though the implementation can be 
used for simultaneous denoising and demosaicking [1]. Based 
on preliminary testing, it’s best to separate the operations. 

Color balancing is repeated in the rgb space, as it’s been 

found to give better results. Followed by a posteriori color 
correction via a 3x3 matrix calibrated from the Macbeth 
ColorChecker chart. Finally, the color space gamma coding (γ 
= 1.8) is applied on the image for display. 

D.  Post-processing in non-linear domain 

The final stage involves deblurring the image using the 

measured camera PSF, followed by an interpolation to achieve 
superresolution. See section blah blah for a comparison of low 
resolution image with high resolution image achieved using 
this method. 

III.  PIPELINE IMPLEMENTATION 

In this section, the algorithms’ implementation will be 

shown with detailed discussions on each implementation.  

B.  Bayer domain processing 

A.  Defective pixel correction 

 

The  raw  image  contains  4  channels  of  red,  green1, 
green2  and  blue.  Median  filtering  is  applied  on  each  channel 
separately  to  remove  ‘salt-and-pepper’  noise,  also  known  as 
defective pixels. Denoise is applied on each channel separately 
as well. The denoising algorithm is an adaptive Wiener filtering. 
The noise is modeled as additive white noise: 



𝑦𝑐(𝑖, 𝑗) = 𝑥𝑐(𝑖, 𝑗) + 𝑛𝑐(𝑖, 𝑗)



Where  xc(i,j) is the ideal channel image, nc(i,j) is the noise 
modeled  as  a  Gaussian  N(0,σc).  The  noise  variance,  σc,  is 

Defective pixels in CMOS sensors appear in mainly 4 

patterns: 1) single pixel, 2) 2-sharing, 3) 2x2 sharing pixel, 
and 4) 4 sharing pixel. The Median kernel size has to be 
adjusted according to which of those are known to be output 
by the sensor. Defective pixels can be black or white, and for 
this reason, DPC must be applied prior to black level 
subtraction.  

Figure 1a shows an input raw image with defective pixels 

which are then corrected in Figure 1b. Various kernel sizes 
have been tested, and for this special case, the sensor has 

1 EE368: Digital Image Processing, Stanford University. 

vertical-sharing defective pixels, and so a horizontal kernel of 
size 1x3 was used and successfully corrected for that. 

Fi gu r e  2 a :  D en oi s ed   Gr e en R   c h a n n el  

Fi gu r e  1 a :  In p u t   ra w  i ma g e  wi t h   b la c k   an d   wh i t e   DP  

 

Fi gu r e  2 b :  Gr e en R   c h a n n el  p ri or  t o  d en oi s e  

C.  CFAI (demosaicking) 

Figure 3 shows the advantage of LPA-ICI for 

interpolation of Bayer images. The algorithm has the 
advantage of preserving thin lines and boundaries, by taking 
advantage of intersection of confidence rule (ICI). The ICI 
adds a constraint on the LPA for each pixel p(i,j) by defining 
the scale (window size) of LPA [2]. 

Fi gu r e  1 b :  M ed i a n   fi lt e red   i ma ge  1 x3   k ern e l  

 

B.  Bayer denoise 

Using the LPA-ICI implementation, the denoise 

problem can be treated as an estimation problem jointly with 
demosaicking, however, this didn’t give good results (see 
Appendix). For this reason, an adaptive filter was used in lieu 
of the joint method. 

Figure 2 shows a comparison of the image before and after 

denoising for a single Bayer channel. Each channel is 
denoised with a small kernel—[3 3] for greens and [2 2] for 
red and blue—and then the channels are synthesized back 
together. Since green correlates with luminance more so than 
blue and red, and hence, has a higher correlation with visual 
noise, the kernel is chosen to be bigger.  

 

 

Super-resolution Image Processing Pipeline 

 

Hassan K Najjar1 

 
 

Abstract—this  project  describes  the  steps  to  process  a  Bayer 
raw  sensor  output  image  which  is  noisy,  undersampled,  and 
blurred.  The  final  output  is  a  de-noised,  de-blurred,  and 
upsampled  version  of  the  input  image.  Some  of  the  in-between 
steps 
shading  correction,  color  balancing, 
demosaicing, color correction, etc.  

include 

lens 

Keywords—raw  image  ;  deblurring  ;  denoising  ;  image 

deconvolution ;  

I.   INTRODUCTION  

Processing a raw image requires many steps to 

correct artifacts stemming from the optics (e.g., lens shading), 
imaging sensor (e.g., defective pixels, noise, Bayer sampling) 
among others before the image can be properly displayed or 
printed. In this project, an ISP pipeline was developed in 
MATLAB with post-processing that includes de-convolution 
and interpolation (super-resolution) and detail enhancement. 
Parameters for each can be adjusted depending on the input 
image, for instance, to accomplish stronger/weaker de-noise, 
sharpening, or defective pixel correction.  

 

II.  ALGORITHMS 

A.  Pipeline sequence 

The pipeline is split in 3 stages: 1) Bayer domain 

processing, 2) linear RGB processing, 3) post-processing in 
gamma-encoded domain. In the first stage, we begin by 
applying defective pixel correction (DPC) via Median 
filtering. Followed by lens shading correction (LSC), black 
level correction (BLC), white balancing (WB), and then 
denoising via adaptive Wiener filtering. In the second stage, 
the image is first demosaicked with local polynomial 
approximation combined with intersection of confidence rule 
(LPA-ICI) implementation, color correction, white balancing 
(again), and finally, gamma encoding. In the last stage, a de-
convolution-interpolation algorithm is applied followed by 
Median sharpening.  

calculated as the average of all the local estimated variances in 
the channel image.  

By  adaptively  filtering  noise,  edges  and  high  frequency 

details are better preserved than linearly filtering an image. 

Lens shading correction is applied on the image by use of an 
a  posteriori  algorithm  which  uses  a  white  image,  and  a  black 
image: 

 

 

 

𝑦𝑙𝑠𝑐(𝑖, 𝑗) = 𝑐𝑜𝑛𝑠𝑡 ∗

𝑦(𝑖,𝑗)−𝑏(𝑖,𝑗)
𝑤(𝑖,𝑗)−𝑏(𝑖,𝑗)

  

     (2) 

Where ylsc(i,j)  is  the  lens  shading  corrected  image,  y(i.j)  is 
the uncorrected image, b(i,j) is the black image, and w(i,j) is the 
white image, and const is a scalar. 

Black level is subtracted followed by white balancing using 

the shades-of-gray algorithm.  

C.  Linear rgb processing 

The LPA-ICI algorithm is used for color filter array 
interpolation (CFAI) only, though the implementation can be 
used for simultaneous denoising and demosaicking [1]. Based 
on preliminary testing, it’s best to separate the operations. 

Color balancing is repeated in the rgb space, as it’s been 

found to give better results. Followed by a posteriori color 
correction via a 3x3 matrix calibrated from the Macbeth 
ColorChecker chart. Finally, the color space gamma coding (γ 
= 1.8) is applied on the image for display. 

D.  Post-processing in non-linear domain 

The final stage involves deblurring the image using the 

measured camera PSF, followed by an interpolation to achieve 
superresolution. See section blah blah for a comparison of low 
resolution image with high resolution image achieved using 
this method. 

III.  PIPELINE IMPLEMENTATION 

In this section, the algorithms’ implementation will be 

shown with detailed discussions on each implementation.  

B.  Bayer domain processing 

A.  Defective pixel correction 

 

The  raw  image  contains  4  channels  of  red,  green1, 
green2  and  blue.  Median  filtering  is  applied  on  each  channel 
separately  to  remove  ‘salt-and-pepper’  noise,  also  known  as 
defective pixels. Denoise is applied on each channel separately 
as well. The denoising algorithm is an adaptive Wiener filtering. 
The noise is modeled as additive white noise: 



𝑦𝑐(𝑖, 𝑗) = 𝑥𝑐(𝑖, 𝑗) + 𝑛𝑐(𝑖, 𝑗)



Where  xc(i,j) is the ideal channel image, nc(i,j) is the noise 
modeled  as  a  Gaussian  N(0,σc).  The  noise  variance,  σc,  is 

Defective pixels in CMOS sensors appear in mainly 4 

patterns: 1) single pixel, 2) 2-sharing, 3) 2x2 sharing pixel, 
and 4) 4 sharing pixel. The Median kernel size has to be 
adjusted according to which of those are known to be output 
by the sensor. Defective pixels can be black or white, and for 
this reason, DPC must be applied prior to black level 
subtraction.  

Figure 1a shows an input raw image with defective pixels 

which are then corrected in Figure 1b. Various kernel sizes 
have been tested, and for this special case, the sensor has 

1 EE368: Digital Image Processing, Stanford University. 

vertical-sharing defective pixels, and so a horizontal kernel of 
size 1x3 was used and successfully corrected for that. 

Fi gu r e  2 a :  D en oi s ed   Gr e en R   c h a n n el  

Fi gu r e  1 a :  In p u t   ra w  i ma g e  wi t h   b la c k   an d   wh i t e   DP  

 

Fi gu r e  2 b :  Gr e en R   c h a n n el  p ri or  t o  d en oi s e  

C.  CFAI (demosaicking) 

Figure 3 shows the advantage of LPA-ICI for 

interpolation of Bayer images. The algorithm has the 
advantage of preserving thin lines and boundaries, by taking 
advantage of intersection of confidence rule (ICI). The ICI 
adds a constraint on the LPA for each pixel p(i,j) by defining 
the scale (window size) of LPA [2]. 

Fi gu r e  1 b :  M ed i a n   fi lt e red   i ma ge  1 x3   k ern e l  

 

B.  Bayer denoise 

Using the LPA-ICI implementation, the denoise 

problem can be treated as an estimation problem jointly with 
demosaicking, however, this didn’t give good results (see 
Appendix). For this reason, an adaptive filter was used in lieu 
of the joint method. 

Figure 2 shows a comparison of the image before and after 

denoising for a single Bayer channel. Each channel is 
denoised with a small kernel—[3 3] for greens and [2 2] for 
red and blue—and then the channels are synthesized back 
together. Since green correlates with luminance more so than 
blue and red, and hence, has a higher correlation with visual 
noise, the kernel is chosen to be bigger.  

 

 

interpolation is used to get the higher resolution image HR. 
Figure 4 shows a comparison of LR and HR images. 

Fi gu r e  3 a :  g ra d i en t   c orr ec t ed   l i n ea r  i n t erp o la t i on  

 

Fi gu r e  4 a :  P ost - ga mma   en c od e d   i ma ge  

Fi gu r e  3 b :  LP A- IC I  a lg ori t h m  i n t erp ola t i on  

 

D.  Super-resolution 

Fi gu r e  4 b :  Su p er -r es olu t i on   i m a ge   

We begin with a low resolution image LR(i,j) and 

IV.  DISCUSSION 

 

 

we’d like to obtain a high resolution image HR(i,j) from this 
single image. LR(i,j) is a blurred version of I(i,j). 
Mathematically, we can say: 

 

𝐿𝑅(𝑖, 𝑗) = 𝐼(𝑖, 𝑗) ∗ ℎ(𝑖, 𝑗) + 𝜀 

 

(3) 

Where h(i,j) is the point spread function (PSF) of the camera, 
usually resembling a sinc function, ε is noise associated with 
(mostly) demosaicking. 

The goal is to recover the un-blurred image I(i,j). For 

simplicity, the noise, ε, is assumed to be filtered in the Bayer 
domain (Section II.B). Therefore, if the h(i,j) is known, the 
inverse function h-1(i,j) can be used to recover I(i,j). 

𝐼(𝑖, 𝑗) = ℎ−1(𝑖, 𝑗) ∗ 𝐿𝑅(𝑖, 𝑗) 

 

 

(4) 

Now to obtain the image HR(i,j) we can apply any one of 

the methods in [3] [4]. As an initial test of concept, bicubic 

In this section, some of the artifacts and problems 

associated with this implementation are going to be analyzed 
and plausible solutions are going to be discussed. 

Halos around bright edges (seen in Figure 4a/4b), seem to 
be a product of the spatial denoising [5], and can be mitigated 
by use of better adaptive filtering.  

The assumption made in Section II.D is that the PSF is the 
same for all channels and throughout the imaging plane, is in 
most cases, untrue and causes many artifacts especially on 80% 
image heights and above (close to the edge and corner of the 
image plane).  

Super-resolution Image Processing Pipeline 

 

Hassan K Najjar1 

 
 

Abstract—this  project  describes  the  steps  to  process  a  Bayer 
raw  sensor  output  image  which  is  noisy,  undersampled,  and 
blurred.  The  final  output  is  a  de-noised,  de-blurred,  and 
upsampled  version  of  the  input  image.  Some  of  the  in-between 
steps 
shading  correction,  color  balancing, 
demosaicing, color correction, etc.  

include 

lens 

Keywords—raw  image  ;  deblurring  ;  denoising  ;  image 

deconvolution ;  

I.   INTRODUCTION  

Processing a raw image requires many steps to 

correct artifacts stemming from the optics (e.g., lens shading), 
imaging sensor (e.g., defective pixels, noise, Bayer sampling) 
among others before the image can be properly displayed or 
printed. In this project, an ISP pipeline was developed in 
MATLAB with post-processing that includes de-convolution 
and interpolation (super-resolution) and detail enhancement. 
Parameters for each can be adjusted depending on the input 
image, for instance, to accomplish stronger/weaker de-noise, 
sharpening, or defective pixel correction.  

 

II.  ALGORITHMS 

A.  Pipeline sequence 

The pipeline is split in 3 stages: 1) Bayer domain 

processing, 2) linear RGB processing, 3) post-processing in 
gamma-encoded domain. In the first stage, we begin by 
applying defective pixel correction (DPC) via Median 
filtering. Followed by lens shading correction (LSC), black 
level correction (BLC), white balancing (WB), and then 
denoising via adaptive Wiener filtering. In the second stage, 
the image is first demosaicked with local polynomial 
approximation combined with intersection of confidence rule 
(LPA-ICI) implementation, color correction, white balancing 
(again), and finally, gamma encoding. In the last stage, a de-
convolution-interpolation algorithm is applied followed by 
Median sharpening.  

calculated as the average of all the local estimated variances in 
the channel image.  

By  adaptively  filtering  noise,  edges  and  high  frequency 

details are better preserved than linearly filtering an image. 

Lens shading correction is applied on the image by use of an 
a  posteriori  algorithm  which  uses  a  white  image,  and  a  black 
image: 

 

 

 

𝑦𝑙𝑠𝑐(𝑖, 𝑗) = 𝑐𝑜𝑛𝑠𝑡 ∗

𝑦(𝑖,𝑗)−𝑏(𝑖,𝑗)
𝑤(𝑖,𝑗)−𝑏(𝑖,𝑗)

  

     (2) 

Where ylsc(i,j)  is  the  lens  shading  corrected  image,  y(i.j)  is 
the uncorrected image, b(i,j) is the black image, and w(i,j) is the 
white image, and const is a scalar. 

Black level is subtracted followed by white balancing using 

the shades-of-gray algorithm.  

C.  Linear rgb processing 

The LPA-ICI algorithm is used for color filter array 
interpolation (CFAI) only, though the implementation can be 
used for simultaneous denoising and demosaicking [1]. Based 
on preliminary testing, it’s best to separate the operations. 

Color balancing is repeated in the rgb space, as it’s been 

found to give better results. Followed by a posteriori color 
correction via a 3x3 matrix calibrated from the Macbeth 
ColorChecker chart. Finally, the color space gamma coding (γ 
= 1.8) is applied on the image for display. 

D.  Post-processing in non-linear domain 

The final stage involves deblurring the image using the 

measured camera PSF, followed by an interpolation to achieve 
superresolution. See section blah blah for a comparison of low 
resolution image with high resolution image achieved using 
this method. 

III.  PIPELINE IMPLEMENTATION 

In this section, the algorithms’ implementation will be 

shown with detailed discussions on each implementation.  

B.  Bayer domain processing 

A.  Defective pixel correction 

 

The  raw  image  contains  4  channels  of  red,  green1, 
green2  and  blue.  Median  filtering  is  applied  on  each  channel 
separately  to  remove  ‘salt-and-pepper’  noise,  also  known  as 
defective pixels. Denoise is applied on each channel separately 
as well. The denoising algorithm is an adaptive Wiener filtering. 
The noise is modeled as additive white noise: 



𝑦𝑐(𝑖, 𝑗) = 𝑥𝑐(𝑖, 𝑗) + 𝑛𝑐(𝑖, 𝑗)



Where  xc(i,j) is the ideal channel image, nc(i,j) is the noise 
modeled  as  a  Gaussian  N(0,σc).  The  noise  variance,  σc,  is 

Defective pixels in CMOS sensors appear in mainly 4 

patterns: 1) single pixel, 2) 2-sharing, 3) 2x2 sharing pixel, 
and 4) 4 sharing pixel. The Median kernel size has to be 
adjusted according to which of those are known to be output 
by the sensor. Defective pixels can be black or white, and for 
this reason, DPC must be applied prior to black level 
subtraction.  

Figure 1a shows an input raw image with defective pixels 

which are then corrected in Figure 1b. Various kernel sizes 
have been tested, and for this special case, the sensor has 

1 EE368: Digital Image Processing, Stanford University. 

vertical-sharing defective pixels, and so a horizontal kernel of 
size 1x3 was used and successfully corrected for that. 

Fi gu r e  2 a :  D en oi s ed   Gr e en R   c h a n n el  

Fi gu r e  1 a :  In p u t   ra w  i ma g e  wi t h   b la c k   an d   wh i t e   DP  

 

Fi gu r e  2 b :  Gr e en R   c h a n n el  p ri or  t o  d en oi s e  

C.  CFAI (demosaicking) 

Figure 3 shows the advantage of LPA-ICI for 

interpolation of Bayer images. The algorithm has the 
advantage of preserving thin lines and boundaries, by taking 
advantage of intersection of confidence rule (ICI). The ICI 
adds a constraint on the LPA for each pixel p(i,j) by defining 
the scale (window size) of LPA [2]. 

Fi gu r e  1 b :  M ed i a n   fi lt e red   i ma ge  1 x3   k ern e l  

 

B.  Bayer denoise 

Using the LPA-ICI implementation, the denoise 

problem can be treated as an estimation problem jointly with 
demosaicking, however, this didn’t give good results (see 
Appendix). For this reason, an adaptive filter was used in lieu 
of the joint method. 

Figure 2 shows a comparison of the image before and after 

denoising for a single Bayer channel. Each channel is 
denoised with a small kernel—[3 3] for greens and [2 2] for 
red and blue—and then the channels are synthesized back 
together. Since green correlates with luminance more so than 
blue and red, and hence, has a higher correlation with visual 
noise, the kernel is chosen to be bigger.  

 

 

interpolation is used to get the higher resolution image HR. 
Figure 4 shows a comparison of LR and HR images. 

Fi gu r e  3 a :  g ra d i en t   c orr ec t ed   l i n ea r  i n t erp o la t i on  

 

Fi gu r e  4 a :  P ost - ga mma   en c od e d   i ma ge  

Fi gu r e  3 b :  LP A- IC I  a lg ori t h m  i n t erp ola t i on  

 

D.  Super-resolution 

Fi gu r e  4 b :  Su p er -r es olu t i on   i m a ge   

We begin with a low resolution image LR(i,j) and 

IV.  DISCUSSION 

 

 

we’d like to obtain a high resolution image HR(i,j) from this 
single image. LR(i,j) is a blurred version of I(i,j). 
Mathematically, we can say: 

 

𝐿𝑅(𝑖, 𝑗) = 𝐼(𝑖, 𝑗) ∗ ℎ(𝑖, 𝑗) + 𝜀 

 

(3) 

Where h(i,j) is the point spread function (PSF) of the camera, 
usually resembling a sinc function, ε is noise associated with 
(mostly) demosaicking. 

The goal is to recover the un-blurred image I(i,j). For 

simplicity, the noise, ε, is assumed to be filtered in the Bayer 
domain (Section II.B). Therefore, if the h(i,j) is known, the 
inverse function h-1(i,j) can be used to recover I(i,j). 

𝐼(𝑖, 𝑗) = ℎ−1(𝑖, 𝑗) ∗ 𝐿𝑅(𝑖, 𝑗) 

 

 

(4) 

Now to obtain the image HR(i,j) we can apply any one of 

the methods in [3] [4]. As an initial test of concept, bicubic 

In this section, some of the artifacts and problems 

associated with this implementation are going to be analyzed 
and plausible solutions are going to be discussed. 

Halos around bright edges (seen in Figure 4a/4b), seem to 
be a product of the spatial denoising [5], and can be mitigated 
by use of better adaptive filtering.  

The assumption made in Section II.D is that the PSF is the 
same for all channels and throughout the imaging plane, is in 
most cases, untrue and causes many artifacts especially on 80% 
image heights and above (close to the edge and corner of the 
image plane).  

REFERENCES  

[1]  K. Hirakawa and T. W. Parks, "Joint Demosaicing and Denoising," IEEE 

TRANSACTIONS ON IMAGE PROCESSING, vol. 15, no. 8, 2006.  

[2]  

D. K. V. Paliy, R. Bilcu, S. Alenius and K. Egiazarian, "Spatially 

adaptive color filter array interpolation for noiseless and noisy data," 

Nokia Research Center, Tempere, 2007. 

[3]   D. Glasner, "Super-Resolution from a Single Image," in The Weizmann 

Institute of Science, Israel.  

[4]   H. He and W.-C. Siu, "Single Image Super-Resolution using Gaussian 

Process Regression," The Honk Kong Polytechnic University. [Online].  

[5]   T. Wilson and C. Sheppard, "The halo effect of image processing by 

spatial frequency filtering," Optik - International journal for Light and 

Electron Optics.  

 

 
 

Fi gu r e  5 a :  Su p er -r es o lu t i on   i ma ge  (ed g e)  

 

Fi gu r e  5 b :  Post -ga mma   en c od e d   i ma ge   

 

 

