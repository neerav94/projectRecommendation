Overlapping Community Detection Over Temporal Graph

Sequences

Kai Sheng Tai
Stanford University

kst@cs.stanford.edu

Stephen Macke
Stanford University

smacke@cs.stanford.edu

Yifei Huang

Stanford University

yifeih@cs.stanford.edu

ABSTRACT
In this paper, we introduce the Temporal Aﬃliation Model
(TEAM), a novel, scalable method for overlapping commu-
nity detection on dynamic, temporally-evolving networks.
The model jointly learns term-community aﬃliation strengths
along with community activity levels at each time step. Our
method can further cluster the discovered communities into
a community hierarchy. We apply TEAM to a dynamic topic
modeling task on a corpus of New York Times politics arti-
cles from 1987 to 2007. Our method successfully discovers a
topical hierarchy and identiﬁes temporal activity levels for
topics that correlate well with signiﬁcant historical events.

INTRODUCTION

1.
The structure of many real-world networks changes dynam-
ically over time. Connections between nodes in the network
may appear, disappear, or change in strength. Examples
of such networks with temporal dynamics include the net-
work traﬃc graph over collections of routers [11], networks
of emails between individuals [8, 16], and protein-protein
interaction networks [6].

These dynamic network structures have previously been ex-
plored in a variety of settings. Guo et al.
[5] and Kolar
et al. [9] use observations of node attributes over time (for
example, observations of gene expression levels) to learn la-
tent, temporally-evolving network structures over the nodes.
Here, the underlying network topology is unobserved. Han-
neke et al.
[7] study the problem of predicting the future
topology of a network given the previous history of network
structures. Using a discrete time series of observations of
the network structure, they model the temporal evolution
of network topology under a Markov assumption.

In spite of the prevalence of temporally-evolving networks
in real-world data and past work on dynamic network struc-
tures, the majority of work in community detection in net-
works has focused on discovering communities in static net-
works. Comparatively little work has been done on commu-
nity detection in dynamic networks that evolve over time.

In this paper, we introduce TEAM (Temporal Aﬃliation
Model), a novel, scalable community detection method over
temporal graph sequences that jointly learns both the la-
tent community structure and the time-dependent activity
of each community. TEAM is an extension of BigClam
(Cluster Aﬃliation Model for Big Networks) [21], an over-
lapping community detection method for static networks.

Figure 1: Overlapping communities in a dynamic
network.

Our method is able to detect both overlapping and non-
overlapping communities in the network. Our method can
further cluster the set of discovered communities into a com-
munity hierarchy using hierarchical agglomerative cluster-
ing.

We evaluate the quality of the communities discovered by
the network by evaluating against networks with known ground-
truth communities. We ﬁnd that TEAM achieves compara-
ble performance with BigClam (as measured by average F1
score) on co-authorship networks extracted from the DBLP
dataset [13].

As an application of TEAM, we model the temporal evolu-
tion of topics in a corpus of New York Times articles span-
ning the years 1987 to 2007. Unlike many commonly-used
topic models, our method does not require any variational
inference or Gibbs sampling during learning, which allows
us to scale to much larger corpora. Our method successfully
identiﬁes a topical hierarchy as well as the temporal activity
of each topic. Several of the topics discovered by TEAM on
this corpus correlate well with signiﬁcant historical events.

2. RELATED WORK
The TEAM model is closely related to BigClam [21], a
bipartite aﬃliation network model [12, 22] for overlapping
community detection. In bipartite aﬃliation network mod-
els, the nodes of the network and the set of community nodes
comprise the two disjoint sets of vertices of a bipartite graph.
The edges between network nodes and community nodes
represent the aﬃliation of the node with the community. If
the graph is weighted, the weight of the edge corresponds
to the strength of the node’s community aﬃliation. The
observed edges between the nodes of the network are con-
sidered to be generated from the latent community aﬃlia-

t = t0t = t1Overlapping Community Detection Over Temporal Graph

Sequences

Kai Sheng Tai
Stanford University

kst@cs.stanford.edu

Stephen Macke
Stanford University

smacke@cs.stanford.edu

Yifei Huang

Stanford University

yifeih@cs.stanford.edu

ABSTRACT
In this paper, we introduce the Temporal Aﬃliation Model
(TEAM), a novel, scalable method for overlapping commu-
nity detection on dynamic, temporally-evolving networks.
The model jointly learns term-community aﬃliation strengths
along with community activity levels at each time step. Our
method can further cluster the discovered communities into
a community hierarchy. We apply TEAM to a dynamic topic
modeling task on a corpus of New York Times politics arti-
cles from 1987 to 2007. Our method successfully discovers a
topical hierarchy and identiﬁes temporal activity levels for
topics that correlate well with signiﬁcant historical events.

INTRODUCTION

1.
The structure of many real-world networks changes dynam-
ically over time. Connections between nodes in the network
may appear, disappear, or change in strength. Examples
of such networks with temporal dynamics include the net-
work traﬃc graph over collections of routers [11], networks
of emails between individuals [8, 16], and protein-protein
interaction networks [6].

These dynamic network structures have previously been ex-
plored in a variety of settings. Guo et al.
[5] and Kolar
et al. [9] use observations of node attributes over time (for
example, observations of gene expression levels) to learn la-
tent, temporally-evolving network structures over the nodes.
Here, the underlying network topology is unobserved. Han-
neke et al.
[7] study the problem of predicting the future
topology of a network given the previous history of network
structures. Using a discrete time series of observations of
the network structure, they model the temporal evolution
of network topology under a Markov assumption.

In spite of the prevalence of temporally-evolving networks
in real-world data and past work on dynamic network struc-
tures, the majority of work in community detection in net-
works has focused on discovering communities in static net-
works. Comparatively little work has been done on commu-
nity detection in dynamic networks that evolve over time.

In this paper, we introduce TEAM (Temporal Aﬃliation
Model), a novel, scalable community detection method over
temporal graph sequences that jointly learns both the la-
tent community structure and the time-dependent activity
of each community. TEAM is an extension of BigClam
(Cluster Aﬃliation Model for Big Networks) [21], an over-
lapping community detection method for static networks.

Figure 1: Overlapping communities in a dynamic
network.

Our method is able to detect both overlapping and non-
overlapping communities in the network. Our method can
further cluster the set of discovered communities into a com-
munity hierarchy using hierarchical agglomerative cluster-
ing.

We evaluate the quality of the communities discovered by
the network by evaluating against networks with known ground-
truth communities. We ﬁnd that TEAM achieves compara-
ble performance with BigClam (as measured by average F1
score) on co-authorship networks extracted from the DBLP
dataset [13].

As an application of TEAM, we model the temporal evolu-
tion of topics in a corpus of New York Times articles span-
ning the years 1987 to 2007. Unlike many commonly-used
topic models, our method does not require any variational
inference or Gibbs sampling during learning, which allows
us to scale to much larger corpora. Our method successfully
identiﬁes a topical hierarchy as well as the temporal activity
of each topic. Several of the topics discovered by TEAM on
this corpus correlate well with signiﬁcant historical events.

2. RELATED WORK
The TEAM model is closely related to BigClam [21], a
bipartite aﬃliation network model [12, 22] for overlapping
community detection. In bipartite aﬃliation network mod-
els, the nodes of the network and the set of community nodes
comprise the two disjoint sets of vertices of a bipartite graph.
The edges between network nodes and community nodes
represent the aﬃliation of the node with the community. If
the graph is weighted, the weight of the edge corresponds
to the strength of the node’s community aﬃliation. The
observed edges between the nodes of the network are con-
sidered to be generated from the latent community aﬃlia-

t = t0t = t1tions of the nodes. Our temporal aﬃliation model, described
in Sec. 3, is a natural extension of the aﬃliation model in-
troduced in [21] to temporal graph sequences. Unlike Big-
Clam, which is speciﬁc to unweighted graphs, TEAM takes
as input graphs with positive integer edge weights.

In analogy with the non-negative matrix factorization (NMF)
[14] interpretation of the BigClam method, TEAM admits
a non-negative tensor factorization (NTF) [10] interpreta-
tion. The sequence of adjacency matrices over time can be
regarded as a 3rd-order tensor with two “spatial” dimensions
over the space of nodes and one temporal dimension. There
has been previous work where the NTF of the adjacency ten-
sor is used for analyzing community activity over time [1, 4].
However, the direct NTF of the adjacency tensor is not eas-
ily interpretable. In the following we describe a variant of
NTF that admits a simple probabilistic interpretation.
3. TEMPORAL AFFILIATION MODEL
We now describe the TEAM generative model for tempo-
ral graph sequences. Let the number of communities K
be given. Given a set of vertices V , at each time step
t = 1, 2, . . . , T , generate a weighted, undirected graph us-
ing the following process. For each pair of vertices (u, v)
and each community k = 1, 2, . . . , K, generate an integer
w(k)
(u, v) from a Poisson distribution with mean AtkFukFvk:

t

w(k)

t

(u, v) ∼ Pois (AtkFukFvk) ,

(1)

where Fuk, Fvk ∈ [0, 1] are the community aﬃliation strengths
between community k and nodes u and v respectively. The
parameter Atk ∈ [0,∞) is the activity of community k at
time t. The community aﬃliation matrix F is the |V | × K
matrix of community aﬃliation strengths, and the tempo-
ral activity matrix A is the T × K matrix of community
activities.

The observed edge weight wt(u, v) is the sum over the weights
corresponding to each community:

K(cid:88)

k=1

wt(u, v) =

(u, v) ∼ Pois

w(k)

t

(cid:32) K(cid:88)

k=1

(cid:33)

AtkFukFvk

,

(2)

since a sum over Poisson random variables is itself a Poisson
random variable.
If wt(u, v) = 0, then there is no edge
between u and v in the graph at time t. All edge weights
are therefore positive integers.

Unlike [19], we do not impose the constraint that(cid:80)

This Poisson process for generating edges is similar to the
process used by Wang et al. [19] in a topic modeling setting.
u Fuk =
1 ∀k, i.e. that the community aﬃliation parameters for each
community deﬁne a multinomial distribution over the set of
nodes. This simpliﬁes our optimization problem and, as we
show in Sec. 6, still yields good results in topic modeling
experiments.

(cid:16)(cid:80)K

weighted undirected graphs. In BigClam, the (unweighted)
edge between nodes u, v is generated if the corresponding
Poisson random variable Xuv takes a positive value: Xuv >
0, Xuv ∼ Pois
. Note that in BigClam, the
community aﬃliation strengths Fuk take values in [0,∞),
whereas in our model the values Fuk are restricted to the
interval [0, 1].

k=1 FukFvk

(cid:17)

With this restriction, the community aﬃliation parameters
are more interpretable by virtue of the following probabilis-
tic interpretation. Each community aﬃliation parameter
Fuk can be interpreted as the probability that node u is
generated by community k in a Bernoulli trial, and each
community activity parameter Atk can be interpreted as
the product of the number of Bernoulli trials for commu-
nity k at time t (denoted Ntk) and the prior probability of
the community at time t (denoted atk): Atk = Ntkatk. To
see this, consider the Poisson distribution in Eq. 1 as an ap-
proximation to a binomial distribution Bin(Ntk, atkFukFvk):
the edge weight w(k)
(u, v) corresponding to community k is
simply the number of successes after Ntk independent trials.
For example, consider a sequence of co-occurence graphs of
terms over a corpus of documents, where edge weights are
given by the number of documents in which a pair of terms
co-occur. Each community corresponds to a topic in the cor-
pus, the F parameters give the probability that a given topic
generates any term, and Ntk is the number of documents at
time t that express topic k.

t

As previously mentioned, the TEAM model can be viewed
as a variant of non-negative tensor factorization (NTF) on
the |V | × |V | × T adjacency tensor of the observed graph
sequence. However, instead of decomposing the adjacancy
tensor directly, as in a direct application of NTF, we instead
decompose the 3rd-order tensor of Poisson mean parameters
corresponding to the Poisson random variable for each pair
of nodes at each time step.

4. LEARNING

4.1 Objective
The parameters F and A are learned from an input sequence
of T undirected graphs G = {G(V1, E1), . . . , G(VT , ET )} rep-
resenting snapshots of a network at discrete time steps. Let
t=1 Vt denote the set of vertices over the entire graph

V =(cid:83)T

sequence.

We maximize the regularized log-likelihood of the observed
graph sequence G. From Eq. 2, the distribution of the edge
weight wt(u, v) at time t between nodes u and v is:

Pr[wt(u, v) = y] =

λt(u, v)y

y!

exp (−λt(u, v)) ,

(3)

where:

K(cid:88)

λt(u, v) =

AtkFukFvk.

(4)

Our model is a natural extension of the BigClam commu-
nity aﬃliation model for static networks [21] to sequences of

Therefore, the log-likelihood of the data G given the param-

k=1

Overlapping Community Detection Over Temporal Graph

Sequences

Kai Sheng Tai
Stanford University

kst@cs.stanford.edu

Stephen Macke
Stanford University

smacke@cs.stanford.edu

Yifei Huang

Stanford University

yifeih@cs.stanford.edu

ABSTRACT
In this paper, we introduce the Temporal Aﬃliation Model
(TEAM), a novel, scalable method for overlapping commu-
nity detection on dynamic, temporally-evolving networks.
The model jointly learns term-community aﬃliation strengths
along with community activity levels at each time step. Our
method can further cluster the discovered communities into
a community hierarchy. We apply TEAM to a dynamic topic
modeling task on a corpus of New York Times politics arti-
cles from 1987 to 2007. Our method successfully discovers a
topical hierarchy and identiﬁes temporal activity levels for
topics that correlate well with signiﬁcant historical events.

INTRODUCTION

1.
The structure of many real-world networks changes dynam-
ically over time. Connections between nodes in the network
may appear, disappear, or change in strength. Examples
of such networks with temporal dynamics include the net-
work traﬃc graph over collections of routers [11], networks
of emails between individuals [8, 16], and protein-protein
interaction networks [6].

These dynamic network structures have previously been ex-
plored in a variety of settings. Guo et al.
[5] and Kolar
et al. [9] use observations of node attributes over time (for
example, observations of gene expression levels) to learn la-
tent, temporally-evolving network structures over the nodes.
Here, the underlying network topology is unobserved. Han-
neke et al.
[7] study the problem of predicting the future
topology of a network given the previous history of network
structures. Using a discrete time series of observations of
the network structure, they model the temporal evolution
of network topology under a Markov assumption.

In spite of the prevalence of temporally-evolving networks
in real-world data and past work on dynamic network struc-
tures, the majority of work in community detection in net-
works has focused on discovering communities in static net-
works. Comparatively little work has been done on commu-
nity detection in dynamic networks that evolve over time.

In this paper, we introduce TEAM (Temporal Aﬃliation
Model), a novel, scalable community detection method over
temporal graph sequences that jointly learns both the la-
tent community structure and the time-dependent activity
of each community. TEAM is an extension of BigClam
(Cluster Aﬃliation Model for Big Networks) [21], an over-
lapping community detection method for static networks.

Figure 1: Overlapping communities in a dynamic
network.

Our method is able to detect both overlapping and non-
overlapping communities in the network. Our method can
further cluster the set of discovered communities into a com-
munity hierarchy using hierarchical agglomerative cluster-
ing.

We evaluate the quality of the communities discovered by
the network by evaluating against networks with known ground-
truth communities. We ﬁnd that TEAM achieves compara-
ble performance with BigClam (as measured by average F1
score) on co-authorship networks extracted from the DBLP
dataset [13].

As an application of TEAM, we model the temporal evolu-
tion of topics in a corpus of New York Times articles span-
ning the years 1987 to 2007. Unlike many commonly-used
topic models, our method does not require any variational
inference or Gibbs sampling during learning, which allows
us to scale to much larger corpora. Our method successfully
identiﬁes a topical hierarchy as well as the temporal activity
of each topic. Several of the topics discovered by TEAM on
this corpus correlate well with signiﬁcant historical events.

2. RELATED WORK
The TEAM model is closely related to BigClam [21], a
bipartite aﬃliation network model [12, 22] for overlapping
community detection. In bipartite aﬃliation network mod-
els, the nodes of the network and the set of community nodes
comprise the two disjoint sets of vertices of a bipartite graph.
The edges between network nodes and community nodes
represent the aﬃliation of the node with the community. If
the graph is weighted, the weight of the edge corresponds
to the strength of the node’s community aﬃliation. The
observed edges between the nodes of the network are con-
sidered to be generated from the latent community aﬃlia-

t = t0t = t1tions of the nodes. Our temporal aﬃliation model, described
in Sec. 3, is a natural extension of the aﬃliation model in-
troduced in [21] to temporal graph sequences. Unlike Big-
Clam, which is speciﬁc to unweighted graphs, TEAM takes
as input graphs with positive integer edge weights.

In analogy with the non-negative matrix factorization (NMF)
[14] interpretation of the BigClam method, TEAM admits
a non-negative tensor factorization (NTF) [10] interpreta-
tion. The sequence of adjacency matrices over time can be
regarded as a 3rd-order tensor with two “spatial” dimensions
over the space of nodes and one temporal dimension. There
has been previous work where the NTF of the adjacency ten-
sor is used for analyzing community activity over time [1, 4].
However, the direct NTF of the adjacency tensor is not eas-
ily interpretable. In the following we describe a variant of
NTF that admits a simple probabilistic interpretation.
3. TEMPORAL AFFILIATION MODEL
We now describe the TEAM generative model for tempo-
ral graph sequences. Let the number of communities K
be given. Given a set of vertices V , at each time step
t = 1, 2, . . . , T , generate a weighted, undirected graph us-
ing the following process. For each pair of vertices (u, v)
and each community k = 1, 2, . . . , K, generate an integer
w(k)
(u, v) from a Poisson distribution with mean AtkFukFvk:

t

w(k)

t

(u, v) ∼ Pois (AtkFukFvk) ,

(1)

where Fuk, Fvk ∈ [0, 1] are the community aﬃliation strengths
between community k and nodes u and v respectively. The
parameter Atk ∈ [0,∞) is the activity of community k at
time t. The community aﬃliation matrix F is the |V | × K
matrix of community aﬃliation strengths, and the tempo-
ral activity matrix A is the T × K matrix of community
activities.

The observed edge weight wt(u, v) is the sum over the weights
corresponding to each community:

K(cid:88)

k=1

wt(u, v) =

(u, v) ∼ Pois

w(k)

t

(cid:32) K(cid:88)

k=1

(cid:33)

AtkFukFvk

,

(2)

since a sum over Poisson random variables is itself a Poisson
random variable.
If wt(u, v) = 0, then there is no edge
between u and v in the graph at time t. All edge weights
are therefore positive integers.

Unlike [19], we do not impose the constraint that(cid:80)

This Poisson process for generating edges is similar to the
process used by Wang et al. [19] in a topic modeling setting.
u Fuk =
1 ∀k, i.e. that the community aﬃliation parameters for each
community deﬁne a multinomial distribution over the set of
nodes. This simpliﬁes our optimization problem and, as we
show in Sec. 6, still yields good results in topic modeling
experiments.

(cid:16)(cid:80)K

weighted undirected graphs. In BigClam, the (unweighted)
edge between nodes u, v is generated if the corresponding
Poisson random variable Xuv takes a positive value: Xuv >
0, Xuv ∼ Pois
. Note that in BigClam, the
community aﬃliation strengths Fuk take values in [0,∞),
whereas in our model the values Fuk are restricted to the
interval [0, 1].

k=1 FukFvk

(cid:17)

With this restriction, the community aﬃliation parameters
are more interpretable by virtue of the following probabilis-
tic interpretation. Each community aﬃliation parameter
Fuk can be interpreted as the probability that node u is
generated by community k in a Bernoulli trial, and each
community activity parameter Atk can be interpreted as
the product of the number of Bernoulli trials for commu-
nity k at time t (denoted Ntk) and the prior probability of
the community at time t (denoted atk): Atk = Ntkatk. To
see this, consider the Poisson distribution in Eq. 1 as an ap-
proximation to a binomial distribution Bin(Ntk, atkFukFvk):
the edge weight w(k)
(u, v) corresponding to community k is
simply the number of successes after Ntk independent trials.
For example, consider a sequence of co-occurence graphs of
terms over a corpus of documents, where edge weights are
given by the number of documents in which a pair of terms
co-occur. Each community corresponds to a topic in the cor-
pus, the F parameters give the probability that a given topic
generates any term, and Ntk is the number of documents at
time t that express topic k.

t

As previously mentioned, the TEAM model can be viewed
as a variant of non-negative tensor factorization (NTF) on
the |V | × |V | × T adjacency tensor of the observed graph
sequence. However, instead of decomposing the adjacancy
tensor directly, as in a direct application of NTF, we instead
decompose the 3rd-order tensor of Poisson mean parameters
corresponding to the Poisson random variable for each pair
of nodes at each time step.

4. LEARNING

4.1 Objective
The parameters F and A are learned from an input sequence
of T undirected graphs G = {G(V1, E1), . . . , G(VT , ET )} rep-
resenting snapshots of a network at discrete time steps. Let
t=1 Vt denote the set of vertices over the entire graph

V =(cid:83)T

sequence.

We maximize the regularized log-likelihood of the observed
graph sequence G. From Eq. 2, the distribution of the edge
weight wt(u, v) at time t between nodes u and v is:

Pr[wt(u, v) = y] =

λt(u, v)y

y!

exp (−λt(u, v)) ,

(3)

where:

K(cid:88)

λt(u, v) =

AtkFukFvk.

(4)

Our model is a natural extension of the BigClam commu-
nity aﬃliation model for static networks [21] to sequences of

Therefore, the log-likelihood of the data G given the param-

k=1

(cid:32)
T(cid:88)
(cid:88)

t=1

λt(u, v)

eters F, A is:

(cid:96)(G; F, A) =

− (cid:88)
wt(u, v) log λt(u, v) − log(cid:0)wt(u, v)!(cid:1)(cid:17)(cid:33)
(cid:16)
log(cid:0)wt(u, v)!(cid:1) term since it has no dependence on F or A.

(5)
When computing the log-likelihood in practice, we omit the

(u,v)∈Et

pairs(u,v)

+

.

O(K|V |) (in particular, without iterating over all pairs of
vertices) by using the observation that:

(cid:32)(cid:18)(cid:88)

(cid:19)2 −(cid:88)

Fv

v

v

(cid:33)

F 2
v

,

(9)

where the square is taken pointwise over the elements of
each vector. Similarly, the log-likelihood can be computed
. The total time complexity of each
in time O

(cid:18)

|V | +(cid:80)T

(cid:19)(cid:19)
t=1 |Et|

iteration is therefore O

K

. This is ef-

(cid:88)

Fu ◦ Fv =

1
2

pairs(u,v)

(cid:16)

t=1 |Et|(cid:17)
K(cid:80)T
(cid:18)

In order to encourage sparsity in the F parameters, we add
an L1 regularization penalty to the objective. To encourage
smoothness of community activities over time, we add an L2
regularization penalty on the diﬀerence between temporally
adjacent A parameters. The full cost function C(F, A;G) is
then given by:

C(F, A;G) = − (cid:96)(G; F, A)

(cid:88)

u∈V

+λ1

(cid:107)Fu(cid:107)1 +

1
2

λ2

T−1(cid:88)

t=1

(cid:107)At+1 − At(cid:107)2
2,

(6)

where (cid:96)(G; F, A) is the log-likelihood deﬁned in Eq. 5, and
λ1 and λ2 are hyperparameters. In our experiments, we use
λ1 = 102 and λ2 = 104.

4.2 Optimization
To optimize this objective, we use projected gradient de-
scent with adaptive per-parameter learning rates computed
using AdaGrad [3]. To avoid numerical issues with vanish-
ing λt(u, v) values, we set a small, nonzero minimum value 
for the parameters F and A. In our experiments, we set the
AdaGrad parameter η to 0.1 and  to 10−10. After each gra-
dient update, the F parameters are projected back onto the
feasible set [, 1] and the A parameters are projected onto
[,∞).
Let X ◦ Y denote the pointwise (Hadamard) product and
Nt(u) the set of neighbors of u at time t. The gradient for
Fu is:

T(cid:88)

t=1

(cid:32)(cid:88)

v(cid:54)=u

Fv − (cid:88)

v∈Nt(u)

∇Fu C =

At ◦

wt(u, v)
λt(u, v)

Fv

+ λ1.

(7)

(cid:33)

The gradient for At is:
∇At C =

Fu ◦ Fv − (cid:88)

(cid:88)
(cid:16)

pairs(u,v)

+ λ2

wt(u, v)
λt(u, v)

Fu ◦ Fv

(u,v)∈Et

1{t > 1}(At − At−1) + 1{t < T}(At − At+1)
(8)

where 1{x} is the indicator function.

(cid:16)

t=1 |Nt(u)|(cid:17)
K(cid:80)T

computing the value of(cid:80)
by precomputing the value of(cid:80)

In each iteration, we alternate between F and A, ﬁrst updat-
ing all rows of F , then updating all rows of A. The gradient
by pre-
for Fu can be computed in time O
v Fv at the start of each iteration,
while the gradient for At can be computed in time O (K|Et|)
pairs(u,v) Fu ◦ Fv at the start
of each iteration. This quantity can be computed in time

ﬁcient if the input graphs are sparse, as is the case for most
real-world networks.

To initialize F , we set each entry to a random value uni-
formly distributed over [0.25, 0.75]. To initialize A, we set
each entry to a random value uniformly distributed over
[0.75, 1.25].

In our implementation, we terminate the optimization when
the relative change in the objective falls below 10−3. The
log-likelihood is computed after every 10 iterations to check
for convergence.

5. COMMUNITY HIERARCHIES
Many networks derived from real-world data exhibit a hier-
archical community structure. For example, a social network
of undergraduate students can be composed of communi-
ties corresponding to each class year, which in turn can be
further decomposed into sub-communities corresponding to
academic concentrations.

Our community detection method allows for a simple post-
processing step that builds a hierarchy over the communities
discovered in the learning step. Each of the K columns of
the community aﬃliation matrix F is a vector in [0, 1]|V |.
To construct a community hierarchy, we use complete-link
hierarchical agglomerative clustering over the columns of F .
The metric over the vector space of communities is the co-
sine distance. We refer to clusters of communities as super-
communities. The temporal activity of a supercommunity
is deﬁned as the mean of the columns of A corresponding
to the communities that comprise the supercommunity. To
our knowledge, this application of hierarchical agglomera-
tive clustering is a novel method for constructing post-hoc
community hierarchies.

This method is not limited to clustering the node aﬃliation
strengths for each community. Instead, each community can
be represented by a linear combination Zk of an F column
and an A column:

Zk = αF∗k + (1 − α)A∗k,

(10)
where α ∈ [0, 1] is a parameter that trades oﬀ between the
“spatial” F component and the “temporal” A component.
We can therefore construct spatio-temporal hierarchies that
can be used, for example, to study which communities tend
to co-occur in time. In our experiments, we only consider
fully spatial clustering (α = 1), but spatio-temporal commu-
nity hierarchies are nonetheless an interesting line of future
work.

(cid:17)

Overlapping Community Detection Over Temporal Graph

Sequences

Kai Sheng Tai
Stanford University

kst@cs.stanford.edu

Stephen Macke
Stanford University

smacke@cs.stanford.edu

Yifei Huang

Stanford University

yifeih@cs.stanford.edu

ABSTRACT
In this paper, we introduce the Temporal Aﬃliation Model
(TEAM), a novel, scalable method for overlapping commu-
nity detection on dynamic, temporally-evolving networks.
The model jointly learns term-community aﬃliation strengths
along with community activity levels at each time step. Our
method can further cluster the discovered communities into
a community hierarchy. We apply TEAM to a dynamic topic
modeling task on a corpus of New York Times politics arti-
cles from 1987 to 2007. Our method successfully discovers a
topical hierarchy and identiﬁes temporal activity levels for
topics that correlate well with signiﬁcant historical events.

INTRODUCTION

1.
The structure of many real-world networks changes dynam-
ically over time. Connections between nodes in the network
may appear, disappear, or change in strength. Examples
of such networks with temporal dynamics include the net-
work traﬃc graph over collections of routers [11], networks
of emails between individuals [8, 16], and protein-protein
interaction networks [6].

These dynamic network structures have previously been ex-
plored in a variety of settings. Guo et al.
[5] and Kolar
et al. [9] use observations of node attributes over time (for
example, observations of gene expression levels) to learn la-
tent, temporally-evolving network structures over the nodes.
Here, the underlying network topology is unobserved. Han-
neke et al.
[7] study the problem of predicting the future
topology of a network given the previous history of network
structures. Using a discrete time series of observations of
the network structure, they model the temporal evolution
of network topology under a Markov assumption.

In spite of the prevalence of temporally-evolving networks
in real-world data and past work on dynamic network struc-
tures, the majority of work in community detection in net-
works has focused on discovering communities in static net-
works. Comparatively little work has been done on commu-
nity detection in dynamic networks that evolve over time.

In this paper, we introduce TEAM (Temporal Aﬃliation
Model), a novel, scalable community detection method over
temporal graph sequences that jointly learns both the la-
tent community structure and the time-dependent activity
of each community. TEAM is an extension of BigClam
(Cluster Aﬃliation Model for Big Networks) [21], an over-
lapping community detection method for static networks.

Figure 1: Overlapping communities in a dynamic
network.

Our method is able to detect both overlapping and non-
overlapping communities in the network. Our method can
further cluster the set of discovered communities into a com-
munity hierarchy using hierarchical agglomerative cluster-
ing.

We evaluate the quality of the communities discovered by
the network by evaluating against networks with known ground-
truth communities. We ﬁnd that TEAM achieves compara-
ble performance with BigClam (as measured by average F1
score) on co-authorship networks extracted from the DBLP
dataset [13].

As an application of TEAM, we model the temporal evolu-
tion of topics in a corpus of New York Times articles span-
ning the years 1987 to 2007. Unlike many commonly-used
topic models, our method does not require any variational
inference or Gibbs sampling during learning, which allows
us to scale to much larger corpora. Our method successfully
identiﬁes a topical hierarchy as well as the temporal activity
of each topic. Several of the topics discovered by TEAM on
this corpus correlate well with signiﬁcant historical events.

2. RELATED WORK
The TEAM model is closely related to BigClam [21], a
bipartite aﬃliation network model [12, 22] for overlapping
community detection. In bipartite aﬃliation network mod-
els, the nodes of the network and the set of community nodes
comprise the two disjoint sets of vertices of a bipartite graph.
The edges between network nodes and community nodes
represent the aﬃliation of the node with the community. If
the graph is weighted, the weight of the edge corresponds
to the strength of the node’s community aﬃliation. The
observed edges between the nodes of the network are con-
sidered to be generated from the latent community aﬃlia-

t = t0t = t1tions of the nodes. Our temporal aﬃliation model, described
in Sec. 3, is a natural extension of the aﬃliation model in-
troduced in [21] to temporal graph sequences. Unlike Big-
Clam, which is speciﬁc to unweighted graphs, TEAM takes
as input graphs with positive integer edge weights.

In analogy with the non-negative matrix factorization (NMF)
[14] interpretation of the BigClam method, TEAM admits
a non-negative tensor factorization (NTF) [10] interpreta-
tion. The sequence of adjacency matrices over time can be
regarded as a 3rd-order tensor with two “spatial” dimensions
over the space of nodes and one temporal dimension. There
has been previous work where the NTF of the adjacency ten-
sor is used for analyzing community activity over time [1, 4].
However, the direct NTF of the adjacency tensor is not eas-
ily interpretable. In the following we describe a variant of
NTF that admits a simple probabilistic interpretation.
3. TEMPORAL AFFILIATION MODEL
We now describe the TEAM generative model for tempo-
ral graph sequences. Let the number of communities K
be given. Given a set of vertices V , at each time step
t = 1, 2, . . . , T , generate a weighted, undirected graph us-
ing the following process. For each pair of vertices (u, v)
and each community k = 1, 2, . . . , K, generate an integer
w(k)
(u, v) from a Poisson distribution with mean AtkFukFvk:

t

w(k)

t

(u, v) ∼ Pois (AtkFukFvk) ,

(1)

where Fuk, Fvk ∈ [0, 1] are the community aﬃliation strengths
between community k and nodes u and v respectively. The
parameter Atk ∈ [0,∞) is the activity of community k at
time t. The community aﬃliation matrix F is the |V | × K
matrix of community aﬃliation strengths, and the tempo-
ral activity matrix A is the T × K matrix of community
activities.

The observed edge weight wt(u, v) is the sum over the weights
corresponding to each community:

K(cid:88)

k=1

wt(u, v) =

(u, v) ∼ Pois

w(k)

t

(cid:32) K(cid:88)

k=1

(cid:33)

AtkFukFvk

,

(2)

since a sum over Poisson random variables is itself a Poisson
random variable.
If wt(u, v) = 0, then there is no edge
between u and v in the graph at time t. All edge weights
are therefore positive integers.

Unlike [19], we do not impose the constraint that(cid:80)

This Poisson process for generating edges is similar to the
process used by Wang et al. [19] in a topic modeling setting.
u Fuk =
1 ∀k, i.e. that the community aﬃliation parameters for each
community deﬁne a multinomial distribution over the set of
nodes. This simpliﬁes our optimization problem and, as we
show in Sec. 6, still yields good results in topic modeling
experiments.

(cid:16)(cid:80)K

weighted undirected graphs. In BigClam, the (unweighted)
edge between nodes u, v is generated if the corresponding
Poisson random variable Xuv takes a positive value: Xuv >
0, Xuv ∼ Pois
. Note that in BigClam, the
community aﬃliation strengths Fuk take values in [0,∞),
whereas in our model the values Fuk are restricted to the
interval [0, 1].

k=1 FukFvk

(cid:17)

With this restriction, the community aﬃliation parameters
are more interpretable by virtue of the following probabilis-
tic interpretation. Each community aﬃliation parameter
Fuk can be interpreted as the probability that node u is
generated by community k in a Bernoulli trial, and each
community activity parameter Atk can be interpreted as
the product of the number of Bernoulli trials for commu-
nity k at time t (denoted Ntk) and the prior probability of
the community at time t (denoted atk): Atk = Ntkatk. To
see this, consider the Poisson distribution in Eq. 1 as an ap-
proximation to a binomial distribution Bin(Ntk, atkFukFvk):
the edge weight w(k)
(u, v) corresponding to community k is
simply the number of successes after Ntk independent trials.
For example, consider a sequence of co-occurence graphs of
terms over a corpus of documents, where edge weights are
given by the number of documents in which a pair of terms
co-occur. Each community corresponds to a topic in the cor-
pus, the F parameters give the probability that a given topic
generates any term, and Ntk is the number of documents at
time t that express topic k.

t

As previously mentioned, the TEAM model can be viewed
as a variant of non-negative tensor factorization (NTF) on
the |V | × |V | × T adjacency tensor of the observed graph
sequence. However, instead of decomposing the adjacancy
tensor directly, as in a direct application of NTF, we instead
decompose the 3rd-order tensor of Poisson mean parameters
corresponding to the Poisson random variable for each pair
of nodes at each time step.

4. LEARNING

4.1 Objective
The parameters F and A are learned from an input sequence
of T undirected graphs G = {G(V1, E1), . . . , G(VT , ET )} rep-
resenting snapshots of a network at discrete time steps. Let
t=1 Vt denote the set of vertices over the entire graph

V =(cid:83)T

sequence.

We maximize the regularized log-likelihood of the observed
graph sequence G. From Eq. 2, the distribution of the edge
weight wt(u, v) at time t between nodes u and v is:

Pr[wt(u, v) = y] =

λt(u, v)y

y!

exp (−λt(u, v)) ,

(3)

where:

K(cid:88)

λt(u, v) =

AtkFukFvk.

(4)

Our model is a natural extension of the BigClam commu-
nity aﬃliation model for static networks [21] to sequences of

Therefore, the log-likelihood of the data G given the param-

k=1

(cid:32)
T(cid:88)
(cid:88)

t=1

λt(u, v)

eters F, A is:

(cid:96)(G; F, A) =

− (cid:88)
wt(u, v) log λt(u, v) − log(cid:0)wt(u, v)!(cid:1)(cid:17)(cid:33)
(cid:16)
log(cid:0)wt(u, v)!(cid:1) term since it has no dependence on F or A.

(5)
When computing the log-likelihood in practice, we omit the

(u,v)∈Et

pairs(u,v)

+

.

O(K|V |) (in particular, without iterating over all pairs of
vertices) by using the observation that:

(cid:32)(cid:18)(cid:88)

(cid:19)2 −(cid:88)

Fv

v

v

(cid:33)

F 2
v

,

(9)

where the square is taken pointwise over the elements of
each vector. Similarly, the log-likelihood can be computed
. The total time complexity of each
in time O

(cid:18)

|V | +(cid:80)T

(cid:19)(cid:19)
t=1 |Et|

iteration is therefore O

K

. This is ef-

(cid:88)

Fu ◦ Fv =

1
2

pairs(u,v)

(cid:16)

t=1 |Et|(cid:17)
K(cid:80)T
(cid:18)

In order to encourage sparsity in the F parameters, we add
an L1 regularization penalty to the objective. To encourage
smoothness of community activities over time, we add an L2
regularization penalty on the diﬀerence between temporally
adjacent A parameters. The full cost function C(F, A;G) is
then given by:

C(F, A;G) = − (cid:96)(G; F, A)

(cid:88)

u∈V

+λ1

(cid:107)Fu(cid:107)1 +

1
2

λ2

T−1(cid:88)

t=1

(cid:107)At+1 − At(cid:107)2
2,

(6)

where (cid:96)(G; F, A) is the log-likelihood deﬁned in Eq. 5, and
λ1 and λ2 are hyperparameters. In our experiments, we use
λ1 = 102 and λ2 = 104.

4.2 Optimization
To optimize this objective, we use projected gradient de-
scent with adaptive per-parameter learning rates computed
using AdaGrad [3]. To avoid numerical issues with vanish-
ing λt(u, v) values, we set a small, nonzero minimum value 
for the parameters F and A. In our experiments, we set the
AdaGrad parameter η to 0.1 and  to 10−10. After each gra-
dient update, the F parameters are projected back onto the
feasible set [, 1] and the A parameters are projected onto
[,∞).
Let X ◦ Y denote the pointwise (Hadamard) product and
Nt(u) the set of neighbors of u at time t. The gradient for
Fu is:

T(cid:88)

t=1

(cid:32)(cid:88)

v(cid:54)=u

Fv − (cid:88)

v∈Nt(u)

∇Fu C =

At ◦

wt(u, v)
λt(u, v)

Fv

+ λ1.

(7)

(cid:33)

The gradient for At is:
∇At C =

Fu ◦ Fv − (cid:88)

(cid:88)
(cid:16)

pairs(u,v)

+ λ2

wt(u, v)
λt(u, v)

Fu ◦ Fv

(u,v)∈Et

1{t > 1}(At − At−1) + 1{t < T}(At − At+1)
(8)

where 1{x} is the indicator function.

(cid:16)

t=1 |Nt(u)|(cid:17)
K(cid:80)T

computing the value of(cid:80)
by precomputing the value of(cid:80)

In each iteration, we alternate between F and A, ﬁrst updat-
ing all rows of F , then updating all rows of A. The gradient
by pre-
for Fu can be computed in time O
v Fv at the start of each iteration,
while the gradient for At can be computed in time O (K|Et|)
pairs(u,v) Fu ◦ Fv at the start
of each iteration. This quantity can be computed in time

ﬁcient if the input graphs are sparse, as is the case for most
real-world networks.

To initialize F , we set each entry to a random value uni-
formly distributed over [0.25, 0.75]. To initialize A, we set
each entry to a random value uniformly distributed over
[0.75, 1.25].

In our implementation, we terminate the optimization when
the relative change in the objective falls below 10−3. The
log-likelihood is computed after every 10 iterations to check
for convergence.

5. COMMUNITY HIERARCHIES
Many networks derived from real-world data exhibit a hier-
archical community structure. For example, a social network
of undergraduate students can be composed of communi-
ties corresponding to each class year, which in turn can be
further decomposed into sub-communities corresponding to
academic concentrations.

Our community detection method allows for a simple post-
processing step that builds a hierarchy over the communities
discovered in the learning step. Each of the K columns of
the community aﬃliation matrix F is a vector in [0, 1]|V |.
To construct a community hierarchy, we use complete-link
hierarchical agglomerative clustering over the columns of F .
The metric over the vector space of communities is the co-
sine distance. We refer to clusters of communities as super-
communities. The temporal activity of a supercommunity
is deﬁned as the mean of the columns of A corresponding
to the communities that comprise the supercommunity. To
our knowledge, this application of hierarchical agglomera-
tive clustering is a novel method for constructing post-hoc
community hierarchies.

This method is not limited to clustering the node aﬃliation
strengths for each community. Instead, each community can
be represented by a linear combination Zk of an F column
and an A column:

Zk = αF∗k + (1 − α)A∗k,

(10)
where α ∈ [0, 1] is a parameter that trades oﬀ between the
“spatial” F component and the “temporal” A component.
We can therefore construct spatio-temporal hierarchies that
can be used, for example, to study which communities tend
to co-occur in time. In our experiments, we only consider
fully spatial clustering (α = 1), but spatio-temporal commu-
nity hierarchies are nonetheless an interesting line of future
work.

(cid:17)

Term Aﬃliation Score

students
school
education
religious
schools
court
religion
bush
science
evolution

0.944695
0.942791
0.939966
0.937476
0.927772
0.915907
0.900700
0.679902
0.615520
0.571594

Figure 2: Percentage diﬀerence in average F1 of
communities discovered by TEAM relative to Big-
Clam on subsampled DBLP co-authorship graphs.

Table 1: Terms and aﬃliation scores for an example
community.

6. EXPERIMENTS
6.1 Evaluation using Ground-Truth
We evaluate the communities detected by TEAM by com-
paring them against ground-truth communities. Speciﬁcally,
we use the co-authorship network derived from the DBLP
dataset [13], where ground-truth communities correspond to
conferences and journals.

In our evaluation, we use DBLP journal and conference data
from 1974 to 2004. The full co-authorship network is sub-
sampled using a similar subsampling technique as described
in [21]. We select a random author u who belongs to at
least 2 communities, and create a subgraph by sampling only
other authors v that share at least one ground truth commu-
nity with u. Furthermore, to ensure a connected graph, only
those v that belong to the connected component with u are
subsampled. Note that TEAM only takes a single graph as
input (as opposed to a graph sequence) in our comparisons
with BigClam.

We evaluate the discovered communities using the average
F1 score. Given the ground truth communities Ci ∈ C∗
and the set of detected communities ˆCi ∈ ˆC, the average F1
score is:

(cid:32)

(cid:88)
(cid:16)

Ci∈C∗

1
|C∗|

(cid:88)

ˆCi∈ ˆC

F 1

Ci, ˆCg(i)

(cid:16)

(cid:17)

(cid:17)(cid:33)

,

F 1

Cg(cid:48)(i), ˆCi

F1avg(C

∗

, ˆC) =

1
2

+

1
| ˆC|

where:

(11)

(12)

(13)

(14)

g(i) = arg max
(cid:48)

(i) = arg max

j

g

j

F1(Ci, ˆCj),

F1(Cj, ˆCi).

We ﬁrst compare our results with those of BigClam [21].
Since it is inherently easier to discover communities in cer-
tain subsampled graphs, we calculate the percent diﬀer-
ence in average F1 scores between our model and BigClam:
(F1TEAM
. We evaluated on diﬀerent
numbers of ground-truth communities, sampling 20 graphs
for each community count.

avg − F1BigClam

)/F1BigClam

avg

avg

As evident in ﬁgure 2, the percent diﬀerences between our
model and BigClam are very small (2-3%), suggesting that
our model discovers communities of comparable quality.

6.2 Dynamic Topic Modeling
Statistical topic models such as Latent Dirichlet Allocation
[2] discover distributions over words — topics — that are
posited to generate terms in the documents that comprise a
corpus. Dynamic topic models [20, 18] incorporate tempo-
ral information in the form of document timestamps to infer
latent topics and their evolution over time. Unfortunately,
these probabilistic latent variable models suﬀer from issues
of scalability, since each iteration of learning (for example,
using the EM algorithm) requires approximate probabilis-
tic inference via variational inference or Gibbs sampling to
estimate the expected distribution over the variables of the
model.

We attempt to address the problem of scalability by formu-
lating the problem of dynamic topic modeling as a temporal
community detection problem over co-occurrence graphs of
terms. Each term co-occurrence graph is derived from doc-
uments in a corpus that fall in a given time slice, where the
edge weight between two terms is the number of documents
in which the two terms co-occur.

We apply our method to politics news articles (i.e., articles
human-annotated with the tag “politics”) from the New York
Times Annotated Corpus [17], which consists of 20 years of
New York Times newswire from 1987 to 2007. The entire
16 GB dataset contains roughly 160,000 politics articles.

We generate co-occurrence graphs with a one-week temporal
resolution. For each document in the time slice, the top-
20 terms ranked by tf-idf score are used to construct the
co-occurrence graph. This results in a sequence of 1,067
graphs over which we perform the optimization. Finding
128 communities takes roughly 5 hours using 16 cores.

After convergence, we have a term-community aﬃliation
score in the interval [0, 1] for each term in our vocabulary,
and for each community detected. We then run a post-
processing step to extract and score representative phrases
for each community.

6.2.1 Phrase Extraction and Scoring

46810number of communities−2−101234percent F1 differenceOverlapping Community Detection Over Temporal Graph

Sequences

Kai Sheng Tai
Stanford University

kst@cs.stanford.edu

Stephen Macke
Stanford University

smacke@cs.stanford.edu

Yifei Huang

Stanford University

yifeih@cs.stanford.edu

ABSTRACT
In this paper, we introduce the Temporal Aﬃliation Model
(TEAM), a novel, scalable method for overlapping commu-
nity detection on dynamic, temporally-evolving networks.
The model jointly learns term-community aﬃliation strengths
along with community activity levels at each time step. Our
method can further cluster the discovered communities into
a community hierarchy. We apply TEAM to a dynamic topic
modeling task on a corpus of New York Times politics arti-
cles from 1987 to 2007. Our method successfully discovers a
topical hierarchy and identiﬁes temporal activity levels for
topics that correlate well with signiﬁcant historical events.

INTRODUCTION

1.
The structure of many real-world networks changes dynam-
ically over time. Connections between nodes in the network
may appear, disappear, or change in strength. Examples
of such networks with temporal dynamics include the net-
work traﬃc graph over collections of routers [11], networks
of emails between individuals [8, 16], and protein-protein
interaction networks [6].

These dynamic network structures have previously been ex-
plored in a variety of settings. Guo et al.
[5] and Kolar
et al. [9] use observations of node attributes over time (for
example, observations of gene expression levels) to learn la-
tent, temporally-evolving network structures over the nodes.
Here, the underlying network topology is unobserved. Han-
neke et al.
[7] study the problem of predicting the future
topology of a network given the previous history of network
structures. Using a discrete time series of observations of
the network structure, they model the temporal evolution
of network topology under a Markov assumption.

In spite of the prevalence of temporally-evolving networks
in real-world data and past work on dynamic network struc-
tures, the majority of work in community detection in net-
works has focused on discovering communities in static net-
works. Comparatively little work has been done on commu-
nity detection in dynamic networks that evolve over time.

In this paper, we introduce TEAM (Temporal Aﬃliation
Model), a novel, scalable community detection method over
temporal graph sequences that jointly learns both the la-
tent community structure and the time-dependent activity
of each community. TEAM is an extension of BigClam
(Cluster Aﬃliation Model for Big Networks) [21], an over-
lapping community detection method for static networks.

Figure 1: Overlapping communities in a dynamic
network.

Our method is able to detect both overlapping and non-
overlapping communities in the network. Our method can
further cluster the set of discovered communities into a com-
munity hierarchy using hierarchical agglomerative cluster-
ing.

We evaluate the quality of the communities discovered by
the network by evaluating against networks with known ground-
truth communities. We ﬁnd that TEAM achieves compara-
ble performance with BigClam (as measured by average F1
score) on co-authorship networks extracted from the DBLP
dataset [13].

As an application of TEAM, we model the temporal evolu-
tion of topics in a corpus of New York Times articles span-
ning the years 1987 to 2007. Unlike many commonly-used
topic models, our method does not require any variational
inference or Gibbs sampling during learning, which allows
us to scale to much larger corpora. Our method successfully
identiﬁes a topical hierarchy as well as the temporal activity
of each topic. Several of the topics discovered by TEAM on
this corpus correlate well with signiﬁcant historical events.

2. RELATED WORK
The TEAM model is closely related to BigClam [21], a
bipartite aﬃliation network model [12, 22] for overlapping
community detection. In bipartite aﬃliation network mod-
els, the nodes of the network and the set of community nodes
comprise the two disjoint sets of vertices of a bipartite graph.
The edges between network nodes and community nodes
represent the aﬃliation of the node with the community. If
the graph is weighted, the weight of the edge corresponds
to the strength of the node’s community aﬃliation. The
observed edges between the nodes of the network are con-
sidered to be generated from the latent community aﬃlia-

t = t0t = t1tions of the nodes. Our temporal aﬃliation model, described
in Sec. 3, is a natural extension of the aﬃliation model in-
troduced in [21] to temporal graph sequences. Unlike Big-
Clam, which is speciﬁc to unweighted graphs, TEAM takes
as input graphs with positive integer edge weights.

In analogy with the non-negative matrix factorization (NMF)
[14] interpretation of the BigClam method, TEAM admits
a non-negative tensor factorization (NTF) [10] interpreta-
tion. The sequence of adjacency matrices over time can be
regarded as a 3rd-order tensor with two “spatial” dimensions
over the space of nodes and one temporal dimension. There
has been previous work where the NTF of the adjacency ten-
sor is used for analyzing community activity over time [1, 4].
However, the direct NTF of the adjacency tensor is not eas-
ily interpretable. In the following we describe a variant of
NTF that admits a simple probabilistic interpretation.
3. TEMPORAL AFFILIATION MODEL
We now describe the TEAM generative model for tempo-
ral graph sequences. Let the number of communities K
be given. Given a set of vertices V , at each time step
t = 1, 2, . . . , T , generate a weighted, undirected graph us-
ing the following process. For each pair of vertices (u, v)
and each community k = 1, 2, . . . , K, generate an integer
w(k)
(u, v) from a Poisson distribution with mean AtkFukFvk:

t

w(k)

t

(u, v) ∼ Pois (AtkFukFvk) ,

(1)

where Fuk, Fvk ∈ [0, 1] are the community aﬃliation strengths
between community k and nodes u and v respectively. The
parameter Atk ∈ [0,∞) is the activity of community k at
time t. The community aﬃliation matrix F is the |V | × K
matrix of community aﬃliation strengths, and the tempo-
ral activity matrix A is the T × K matrix of community
activities.

The observed edge weight wt(u, v) is the sum over the weights
corresponding to each community:

K(cid:88)

k=1

wt(u, v) =

(u, v) ∼ Pois

w(k)

t

(cid:32) K(cid:88)

k=1

(cid:33)

AtkFukFvk

,

(2)

since a sum over Poisson random variables is itself a Poisson
random variable.
If wt(u, v) = 0, then there is no edge
between u and v in the graph at time t. All edge weights
are therefore positive integers.

Unlike [19], we do not impose the constraint that(cid:80)

This Poisson process for generating edges is similar to the
process used by Wang et al. [19] in a topic modeling setting.
u Fuk =
1 ∀k, i.e. that the community aﬃliation parameters for each
community deﬁne a multinomial distribution over the set of
nodes. This simpliﬁes our optimization problem and, as we
show in Sec. 6, still yields good results in topic modeling
experiments.

(cid:16)(cid:80)K

weighted undirected graphs. In BigClam, the (unweighted)
edge between nodes u, v is generated if the corresponding
Poisson random variable Xuv takes a positive value: Xuv >
0, Xuv ∼ Pois
. Note that in BigClam, the
community aﬃliation strengths Fuk take values in [0,∞),
whereas in our model the values Fuk are restricted to the
interval [0, 1].

k=1 FukFvk

(cid:17)

With this restriction, the community aﬃliation parameters
are more interpretable by virtue of the following probabilis-
tic interpretation. Each community aﬃliation parameter
Fuk can be interpreted as the probability that node u is
generated by community k in a Bernoulli trial, and each
community activity parameter Atk can be interpreted as
the product of the number of Bernoulli trials for commu-
nity k at time t (denoted Ntk) and the prior probability of
the community at time t (denoted atk): Atk = Ntkatk. To
see this, consider the Poisson distribution in Eq. 1 as an ap-
proximation to a binomial distribution Bin(Ntk, atkFukFvk):
the edge weight w(k)
(u, v) corresponding to community k is
simply the number of successes after Ntk independent trials.
For example, consider a sequence of co-occurence graphs of
terms over a corpus of documents, where edge weights are
given by the number of documents in which a pair of terms
co-occur. Each community corresponds to a topic in the cor-
pus, the F parameters give the probability that a given topic
generates any term, and Ntk is the number of documents at
time t that express topic k.

t

As previously mentioned, the TEAM model can be viewed
as a variant of non-negative tensor factorization (NTF) on
the |V | × |V | × T adjacency tensor of the observed graph
sequence. However, instead of decomposing the adjacancy
tensor directly, as in a direct application of NTF, we instead
decompose the 3rd-order tensor of Poisson mean parameters
corresponding to the Poisson random variable for each pair
of nodes at each time step.

4. LEARNING

4.1 Objective
The parameters F and A are learned from an input sequence
of T undirected graphs G = {G(V1, E1), . . . , G(VT , ET )} rep-
resenting snapshots of a network at discrete time steps. Let
t=1 Vt denote the set of vertices over the entire graph

V =(cid:83)T

sequence.

We maximize the regularized log-likelihood of the observed
graph sequence G. From Eq. 2, the distribution of the edge
weight wt(u, v) at time t between nodes u and v is:

Pr[wt(u, v) = y] =

λt(u, v)y

y!

exp (−λt(u, v)) ,

(3)

where:

K(cid:88)

λt(u, v) =

AtkFukFvk.

(4)

Our model is a natural extension of the BigClam commu-
nity aﬃliation model for static networks [21] to sequences of

Therefore, the log-likelihood of the data G given the param-

k=1

(cid:32)
T(cid:88)
(cid:88)

t=1

λt(u, v)

eters F, A is:

(cid:96)(G; F, A) =

− (cid:88)
wt(u, v) log λt(u, v) − log(cid:0)wt(u, v)!(cid:1)(cid:17)(cid:33)
(cid:16)
log(cid:0)wt(u, v)!(cid:1) term since it has no dependence on F or A.

(5)
When computing the log-likelihood in practice, we omit the

(u,v)∈Et

pairs(u,v)

+

.

O(K|V |) (in particular, without iterating over all pairs of
vertices) by using the observation that:

(cid:32)(cid:18)(cid:88)

(cid:19)2 −(cid:88)

Fv

v

v

(cid:33)

F 2
v

,

(9)

where the square is taken pointwise over the elements of
each vector. Similarly, the log-likelihood can be computed
. The total time complexity of each
in time O

(cid:18)

|V | +(cid:80)T

(cid:19)(cid:19)
t=1 |Et|

iteration is therefore O

K

. This is ef-

(cid:88)

Fu ◦ Fv =

1
2

pairs(u,v)

(cid:16)

t=1 |Et|(cid:17)
K(cid:80)T
(cid:18)

In order to encourage sparsity in the F parameters, we add
an L1 regularization penalty to the objective. To encourage
smoothness of community activities over time, we add an L2
regularization penalty on the diﬀerence between temporally
adjacent A parameters. The full cost function C(F, A;G) is
then given by:

C(F, A;G) = − (cid:96)(G; F, A)

(cid:88)

u∈V

+λ1

(cid:107)Fu(cid:107)1 +

1
2

λ2

T−1(cid:88)

t=1

(cid:107)At+1 − At(cid:107)2
2,

(6)

where (cid:96)(G; F, A) is the log-likelihood deﬁned in Eq. 5, and
λ1 and λ2 are hyperparameters. In our experiments, we use
λ1 = 102 and λ2 = 104.

4.2 Optimization
To optimize this objective, we use projected gradient de-
scent with adaptive per-parameter learning rates computed
using AdaGrad [3]. To avoid numerical issues with vanish-
ing λt(u, v) values, we set a small, nonzero minimum value 
for the parameters F and A. In our experiments, we set the
AdaGrad parameter η to 0.1 and  to 10−10. After each gra-
dient update, the F parameters are projected back onto the
feasible set [, 1] and the A parameters are projected onto
[,∞).
Let X ◦ Y denote the pointwise (Hadamard) product and
Nt(u) the set of neighbors of u at time t. The gradient for
Fu is:

T(cid:88)

t=1

(cid:32)(cid:88)

v(cid:54)=u

Fv − (cid:88)

v∈Nt(u)

∇Fu C =

At ◦

wt(u, v)
λt(u, v)

Fv

+ λ1.

(7)

(cid:33)

The gradient for At is:
∇At C =

Fu ◦ Fv − (cid:88)

(cid:88)
(cid:16)

pairs(u,v)

+ λ2

wt(u, v)
λt(u, v)

Fu ◦ Fv

(u,v)∈Et

1{t > 1}(At − At−1) + 1{t < T}(At − At+1)
(8)

where 1{x} is the indicator function.

(cid:16)

t=1 |Nt(u)|(cid:17)
K(cid:80)T

computing the value of(cid:80)
by precomputing the value of(cid:80)

In each iteration, we alternate between F and A, ﬁrst updat-
ing all rows of F , then updating all rows of A. The gradient
by pre-
for Fu can be computed in time O
v Fv at the start of each iteration,
while the gradient for At can be computed in time O (K|Et|)
pairs(u,v) Fu ◦ Fv at the start
of each iteration. This quantity can be computed in time

ﬁcient if the input graphs are sparse, as is the case for most
real-world networks.

To initialize F , we set each entry to a random value uni-
formly distributed over [0.25, 0.75]. To initialize A, we set
each entry to a random value uniformly distributed over
[0.75, 1.25].

In our implementation, we terminate the optimization when
the relative change in the objective falls below 10−3. The
log-likelihood is computed after every 10 iterations to check
for convergence.

5. COMMUNITY HIERARCHIES
Many networks derived from real-world data exhibit a hier-
archical community structure. For example, a social network
of undergraduate students can be composed of communi-
ties corresponding to each class year, which in turn can be
further decomposed into sub-communities corresponding to
academic concentrations.

Our community detection method allows for a simple post-
processing step that builds a hierarchy over the communities
discovered in the learning step. Each of the K columns of
the community aﬃliation matrix F is a vector in [0, 1]|V |.
To construct a community hierarchy, we use complete-link
hierarchical agglomerative clustering over the columns of F .
The metric over the vector space of communities is the co-
sine distance. We refer to clusters of communities as super-
communities. The temporal activity of a supercommunity
is deﬁned as the mean of the columns of A corresponding
to the communities that comprise the supercommunity. To
our knowledge, this application of hierarchical agglomera-
tive clustering is a novel method for constructing post-hoc
community hierarchies.

This method is not limited to clustering the node aﬃliation
strengths for each community. Instead, each community can
be represented by a linear combination Zk of an F column
and an A column:

Zk = αF∗k + (1 − α)A∗k,

(10)
where α ∈ [0, 1] is a parameter that trades oﬀ between the
“spatial” F component and the “temporal” A component.
We can therefore construct spatio-temporal hierarchies that
can be used, for example, to study which communities tend
to co-occur in time. In our experiments, we only consider
fully spatial clustering (α = 1), but spatio-temporal commu-
nity hierarchies are nonetheless an interesting line of future
work.

(cid:17)

Term Aﬃliation Score

students
school
education
religious
schools
court
religion
bush
science
evolution

0.944695
0.942791
0.939966
0.937476
0.927772
0.915907
0.900700
0.679902
0.615520
0.571594

Figure 2: Percentage diﬀerence in average F1 of
communities discovered by TEAM relative to Big-
Clam on subsampled DBLP co-authorship graphs.

Table 1: Terms and aﬃliation scores for an example
community.

6. EXPERIMENTS
6.1 Evaluation using Ground-Truth
We evaluate the communities detected by TEAM by com-
paring them against ground-truth communities. Speciﬁcally,
we use the co-authorship network derived from the DBLP
dataset [13], where ground-truth communities correspond to
conferences and journals.

In our evaluation, we use DBLP journal and conference data
from 1974 to 2004. The full co-authorship network is sub-
sampled using a similar subsampling technique as described
in [21]. We select a random author u who belongs to at
least 2 communities, and create a subgraph by sampling only
other authors v that share at least one ground truth commu-
nity with u. Furthermore, to ensure a connected graph, only
those v that belong to the connected component with u are
subsampled. Note that TEAM only takes a single graph as
input (as opposed to a graph sequence) in our comparisons
with BigClam.

We evaluate the discovered communities using the average
F1 score. Given the ground truth communities Ci ∈ C∗
and the set of detected communities ˆCi ∈ ˆC, the average F1
score is:

(cid:32)

(cid:88)
(cid:16)

Ci∈C∗

1
|C∗|

(cid:88)

ˆCi∈ ˆC

F 1

Ci, ˆCg(i)

(cid:16)

(cid:17)

(cid:17)(cid:33)

,

F 1

Cg(cid:48)(i), ˆCi

F1avg(C

∗

, ˆC) =

1
2

+

1
| ˆC|

where:

(11)

(12)

(13)

(14)

g(i) = arg max
(cid:48)

(i) = arg max

j

g

j

F1(Ci, ˆCj),

F1(Cj, ˆCi).

We ﬁrst compare our results with those of BigClam [21].
Since it is inherently easier to discover communities in cer-
tain subsampled graphs, we calculate the percent diﬀer-
ence in average F1 scores between our model and BigClam:
(F1TEAM
. We evaluated on diﬀerent
numbers of ground-truth communities, sampling 20 graphs
for each community count.

avg − F1BigClam

)/F1BigClam

avg

avg

As evident in ﬁgure 2, the percent diﬀerences between our
model and BigClam are very small (2-3%), suggesting that
our model discovers communities of comparable quality.

6.2 Dynamic Topic Modeling
Statistical topic models such as Latent Dirichlet Allocation
[2] discover distributions over words — topics — that are
posited to generate terms in the documents that comprise a
corpus. Dynamic topic models [20, 18] incorporate tempo-
ral information in the form of document timestamps to infer
latent topics and their evolution over time. Unfortunately,
these probabilistic latent variable models suﬀer from issues
of scalability, since each iteration of learning (for example,
using the EM algorithm) requires approximate probabilis-
tic inference via variational inference or Gibbs sampling to
estimate the expected distribution over the variables of the
model.

We attempt to address the problem of scalability by formu-
lating the problem of dynamic topic modeling as a temporal
community detection problem over co-occurrence graphs of
terms. Each term co-occurrence graph is derived from doc-
uments in a corpus that fall in a given time slice, where the
edge weight between two terms is the number of documents
in which the two terms co-occur.

We apply our method to politics news articles (i.e., articles
human-annotated with the tag “politics”) from the New York
Times Annotated Corpus [17], which consists of 20 years of
New York Times newswire from 1987 to 2007. The entire
16 GB dataset contains roughly 160,000 politics articles.

We generate co-occurrence graphs with a one-week temporal
resolution. For each document in the time slice, the top-
20 terms ranked by tf-idf score are used to construct the
co-occurrence graph. This results in a sequence of 1,067
graphs over which we perform the optimization. Finding
128 communities takes roughly 5 hours using 16 cores.

After convergence, we have a term-community aﬃliation
score in the interval [0, 1] for each term in our vocabulary,
and for each community detected. We then run a post-
processing step to extract and score representative phrases
for each community.

6.2.1 Phrase Extraction and Scoring

46810number of communities−2−101234percent F1 differenceFigure 3: A community hierarchy over topics expressed in New York Times politics articles. Communities
are clustered using complete-link hierarchical agglomerative clustering with cosine distance.

The top-ranked terms (in terms of term-community aﬃl-
iation strength) provide a concise way to represent each
discovered community. Unfortunately, communities are not
always easily interpretable from their representative terms
alone. As an example, consider the top ten terms shown
in Table 1. This topic (community) pertains to the debate
over the teaching of evolution in schools. However, indi-
viduals unfamiliar with U.S. politics may ﬁnd it diﬃcult to
deduce this interpretation given only the list of terms.

To improve the interpretability of the discovered topics, we
represent each topic by a ranked list of phrases. Using
the term-community aﬃliation scores learned by TEAM, we
rank phrases extracted directly from documents in the cor-
pus. Each phrase P is represented as a bag-of-words and
scored for each community k as follows:

score(P ) = (P · F∗k)(1 + log |P|),

(15)

where F∗k represents the term-community aﬃliation vector
for community k, and the sublinear scaling term (1+log |P|)
rewards longer phrases, which should be more informative
than shorter ones.

The phrases themselves can be selected in any number of
ways, such as frequent pattern mining, named entity extrac-
tion, or noun phrase extraction. Similar to the approach
taken in [15], we extract noun phrases by ﬁrst perform-
ing part-of-speech tagging, then selecting consecutive terms
whose tags match the following pattern:

(Adj | Noun)* (Noun Prep)? (Adj | Noun)* Noun.

The top ranked phrases extracted for the evolution topic
(Table 1) are listed in Table 2.

6.2.2 Analysis of Temporal Topical Activities
We now examine the temporal activities of several sample
topics and explore our results given the historical context

Score

Phrase
religious school education
private religious school education
students from religious schools
religious education in schools
religious students

1.972859
1.682477
1.676338
1.673517
1.593396
teaching evolution classroom 1.467496

Table 2: Phrases extracted for the community in
Table 1

for the time period covered by the New York Times cor-
pus. Fig. 4 depicts the community activities for a topic
represented by phrases such as religious conservative
republicans, abortion rights amendment, and conserva-
tive supreme court. Here, we observe that the large activ-
ity spike in early 2005 coincides with the introduction of a
large amount of abortion-limiting legislation.

Next, Fig. 5 depicts the learned activities for a topic repre-
sented by phrases such as united nations security coun-
cil resolution on iraq and united nations weapons in-
spectors. For this topic, the large spike in early 2002 occurs
shortly after the September 11 terrorist attacks. Around
this time, George W. Bush began eﬀorts to enact sanctions
against Iraq over the alleged development and possession of
weapons of mass destruction.

As a ﬁnal example, consider Fig. 6, which depicts temporal
topical activities for a topic represented by phrases such as
east germany and east german communist party. Here,
the spike in activity around 1990 coincides with the fall of
the Berlin Wall. We also observe a minor spike which occurs
much later in the activity plot. This smaller spike in activ-
ity coincides with the publication of an article describing a
memorial at the site of the original wall, commemorating its
destruction as a symbolic “lifting of the Iron Curtain”.

6.2.3 Analysis of Topical Hierarchy

clintonconventionperotnigeriarefugeeshaitibrazilrussianaquinobushdukakischinasovietsovietpartymoscowgermanyrefugeesclintoneasttimorbushbushkerryclintoniraqmayorcityclintondolemayorcitybushcityiraqmayorbushclintongoregiulianimccainrepublicanscitycuomogovernormayorcourtafricaafricanblacknationstaiwanchinabeijingdemocracycosine distancepeacenationspalestinianmoscowindiapakistanrebelsgandhiOverlapping Community Detection Over Temporal Graph

Sequences

Kai Sheng Tai
Stanford University

kst@cs.stanford.edu

Stephen Macke
Stanford University

smacke@cs.stanford.edu

Yifei Huang

Stanford University

yifeih@cs.stanford.edu

ABSTRACT
In this paper, we introduce the Temporal Aﬃliation Model
(TEAM), a novel, scalable method for overlapping commu-
nity detection on dynamic, temporally-evolving networks.
The model jointly learns term-community aﬃliation strengths
along with community activity levels at each time step. Our
method can further cluster the discovered communities into
a community hierarchy. We apply TEAM to a dynamic topic
modeling task on a corpus of New York Times politics arti-
cles from 1987 to 2007. Our method successfully discovers a
topical hierarchy and identiﬁes temporal activity levels for
topics that correlate well with signiﬁcant historical events.

INTRODUCTION

1.
The structure of many real-world networks changes dynam-
ically over time. Connections between nodes in the network
may appear, disappear, or change in strength. Examples
of such networks with temporal dynamics include the net-
work traﬃc graph over collections of routers [11], networks
of emails between individuals [8, 16], and protein-protein
interaction networks [6].

These dynamic network structures have previously been ex-
plored in a variety of settings. Guo et al.
[5] and Kolar
et al. [9] use observations of node attributes over time (for
example, observations of gene expression levels) to learn la-
tent, temporally-evolving network structures over the nodes.
Here, the underlying network topology is unobserved. Han-
neke et al.
[7] study the problem of predicting the future
topology of a network given the previous history of network
structures. Using a discrete time series of observations of
the network structure, they model the temporal evolution
of network topology under a Markov assumption.

In spite of the prevalence of temporally-evolving networks
in real-world data and past work on dynamic network struc-
tures, the majority of work in community detection in net-
works has focused on discovering communities in static net-
works. Comparatively little work has been done on commu-
nity detection in dynamic networks that evolve over time.

In this paper, we introduce TEAM (Temporal Aﬃliation
Model), a novel, scalable community detection method over
temporal graph sequences that jointly learns both the la-
tent community structure and the time-dependent activity
of each community. TEAM is an extension of BigClam
(Cluster Aﬃliation Model for Big Networks) [21], an over-
lapping community detection method for static networks.

Figure 1: Overlapping communities in a dynamic
network.

Our method is able to detect both overlapping and non-
overlapping communities in the network. Our method can
further cluster the set of discovered communities into a com-
munity hierarchy using hierarchical agglomerative cluster-
ing.

We evaluate the quality of the communities discovered by
the network by evaluating against networks with known ground-
truth communities. We ﬁnd that TEAM achieves compara-
ble performance with BigClam (as measured by average F1
score) on co-authorship networks extracted from the DBLP
dataset [13].

As an application of TEAM, we model the temporal evolu-
tion of topics in a corpus of New York Times articles span-
ning the years 1987 to 2007. Unlike many commonly-used
topic models, our method does not require any variational
inference or Gibbs sampling during learning, which allows
us to scale to much larger corpora. Our method successfully
identiﬁes a topical hierarchy as well as the temporal activity
of each topic. Several of the topics discovered by TEAM on
this corpus correlate well with signiﬁcant historical events.

2. RELATED WORK
The TEAM model is closely related to BigClam [21], a
bipartite aﬃliation network model [12, 22] for overlapping
community detection. In bipartite aﬃliation network mod-
els, the nodes of the network and the set of community nodes
comprise the two disjoint sets of vertices of a bipartite graph.
The edges between network nodes and community nodes
represent the aﬃliation of the node with the community. If
the graph is weighted, the weight of the edge corresponds
to the strength of the node’s community aﬃliation. The
observed edges between the nodes of the network are con-
sidered to be generated from the latent community aﬃlia-

t = t0t = t1tions of the nodes. Our temporal aﬃliation model, described
in Sec. 3, is a natural extension of the aﬃliation model in-
troduced in [21] to temporal graph sequences. Unlike Big-
Clam, which is speciﬁc to unweighted graphs, TEAM takes
as input graphs with positive integer edge weights.

In analogy with the non-negative matrix factorization (NMF)
[14] interpretation of the BigClam method, TEAM admits
a non-negative tensor factorization (NTF) [10] interpreta-
tion. The sequence of adjacency matrices over time can be
regarded as a 3rd-order tensor with two “spatial” dimensions
over the space of nodes and one temporal dimension. There
has been previous work where the NTF of the adjacency ten-
sor is used for analyzing community activity over time [1, 4].
However, the direct NTF of the adjacency tensor is not eas-
ily interpretable. In the following we describe a variant of
NTF that admits a simple probabilistic interpretation.
3. TEMPORAL AFFILIATION MODEL
We now describe the TEAM generative model for tempo-
ral graph sequences. Let the number of communities K
be given. Given a set of vertices V , at each time step
t = 1, 2, . . . , T , generate a weighted, undirected graph us-
ing the following process. For each pair of vertices (u, v)
and each community k = 1, 2, . . . , K, generate an integer
w(k)
(u, v) from a Poisson distribution with mean AtkFukFvk:

t

w(k)

t

(u, v) ∼ Pois (AtkFukFvk) ,

(1)

where Fuk, Fvk ∈ [0, 1] are the community aﬃliation strengths
between community k and nodes u and v respectively. The
parameter Atk ∈ [0,∞) is the activity of community k at
time t. The community aﬃliation matrix F is the |V | × K
matrix of community aﬃliation strengths, and the tempo-
ral activity matrix A is the T × K matrix of community
activities.

The observed edge weight wt(u, v) is the sum over the weights
corresponding to each community:

K(cid:88)

k=1

wt(u, v) =

(u, v) ∼ Pois

w(k)

t

(cid:32) K(cid:88)

k=1

(cid:33)

AtkFukFvk

,

(2)

since a sum over Poisson random variables is itself a Poisson
random variable.
If wt(u, v) = 0, then there is no edge
between u and v in the graph at time t. All edge weights
are therefore positive integers.

Unlike [19], we do not impose the constraint that(cid:80)

This Poisson process for generating edges is similar to the
process used by Wang et al. [19] in a topic modeling setting.
u Fuk =
1 ∀k, i.e. that the community aﬃliation parameters for each
community deﬁne a multinomial distribution over the set of
nodes. This simpliﬁes our optimization problem and, as we
show in Sec. 6, still yields good results in topic modeling
experiments.

(cid:16)(cid:80)K

weighted undirected graphs. In BigClam, the (unweighted)
edge between nodes u, v is generated if the corresponding
Poisson random variable Xuv takes a positive value: Xuv >
0, Xuv ∼ Pois
. Note that in BigClam, the
community aﬃliation strengths Fuk take values in [0,∞),
whereas in our model the values Fuk are restricted to the
interval [0, 1].

k=1 FukFvk

(cid:17)

With this restriction, the community aﬃliation parameters
are more interpretable by virtue of the following probabilis-
tic interpretation. Each community aﬃliation parameter
Fuk can be interpreted as the probability that node u is
generated by community k in a Bernoulli trial, and each
community activity parameter Atk can be interpreted as
the product of the number of Bernoulli trials for commu-
nity k at time t (denoted Ntk) and the prior probability of
the community at time t (denoted atk): Atk = Ntkatk. To
see this, consider the Poisson distribution in Eq. 1 as an ap-
proximation to a binomial distribution Bin(Ntk, atkFukFvk):
the edge weight w(k)
(u, v) corresponding to community k is
simply the number of successes after Ntk independent trials.
For example, consider a sequence of co-occurence graphs of
terms over a corpus of documents, where edge weights are
given by the number of documents in which a pair of terms
co-occur. Each community corresponds to a topic in the cor-
pus, the F parameters give the probability that a given topic
generates any term, and Ntk is the number of documents at
time t that express topic k.

t

As previously mentioned, the TEAM model can be viewed
as a variant of non-negative tensor factorization (NTF) on
the |V | × |V | × T adjacency tensor of the observed graph
sequence. However, instead of decomposing the adjacancy
tensor directly, as in a direct application of NTF, we instead
decompose the 3rd-order tensor of Poisson mean parameters
corresponding to the Poisson random variable for each pair
of nodes at each time step.

4. LEARNING

4.1 Objective
The parameters F and A are learned from an input sequence
of T undirected graphs G = {G(V1, E1), . . . , G(VT , ET )} rep-
resenting snapshots of a network at discrete time steps. Let
t=1 Vt denote the set of vertices over the entire graph

V =(cid:83)T

sequence.

We maximize the regularized log-likelihood of the observed
graph sequence G. From Eq. 2, the distribution of the edge
weight wt(u, v) at time t between nodes u and v is:

Pr[wt(u, v) = y] =

λt(u, v)y

y!

exp (−λt(u, v)) ,

(3)

where:

K(cid:88)

λt(u, v) =

AtkFukFvk.

(4)

Our model is a natural extension of the BigClam commu-
nity aﬃliation model for static networks [21] to sequences of

Therefore, the log-likelihood of the data G given the param-

k=1

(cid:32)
T(cid:88)
(cid:88)

t=1

λt(u, v)

eters F, A is:

(cid:96)(G; F, A) =

− (cid:88)
wt(u, v) log λt(u, v) − log(cid:0)wt(u, v)!(cid:1)(cid:17)(cid:33)
(cid:16)
log(cid:0)wt(u, v)!(cid:1) term since it has no dependence on F or A.

(5)
When computing the log-likelihood in practice, we omit the

(u,v)∈Et

pairs(u,v)

+

.

O(K|V |) (in particular, without iterating over all pairs of
vertices) by using the observation that:

(cid:32)(cid:18)(cid:88)

(cid:19)2 −(cid:88)

Fv

v

v

(cid:33)

F 2
v

,

(9)

where the square is taken pointwise over the elements of
each vector. Similarly, the log-likelihood can be computed
. The total time complexity of each
in time O

(cid:18)

|V | +(cid:80)T

(cid:19)(cid:19)
t=1 |Et|

iteration is therefore O

K

. This is ef-

(cid:88)

Fu ◦ Fv =

1
2

pairs(u,v)

(cid:16)

t=1 |Et|(cid:17)
K(cid:80)T
(cid:18)

In order to encourage sparsity in the F parameters, we add
an L1 regularization penalty to the objective. To encourage
smoothness of community activities over time, we add an L2
regularization penalty on the diﬀerence between temporally
adjacent A parameters. The full cost function C(F, A;G) is
then given by:

C(F, A;G) = − (cid:96)(G; F, A)

(cid:88)

u∈V

+λ1

(cid:107)Fu(cid:107)1 +

1
2

λ2

T−1(cid:88)

t=1

(cid:107)At+1 − At(cid:107)2
2,

(6)

where (cid:96)(G; F, A) is the log-likelihood deﬁned in Eq. 5, and
λ1 and λ2 are hyperparameters. In our experiments, we use
λ1 = 102 and λ2 = 104.

4.2 Optimization
To optimize this objective, we use projected gradient de-
scent with adaptive per-parameter learning rates computed
using AdaGrad [3]. To avoid numerical issues with vanish-
ing λt(u, v) values, we set a small, nonzero minimum value 
for the parameters F and A. In our experiments, we set the
AdaGrad parameter η to 0.1 and  to 10−10. After each gra-
dient update, the F parameters are projected back onto the
feasible set [, 1] and the A parameters are projected onto
[,∞).
Let X ◦ Y denote the pointwise (Hadamard) product and
Nt(u) the set of neighbors of u at time t. The gradient for
Fu is:

T(cid:88)

t=1

(cid:32)(cid:88)

v(cid:54)=u

Fv − (cid:88)

v∈Nt(u)

∇Fu C =

At ◦

wt(u, v)
λt(u, v)

Fv

+ λ1.

(7)

(cid:33)

The gradient for At is:
∇At C =

Fu ◦ Fv − (cid:88)

(cid:88)
(cid:16)

pairs(u,v)

+ λ2

wt(u, v)
λt(u, v)

Fu ◦ Fv

(u,v)∈Et

1{t > 1}(At − At−1) + 1{t < T}(At − At+1)
(8)

where 1{x} is the indicator function.

(cid:16)

t=1 |Nt(u)|(cid:17)
K(cid:80)T

computing the value of(cid:80)
by precomputing the value of(cid:80)

In each iteration, we alternate between F and A, ﬁrst updat-
ing all rows of F , then updating all rows of A. The gradient
by pre-
for Fu can be computed in time O
v Fv at the start of each iteration,
while the gradient for At can be computed in time O (K|Et|)
pairs(u,v) Fu ◦ Fv at the start
of each iteration. This quantity can be computed in time

ﬁcient if the input graphs are sparse, as is the case for most
real-world networks.

To initialize F , we set each entry to a random value uni-
formly distributed over [0.25, 0.75]. To initialize A, we set
each entry to a random value uniformly distributed over
[0.75, 1.25].

In our implementation, we terminate the optimization when
the relative change in the objective falls below 10−3. The
log-likelihood is computed after every 10 iterations to check
for convergence.

5. COMMUNITY HIERARCHIES
Many networks derived from real-world data exhibit a hier-
archical community structure. For example, a social network
of undergraduate students can be composed of communi-
ties corresponding to each class year, which in turn can be
further decomposed into sub-communities corresponding to
academic concentrations.

Our community detection method allows for a simple post-
processing step that builds a hierarchy over the communities
discovered in the learning step. Each of the K columns of
the community aﬃliation matrix F is a vector in [0, 1]|V |.
To construct a community hierarchy, we use complete-link
hierarchical agglomerative clustering over the columns of F .
The metric over the vector space of communities is the co-
sine distance. We refer to clusters of communities as super-
communities. The temporal activity of a supercommunity
is deﬁned as the mean of the columns of A corresponding
to the communities that comprise the supercommunity. To
our knowledge, this application of hierarchical agglomera-
tive clustering is a novel method for constructing post-hoc
community hierarchies.

This method is not limited to clustering the node aﬃliation
strengths for each community. Instead, each community can
be represented by a linear combination Zk of an F column
and an A column:

Zk = αF∗k + (1 − α)A∗k,

(10)
where α ∈ [0, 1] is a parameter that trades oﬀ between the
“spatial” F component and the “temporal” A component.
We can therefore construct spatio-temporal hierarchies that
can be used, for example, to study which communities tend
to co-occur in time. In our experiments, we only consider
fully spatial clustering (α = 1), but spatio-temporal commu-
nity hierarchies are nonetheless an interesting line of future
work.

(cid:17)

Term Aﬃliation Score

students
school
education
religious
schools
court
religion
bush
science
evolution

0.944695
0.942791
0.939966
0.937476
0.927772
0.915907
0.900700
0.679902
0.615520
0.571594

Figure 2: Percentage diﬀerence in average F1 of
communities discovered by TEAM relative to Big-
Clam on subsampled DBLP co-authorship graphs.

Table 1: Terms and aﬃliation scores for an example
community.

6. EXPERIMENTS
6.1 Evaluation using Ground-Truth
We evaluate the communities detected by TEAM by com-
paring them against ground-truth communities. Speciﬁcally,
we use the co-authorship network derived from the DBLP
dataset [13], where ground-truth communities correspond to
conferences and journals.

In our evaluation, we use DBLP journal and conference data
from 1974 to 2004. The full co-authorship network is sub-
sampled using a similar subsampling technique as described
in [21]. We select a random author u who belongs to at
least 2 communities, and create a subgraph by sampling only
other authors v that share at least one ground truth commu-
nity with u. Furthermore, to ensure a connected graph, only
those v that belong to the connected component with u are
subsampled. Note that TEAM only takes a single graph as
input (as opposed to a graph sequence) in our comparisons
with BigClam.

We evaluate the discovered communities using the average
F1 score. Given the ground truth communities Ci ∈ C∗
and the set of detected communities ˆCi ∈ ˆC, the average F1
score is:

(cid:32)

(cid:88)
(cid:16)

Ci∈C∗

1
|C∗|

(cid:88)

ˆCi∈ ˆC

F 1

Ci, ˆCg(i)

(cid:16)

(cid:17)

(cid:17)(cid:33)

,

F 1

Cg(cid:48)(i), ˆCi

F1avg(C

∗

, ˆC) =

1
2

+

1
| ˆC|

where:

(11)

(12)

(13)

(14)

g(i) = arg max
(cid:48)

(i) = arg max

j

g

j

F1(Ci, ˆCj),

F1(Cj, ˆCi).

We ﬁrst compare our results with those of BigClam [21].
Since it is inherently easier to discover communities in cer-
tain subsampled graphs, we calculate the percent diﬀer-
ence in average F1 scores between our model and BigClam:
(F1TEAM
. We evaluated on diﬀerent
numbers of ground-truth communities, sampling 20 graphs
for each community count.

avg − F1BigClam

)/F1BigClam

avg

avg

As evident in ﬁgure 2, the percent diﬀerences between our
model and BigClam are very small (2-3%), suggesting that
our model discovers communities of comparable quality.

6.2 Dynamic Topic Modeling
Statistical topic models such as Latent Dirichlet Allocation
[2] discover distributions over words — topics — that are
posited to generate terms in the documents that comprise a
corpus. Dynamic topic models [20, 18] incorporate tempo-
ral information in the form of document timestamps to infer
latent topics and their evolution over time. Unfortunately,
these probabilistic latent variable models suﬀer from issues
of scalability, since each iteration of learning (for example,
using the EM algorithm) requires approximate probabilis-
tic inference via variational inference or Gibbs sampling to
estimate the expected distribution over the variables of the
model.

We attempt to address the problem of scalability by formu-
lating the problem of dynamic topic modeling as a temporal
community detection problem over co-occurrence graphs of
terms. Each term co-occurrence graph is derived from doc-
uments in a corpus that fall in a given time slice, where the
edge weight between two terms is the number of documents
in which the two terms co-occur.

We apply our method to politics news articles (i.e., articles
human-annotated with the tag “politics”) from the New York
Times Annotated Corpus [17], which consists of 20 years of
New York Times newswire from 1987 to 2007. The entire
16 GB dataset contains roughly 160,000 politics articles.

We generate co-occurrence graphs with a one-week temporal
resolution. For each document in the time slice, the top-
20 terms ranked by tf-idf score are used to construct the
co-occurrence graph. This results in a sequence of 1,067
graphs over which we perform the optimization. Finding
128 communities takes roughly 5 hours using 16 cores.

After convergence, we have a term-community aﬃliation
score in the interval [0, 1] for each term in our vocabulary,
and for each community detected. We then run a post-
processing step to extract and score representative phrases
for each community.

6.2.1 Phrase Extraction and Scoring

46810number of communities−2−101234percent F1 differenceFigure 3: A community hierarchy over topics expressed in New York Times politics articles. Communities
are clustered using complete-link hierarchical agglomerative clustering with cosine distance.

The top-ranked terms (in terms of term-community aﬃl-
iation strength) provide a concise way to represent each
discovered community. Unfortunately, communities are not
always easily interpretable from their representative terms
alone. As an example, consider the top ten terms shown
in Table 1. This topic (community) pertains to the debate
over the teaching of evolution in schools. However, indi-
viduals unfamiliar with U.S. politics may ﬁnd it diﬃcult to
deduce this interpretation given only the list of terms.

To improve the interpretability of the discovered topics, we
represent each topic by a ranked list of phrases. Using
the term-community aﬃliation scores learned by TEAM, we
rank phrases extracted directly from documents in the cor-
pus. Each phrase P is represented as a bag-of-words and
scored for each community k as follows:

score(P ) = (P · F∗k)(1 + log |P|),

(15)

where F∗k represents the term-community aﬃliation vector
for community k, and the sublinear scaling term (1+log |P|)
rewards longer phrases, which should be more informative
than shorter ones.

The phrases themselves can be selected in any number of
ways, such as frequent pattern mining, named entity extrac-
tion, or noun phrase extraction. Similar to the approach
taken in [15], we extract noun phrases by ﬁrst perform-
ing part-of-speech tagging, then selecting consecutive terms
whose tags match the following pattern:

(Adj | Noun)* (Noun Prep)? (Adj | Noun)* Noun.

The top ranked phrases extracted for the evolution topic
(Table 1) are listed in Table 2.

6.2.2 Analysis of Temporal Topical Activities
We now examine the temporal activities of several sample
topics and explore our results given the historical context

Score

Phrase
religious school education
private religious school education
students from religious schools
religious education in schools
religious students

1.972859
1.682477
1.676338
1.673517
1.593396
teaching evolution classroom 1.467496

Table 2: Phrases extracted for the community in
Table 1

for the time period covered by the New York Times cor-
pus. Fig. 4 depicts the community activities for a topic
represented by phrases such as religious conservative
republicans, abortion rights amendment, and conserva-
tive supreme court. Here, we observe that the large activ-
ity spike in early 2005 coincides with the introduction of a
large amount of abortion-limiting legislation.

Next, Fig. 5 depicts the learned activities for a topic repre-
sented by phrases such as united nations security coun-
cil resolution on iraq and united nations weapons in-
spectors. For this topic, the large spike in early 2002 occurs
shortly after the September 11 terrorist attacks. Around
this time, George W. Bush began eﬀorts to enact sanctions
against Iraq over the alleged development and possession of
weapons of mass destruction.

As a ﬁnal example, consider Fig. 6, which depicts temporal
topical activities for a topic represented by phrases such as
east germany and east german communist party. Here,
the spike in activity around 1990 coincides with the fall of
the Berlin Wall. We also observe a minor spike which occurs
much later in the activity plot. This smaller spike in activ-
ity coincides with the publication of an article describing a
memorial at the site of the original wall, commemorating its
destruction as a symbolic “lifting of the Iron Curtain”.

6.2.3 Analysis of Topical Hierarchy

clintonconventionperotnigeriarefugeeshaitibrazilrussianaquinobushdukakischinasovietsovietpartymoscowgermanyrefugeesclintoneasttimorbushbushkerryclintoniraqmayorcityclintondolemayorcitybushcityiraqmayorbushclintongoregiulianimccainrepublicanscitycuomogovernormayorcourtafricaafricanblacknationstaiwanchinabeijingdemocracycosine distancepeacenationspalestinianmoscowindiapakistanrebelsgandhiFig. 3 depicts a topical hierarchy constructed using the afore-
mentioned complete-link agglomerative clustering method.
Broadly speaking, the left-most hierarchies correspond with
international news. To the right of this, we have more U.S.-
centric articles.
In particular, the green clusters coincide
with news local to New York City. This topical hierarchy
provides an easily interpretable global view of the topics ex-
pressed in the corpus.

7. CONCLUSION
In this paper, we introduce a novel community detection
method, TEAM, for temporal graph sequences. A promis-
ing application of the method is dynamic topic modeling on
large corpora, as evidenced by our analysis of topical hier-
archies in a corpus of New York Times articles.

Further evaluation of the method on other datasets with
ground truth is needed. In particular, it would be useful to
compare TEAM with other methods in terms of (a) evalu-
ation on ground-truth data, and (b) speed and algorithmic
complexity. The aforementioned quantities could be used
to evaluate any potential tradeoﬀs when including temporal
information for the purpose of community detection.

Next, for datasets for which ground truth is not available,
user-studies on phrase representations of the extracted topi-
cal clusters for qualities such as completeness, purity, and
phraseness (described further in [19]) would help further
evaluate the beneﬁt of our method as a tool for informa-
tion retrieval.

In addition, further exploration is needed regarding the time-
space tradeoﬀ in construction of spatio-temporal hierarchical
clusters. In this paper, we only consider agglomerative con-
struction of hierarchies on the spatial components of bottom-
level clusters.

Finally, when performing phrase extraction, we currently
do not use the term-community activities in any way for
phrase ranking. Incorporating such information could help
improve the rankings of phrases more salient to the partic-
ular topic(s) under consideration.

8. ACKNOWLEDGMENTS
We thank Rok Sosic and Jure Leskovec for helpful discus-
sions and suggestions over the course of this project.

9. REFERENCES
[1] B. W. Bader, R. A. Harshman, and T. G. Kolda.

Temporal analysis of semantic graphs using asalsan. In
Data Mining, 2007. ICDM 2007. Seventh IEEE
International Conference on, pages 33–42. IEEE, 2007.

[2] D. M. Blei, A. Y. Ng, and M. I. Jordan. Latent

dirichlet allocation. the Journal of Machine Learning
Research, 3:993–1022, 2003.

[3] J. Duchi, E. Hazan, and Y. Singer. Adaptive

subgradient methods for online learning and stochastic
optimization. The Journal of Machine Learning
Research, 12:2121–2159, 2011.

[4] L. Gauvin, A. Panisson, and C. Cattuto. Detecting

the community structure and activity patterns of

Figure 4: Activities for abortion legislation commu-
nity

Figure 5: Activities for Iraqi weapons inspection
community

Figure 6: Activities for East Germany community

0.000.050.100.150.200.25Activity2005:Manyabortion-relatedbillsAbortionBillsTopicalActivities198719891991199319951997199920012003200520070.00.10.20.30.4ActivityunitednationsweaponsinspectorsiniraqIraqTopicalActivities198719891991199319951997199920012003200520070.00.10.20.30.4ActivityJuly2005Removalofcrosses1990–BerlinWalldestroyedEasternGermanyTopicalActivity19871989199119931995199719992001200320052007Overlapping Community Detection Over Temporal Graph

Sequences

Kai Sheng Tai
Stanford University

kst@cs.stanford.edu

Stephen Macke
Stanford University

smacke@cs.stanford.edu

Yifei Huang

Stanford University

yifeih@cs.stanford.edu

ABSTRACT
In this paper, we introduce the Temporal Aﬃliation Model
(TEAM), a novel, scalable method for overlapping commu-
nity detection on dynamic, temporally-evolving networks.
The model jointly learns term-community aﬃliation strengths
along with community activity levels at each time step. Our
method can further cluster the discovered communities into
a community hierarchy. We apply TEAM to a dynamic topic
modeling task on a corpus of New York Times politics arti-
cles from 1987 to 2007. Our method successfully discovers a
topical hierarchy and identiﬁes temporal activity levels for
topics that correlate well with signiﬁcant historical events.

INTRODUCTION

1.
The structure of many real-world networks changes dynam-
ically over time. Connections between nodes in the network
may appear, disappear, or change in strength. Examples
of such networks with temporal dynamics include the net-
work traﬃc graph over collections of routers [11], networks
of emails between individuals [8, 16], and protein-protein
interaction networks [6].

These dynamic network structures have previously been ex-
plored in a variety of settings. Guo et al.
[5] and Kolar
et al. [9] use observations of node attributes over time (for
example, observations of gene expression levels) to learn la-
tent, temporally-evolving network structures over the nodes.
Here, the underlying network topology is unobserved. Han-
neke et al.
[7] study the problem of predicting the future
topology of a network given the previous history of network
structures. Using a discrete time series of observations of
the network structure, they model the temporal evolution
of network topology under a Markov assumption.

In spite of the prevalence of temporally-evolving networks
in real-world data and past work on dynamic network struc-
tures, the majority of work in community detection in net-
works has focused on discovering communities in static net-
works. Comparatively little work has been done on commu-
nity detection in dynamic networks that evolve over time.

In this paper, we introduce TEAM (Temporal Aﬃliation
Model), a novel, scalable community detection method over
temporal graph sequences that jointly learns both the la-
tent community structure and the time-dependent activity
of each community. TEAM is an extension of BigClam
(Cluster Aﬃliation Model for Big Networks) [21], an over-
lapping community detection method for static networks.

Figure 1: Overlapping communities in a dynamic
network.

Our method is able to detect both overlapping and non-
overlapping communities in the network. Our method can
further cluster the set of discovered communities into a com-
munity hierarchy using hierarchical agglomerative cluster-
ing.

We evaluate the quality of the communities discovered by
the network by evaluating against networks with known ground-
truth communities. We ﬁnd that TEAM achieves compara-
ble performance with BigClam (as measured by average F1
score) on co-authorship networks extracted from the DBLP
dataset [13].

As an application of TEAM, we model the temporal evolu-
tion of topics in a corpus of New York Times articles span-
ning the years 1987 to 2007. Unlike many commonly-used
topic models, our method does not require any variational
inference or Gibbs sampling during learning, which allows
us to scale to much larger corpora. Our method successfully
identiﬁes a topical hierarchy as well as the temporal activity
of each topic. Several of the topics discovered by TEAM on
this corpus correlate well with signiﬁcant historical events.

2. RELATED WORK
The TEAM model is closely related to BigClam [21], a
bipartite aﬃliation network model [12, 22] for overlapping
community detection. In bipartite aﬃliation network mod-
els, the nodes of the network and the set of community nodes
comprise the two disjoint sets of vertices of a bipartite graph.
The edges between network nodes and community nodes
represent the aﬃliation of the node with the community. If
the graph is weighted, the weight of the edge corresponds
to the strength of the node’s community aﬃliation. The
observed edges between the nodes of the network are con-
sidered to be generated from the latent community aﬃlia-

t = t0t = t1tions of the nodes. Our temporal aﬃliation model, described
in Sec. 3, is a natural extension of the aﬃliation model in-
troduced in [21] to temporal graph sequences. Unlike Big-
Clam, which is speciﬁc to unweighted graphs, TEAM takes
as input graphs with positive integer edge weights.

In analogy with the non-negative matrix factorization (NMF)
[14] interpretation of the BigClam method, TEAM admits
a non-negative tensor factorization (NTF) [10] interpreta-
tion. The sequence of adjacency matrices over time can be
regarded as a 3rd-order tensor with two “spatial” dimensions
over the space of nodes and one temporal dimension. There
has been previous work where the NTF of the adjacency ten-
sor is used for analyzing community activity over time [1, 4].
However, the direct NTF of the adjacency tensor is not eas-
ily interpretable. In the following we describe a variant of
NTF that admits a simple probabilistic interpretation.
3. TEMPORAL AFFILIATION MODEL
We now describe the TEAM generative model for tempo-
ral graph sequences. Let the number of communities K
be given. Given a set of vertices V , at each time step
t = 1, 2, . . . , T , generate a weighted, undirected graph us-
ing the following process. For each pair of vertices (u, v)
and each community k = 1, 2, . . . , K, generate an integer
w(k)
(u, v) from a Poisson distribution with mean AtkFukFvk:

t

w(k)

t

(u, v) ∼ Pois (AtkFukFvk) ,

(1)

where Fuk, Fvk ∈ [0, 1] are the community aﬃliation strengths
between community k and nodes u and v respectively. The
parameter Atk ∈ [0,∞) is the activity of community k at
time t. The community aﬃliation matrix F is the |V | × K
matrix of community aﬃliation strengths, and the tempo-
ral activity matrix A is the T × K matrix of community
activities.

The observed edge weight wt(u, v) is the sum over the weights
corresponding to each community:

K(cid:88)

k=1

wt(u, v) =

(u, v) ∼ Pois

w(k)

t

(cid:32) K(cid:88)

k=1

(cid:33)

AtkFukFvk

,

(2)

since a sum over Poisson random variables is itself a Poisson
random variable.
If wt(u, v) = 0, then there is no edge
between u and v in the graph at time t. All edge weights
are therefore positive integers.

Unlike [19], we do not impose the constraint that(cid:80)

This Poisson process for generating edges is similar to the
process used by Wang et al. [19] in a topic modeling setting.
u Fuk =
1 ∀k, i.e. that the community aﬃliation parameters for each
community deﬁne a multinomial distribution over the set of
nodes. This simpliﬁes our optimization problem and, as we
show in Sec. 6, still yields good results in topic modeling
experiments.

(cid:16)(cid:80)K

weighted undirected graphs. In BigClam, the (unweighted)
edge between nodes u, v is generated if the corresponding
Poisson random variable Xuv takes a positive value: Xuv >
0, Xuv ∼ Pois
. Note that in BigClam, the
community aﬃliation strengths Fuk take values in [0,∞),
whereas in our model the values Fuk are restricted to the
interval [0, 1].

k=1 FukFvk

(cid:17)

With this restriction, the community aﬃliation parameters
are more interpretable by virtue of the following probabilis-
tic interpretation. Each community aﬃliation parameter
Fuk can be interpreted as the probability that node u is
generated by community k in a Bernoulli trial, and each
community activity parameter Atk can be interpreted as
the product of the number of Bernoulli trials for commu-
nity k at time t (denoted Ntk) and the prior probability of
the community at time t (denoted atk): Atk = Ntkatk. To
see this, consider the Poisson distribution in Eq. 1 as an ap-
proximation to a binomial distribution Bin(Ntk, atkFukFvk):
the edge weight w(k)
(u, v) corresponding to community k is
simply the number of successes after Ntk independent trials.
For example, consider a sequence of co-occurence graphs of
terms over a corpus of documents, where edge weights are
given by the number of documents in which a pair of terms
co-occur. Each community corresponds to a topic in the cor-
pus, the F parameters give the probability that a given topic
generates any term, and Ntk is the number of documents at
time t that express topic k.

t

As previously mentioned, the TEAM model can be viewed
as a variant of non-negative tensor factorization (NTF) on
the |V | × |V | × T adjacency tensor of the observed graph
sequence. However, instead of decomposing the adjacancy
tensor directly, as in a direct application of NTF, we instead
decompose the 3rd-order tensor of Poisson mean parameters
corresponding to the Poisson random variable for each pair
of nodes at each time step.

4. LEARNING

4.1 Objective
The parameters F and A are learned from an input sequence
of T undirected graphs G = {G(V1, E1), . . . , G(VT , ET )} rep-
resenting snapshots of a network at discrete time steps. Let
t=1 Vt denote the set of vertices over the entire graph

V =(cid:83)T

sequence.

We maximize the regularized log-likelihood of the observed
graph sequence G. From Eq. 2, the distribution of the edge
weight wt(u, v) at time t between nodes u and v is:

Pr[wt(u, v) = y] =

λt(u, v)y

y!

exp (−λt(u, v)) ,

(3)

where:

K(cid:88)

λt(u, v) =

AtkFukFvk.

(4)

Our model is a natural extension of the BigClam commu-
nity aﬃliation model for static networks [21] to sequences of

Therefore, the log-likelihood of the data G given the param-

k=1

(cid:32)
T(cid:88)
(cid:88)

t=1

λt(u, v)

eters F, A is:

(cid:96)(G; F, A) =

− (cid:88)
wt(u, v) log λt(u, v) − log(cid:0)wt(u, v)!(cid:1)(cid:17)(cid:33)
(cid:16)
log(cid:0)wt(u, v)!(cid:1) term since it has no dependence on F or A.

(5)
When computing the log-likelihood in practice, we omit the

(u,v)∈Et

pairs(u,v)

+

.

O(K|V |) (in particular, without iterating over all pairs of
vertices) by using the observation that:

(cid:32)(cid:18)(cid:88)

(cid:19)2 −(cid:88)

Fv

v

v

(cid:33)

F 2
v

,

(9)

where the square is taken pointwise over the elements of
each vector. Similarly, the log-likelihood can be computed
. The total time complexity of each
in time O

(cid:18)

|V | +(cid:80)T

(cid:19)(cid:19)
t=1 |Et|

iteration is therefore O

K

. This is ef-

(cid:88)

Fu ◦ Fv =

1
2

pairs(u,v)

(cid:16)

t=1 |Et|(cid:17)
K(cid:80)T
(cid:18)

In order to encourage sparsity in the F parameters, we add
an L1 regularization penalty to the objective. To encourage
smoothness of community activities over time, we add an L2
regularization penalty on the diﬀerence between temporally
adjacent A parameters. The full cost function C(F, A;G) is
then given by:

C(F, A;G) = − (cid:96)(G; F, A)

(cid:88)

u∈V

+λ1

(cid:107)Fu(cid:107)1 +

1
2

λ2

T−1(cid:88)

t=1

(cid:107)At+1 − At(cid:107)2
2,

(6)

where (cid:96)(G; F, A) is the log-likelihood deﬁned in Eq. 5, and
λ1 and λ2 are hyperparameters. In our experiments, we use
λ1 = 102 and λ2 = 104.

4.2 Optimization
To optimize this objective, we use projected gradient de-
scent with adaptive per-parameter learning rates computed
using AdaGrad [3]. To avoid numerical issues with vanish-
ing λt(u, v) values, we set a small, nonzero minimum value 
for the parameters F and A. In our experiments, we set the
AdaGrad parameter η to 0.1 and  to 10−10. After each gra-
dient update, the F parameters are projected back onto the
feasible set [, 1] and the A parameters are projected onto
[,∞).
Let X ◦ Y denote the pointwise (Hadamard) product and
Nt(u) the set of neighbors of u at time t. The gradient for
Fu is:

T(cid:88)

t=1

(cid:32)(cid:88)

v(cid:54)=u

Fv − (cid:88)

v∈Nt(u)

∇Fu C =

At ◦

wt(u, v)
λt(u, v)

Fv

+ λ1.

(7)

(cid:33)

The gradient for At is:
∇At C =

Fu ◦ Fv − (cid:88)

(cid:88)
(cid:16)

pairs(u,v)

+ λ2

wt(u, v)
λt(u, v)

Fu ◦ Fv

(u,v)∈Et

1{t > 1}(At − At−1) + 1{t < T}(At − At+1)
(8)

where 1{x} is the indicator function.

(cid:16)

t=1 |Nt(u)|(cid:17)
K(cid:80)T

computing the value of(cid:80)
by precomputing the value of(cid:80)

In each iteration, we alternate between F and A, ﬁrst updat-
ing all rows of F , then updating all rows of A. The gradient
by pre-
for Fu can be computed in time O
v Fv at the start of each iteration,
while the gradient for At can be computed in time O (K|Et|)
pairs(u,v) Fu ◦ Fv at the start
of each iteration. This quantity can be computed in time

ﬁcient if the input graphs are sparse, as is the case for most
real-world networks.

To initialize F , we set each entry to a random value uni-
formly distributed over [0.25, 0.75]. To initialize A, we set
each entry to a random value uniformly distributed over
[0.75, 1.25].

In our implementation, we terminate the optimization when
the relative change in the objective falls below 10−3. The
log-likelihood is computed after every 10 iterations to check
for convergence.

5. COMMUNITY HIERARCHIES
Many networks derived from real-world data exhibit a hier-
archical community structure. For example, a social network
of undergraduate students can be composed of communi-
ties corresponding to each class year, which in turn can be
further decomposed into sub-communities corresponding to
academic concentrations.

Our community detection method allows for a simple post-
processing step that builds a hierarchy over the communities
discovered in the learning step. Each of the K columns of
the community aﬃliation matrix F is a vector in [0, 1]|V |.
To construct a community hierarchy, we use complete-link
hierarchical agglomerative clustering over the columns of F .
The metric over the vector space of communities is the co-
sine distance. We refer to clusters of communities as super-
communities. The temporal activity of a supercommunity
is deﬁned as the mean of the columns of A corresponding
to the communities that comprise the supercommunity. To
our knowledge, this application of hierarchical agglomera-
tive clustering is a novel method for constructing post-hoc
community hierarchies.

This method is not limited to clustering the node aﬃliation
strengths for each community. Instead, each community can
be represented by a linear combination Zk of an F column
and an A column:

Zk = αF∗k + (1 − α)A∗k,

(10)
where α ∈ [0, 1] is a parameter that trades oﬀ between the
“spatial” F component and the “temporal” A component.
We can therefore construct spatio-temporal hierarchies that
can be used, for example, to study which communities tend
to co-occur in time. In our experiments, we only consider
fully spatial clustering (α = 1), but spatio-temporal commu-
nity hierarchies are nonetheless an interesting line of future
work.

(cid:17)

Term Aﬃliation Score

students
school
education
religious
schools
court
religion
bush
science
evolution

0.944695
0.942791
0.939966
0.937476
0.927772
0.915907
0.900700
0.679902
0.615520
0.571594

Figure 2: Percentage diﬀerence in average F1 of
communities discovered by TEAM relative to Big-
Clam on subsampled DBLP co-authorship graphs.

Table 1: Terms and aﬃliation scores for an example
community.

6. EXPERIMENTS
6.1 Evaluation using Ground-Truth
We evaluate the communities detected by TEAM by com-
paring them against ground-truth communities. Speciﬁcally,
we use the co-authorship network derived from the DBLP
dataset [13], where ground-truth communities correspond to
conferences and journals.

In our evaluation, we use DBLP journal and conference data
from 1974 to 2004. The full co-authorship network is sub-
sampled using a similar subsampling technique as described
in [21]. We select a random author u who belongs to at
least 2 communities, and create a subgraph by sampling only
other authors v that share at least one ground truth commu-
nity with u. Furthermore, to ensure a connected graph, only
those v that belong to the connected component with u are
subsampled. Note that TEAM only takes a single graph as
input (as opposed to a graph sequence) in our comparisons
with BigClam.

We evaluate the discovered communities using the average
F1 score. Given the ground truth communities Ci ∈ C∗
and the set of detected communities ˆCi ∈ ˆC, the average F1
score is:

(cid:32)

(cid:88)
(cid:16)

Ci∈C∗

1
|C∗|

(cid:88)

ˆCi∈ ˆC

F 1

Ci, ˆCg(i)

(cid:16)

(cid:17)

(cid:17)(cid:33)

,

F 1

Cg(cid:48)(i), ˆCi

F1avg(C

∗

, ˆC) =

1
2

+

1
| ˆC|

where:

(11)

(12)

(13)

(14)

g(i) = arg max
(cid:48)

(i) = arg max

j

g

j

F1(Ci, ˆCj),

F1(Cj, ˆCi).

We ﬁrst compare our results with those of BigClam [21].
Since it is inherently easier to discover communities in cer-
tain subsampled graphs, we calculate the percent diﬀer-
ence in average F1 scores between our model and BigClam:
(F1TEAM
. We evaluated on diﬀerent
numbers of ground-truth communities, sampling 20 graphs
for each community count.

avg − F1BigClam

)/F1BigClam

avg

avg

As evident in ﬁgure 2, the percent diﬀerences between our
model and BigClam are very small (2-3%), suggesting that
our model discovers communities of comparable quality.

6.2 Dynamic Topic Modeling
Statistical topic models such as Latent Dirichlet Allocation
[2] discover distributions over words — topics — that are
posited to generate terms in the documents that comprise a
corpus. Dynamic topic models [20, 18] incorporate tempo-
ral information in the form of document timestamps to infer
latent topics and their evolution over time. Unfortunately,
these probabilistic latent variable models suﬀer from issues
of scalability, since each iteration of learning (for example,
using the EM algorithm) requires approximate probabilis-
tic inference via variational inference or Gibbs sampling to
estimate the expected distribution over the variables of the
model.

We attempt to address the problem of scalability by formu-
lating the problem of dynamic topic modeling as a temporal
community detection problem over co-occurrence graphs of
terms. Each term co-occurrence graph is derived from doc-
uments in a corpus that fall in a given time slice, where the
edge weight between two terms is the number of documents
in which the two terms co-occur.

We apply our method to politics news articles (i.e., articles
human-annotated with the tag “politics”) from the New York
Times Annotated Corpus [17], which consists of 20 years of
New York Times newswire from 1987 to 2007. The entire
16 GB dataset contains roughly 160,000 politics articles.

We generate co-occurrence graphs with a one-week temporal
resolution. For each document in the time slice, the top-
20 terms ranked by tf-idf score are used to construct the
co-occurrence graph. This results in a sequence of 1,067
graphs over which we perform the optimization. Finding
128 communities takes roughly 5 hours using 16 cores.

After convergence, we have a term-community aﬃliation
score in the interval [0, 1] for each term in our vocabulary,
and for each community detected. We then run a post-
processing step to extract and score representative phrases
for each community.

6.2.1 Phrase Extraction and Scoring

46810number of communities−2−101234percent F1 differenceFigure 3: A community hierarchy over topics expressed in New York Times politics articles. Communities
are clustered using complete-link hierarchical agglomerative clustering with cosine distance.

The top-ranked terms (in terms of term-community aﬃl-
iation strength) provide a concise way to represent each
discovered community. Unfortunately, communities are not
always easily interpretable from their representative terms
alone. As an example, consider the top ten terms shown
in Table 1. This topic (community) pertains to the debate
over the teaching of evolution in schools. However, indi-
viduals unfamiliar with U.S. politics may ﬁnd it diﬃcult to
deduce this interpretation given only the list of terms.

To improve the interpretability of the discovered topics, we
represent each topic by a ranked list of phrases. Using
the term-community aﬃliation scores learned by TEAM, we
rank phrases extracted directly from documents in the cor-
pus. Each phrase P is represented as a bag-of-words and
scored for each community k as follows:

score(P ) = (P · F∗k)(1 + log |P|),

(15)

where F∗k represents the term-community aﬃliation vector
for community k, and the sublinear scaling term (1+log |P|)
rewards longer phrases, which should be more informative
than shorter ones.

The phrases themselves can be selected in any number of
ways, such as frequent pattern mining, named entity extrac-
tion, or noun phrase extraction. Similar to the approach
taken in [15], we extract noun phrases by ﬁrst perform-
ing part-of-speech tagging, then selecting consecutive terms
whose tags match the following pattern:

(Adj | Noun)* (Noun Prep)? (Adj | Noun)* Noun.

The top ranked phrases extracted for the evolution topic
(Table 1) are listed in Table 2.

6.2.2 Analysis of Temporal Topical Activities
We now examine the temporal activities of several sample
topics and explore our results given the historical context

Score

Phrase
religious school education
private religious school education
students from religious schools
religious education in schools
religious students

1.972859
1.682477
1.676338
1.673517
1.593396
teaching evolution classroom 1.467496

Table 2: Phrases extracted for the community in
Table 1

for the time period covered by the New York Times cor-
pus. Fig. 4 depicts the community activities for a topic
represented by phrases such as religious conservative
republicans, abortion rights amendment, and conserva-
tive supreme court. Here, we observe that the large activ-
ity spike in early 2005 coincides with the introduction of a
large amount of abortion-limiting legislation.

Next, Fig. 5 depicts the learned activities for a topic repre-
sented by phrases such as united nations security coun-
cil resolution on iraq and united nations weapons in-
spectors. For this topic, the large spike in early 2002 occurs
shortly after the September 11 terrorist attacks. Around
this time, George W. Bush began eﬀorts to enact sanctions
against Iraq over the alleged development and possession of
weapons of mass destruction.

As a ﬁnal example, consider Fig. 6, which depicts temporal
topical activities for a topic represented by phrases such as
east germany and east german communist party. Here,
the spike in activity around 1990 coincides with the fall of
the Berlin Wall. We also observe a minor spike which occurs
much later in the activity plot. This smaller spike in activ-
ity coincides with the publication of an article describing a
memorial at the site of the original wall, commemorating its
destruction as a symbolic “lifting of the Iron Curtain”.

6.2.3 Analysis of Topical Hierarchy

clintonconventionperotnigeriarefugeeshaitibrazilrussianaquinobushdukakischinasovietsovietpartymoscowgermanyrefugeesclintoneasttimorbushbushkerryclintoniraqmayorcityclintondolemayorcitybushcityiraqmayorbushclintongoregiulianimccainrepublicanscitycuomogovernormayorcourtafricaafricanblacknationstaiwanchinabeijingdemocracycosine distancepeacenationspalestinianmoscowindiapakistanrebelsgandhiFig. 3 depicts a topical hierarchy constructed using the afore-
mentioned complete-link agglomerative clustering method.
Broadly speaking, the left-most hierarchies correspond with
international news. To the right of this, we have more U.S.-
centric articles.
In particular, the green clusters coincide
with news local to New York City. This topical hierarchy
provides an easily interpretable global view of the topics ex-
pressed in the corpus.

7. CONCLUSION
In this paper, we introduce a novel community detection
method, TEAM, for temporal graph sequences. A promis-
ing application of the method is dynamic topic modeling on
large corpora, as evidenced by our analysis of topical hier-
archies in a corpus of New York Times articles.

Further evaluation of the method on other datasets with
ground truth is needed. In particular, it would be useful to
compare TEAM with other methods in terms of (a) evalu-
ation on ground-truth data, and (b) speed and algorithmic
complexity. The aforementioned quantities could be used
to evaluate any potential tradeoﬀs when including temporal
information for the purpose of community detection.

Next, for datasets for which ground truth is not available,
user-studies on phrase representations of the extracted topi-
cal clusters for qualities such as completeness, purity, and
phraseness (described further in [19]) would help further
evaluate the beneﬁt of our method as a tool for informa-
tion retrieval.

In addition, further exploration is needed regarding the time-
space tradeoﬀ in construction of spatio-temporal hierarchical
clusters. In this paper, we only consider agglomerative con-
struction of hierarchies on the spatial components of bottom-
level clusters.

Finally, when performing phrase extraction, we currently
do not use the term-community activities in any way for
phrase ranking. Incorporating such information could help
improve the rankings of phrases more salient to the partic-
ular topic(s) under consideration.

8. ACKNOWLEDGMENTS
We thank Rok Sosic and Jure Leskovec for helpful discus-
sions and suggestions over the course of this project.

9. REFERENCES
[1] B. W. Bader, R. A. Harshman, and T. G. Kolda.

Temporal analysis of semantic graphs using asalsan. In
Data Mining, 2007. ICDM 2007. Seventh IEEE
International Conference on, pages 33–42. IEEE, 2007.

[2] D. M. Blei, A. Y. Ng, and M. I. Jordan. Latent

dirichlet allocation. the Journal of Machine Learning
Research, 3:993–1022, 2003.

[3] J. Duchi, E. Hazan, and Y. Singer. Adaptive

subgradient methods for online learning and stochastic
optimization. The Journal of Machine Learning
Research, 12:2121–2159, 2011.

[4] L. Gauvin, A. Panisson, and C. Cattuto. Detecting

the community structure and activity patterns of

Figure 4: Activities for abortion legislation commu-
nity

Figure 5: Activities for Iraqi weapons inspection
community

Figure 6: Activities for East Germany community

0.000.050.100.150.200.25Activity2005:Manyabortion-relatedbillsAbortionBillsTopicalActivities198719891991199319951997199920012003200520070.00.10.20.30.4ActivityunitednationsweaponsinspectorsiniraqIraqTopicalActivities198719891991199319951997199920012003200520070.00.10.20.30.4ActivityJuly2005Removalofcrosses1990–BerlinWalldestroyedEasternGermanyTopicalActivity19871989199119931995199719992001200320052007Data Mining, pages 424–433. ACM, 2006.

[21] J. Yang and J. Leskovec. Overlapping community

detection at scale: a nonnegative matrix factorization
approach. In Proceedings of the sixth ACM
International Conference on Web Search and Data
Mining, pages 587–596. ACM, 2013.

[22] E. Zheleva, H. Sharara, and L. Getoor. Co-evolution

of social and aﬃliation networks. In Proceedings of the
15th ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining, pages
1007–1016. ACM, 2009.

temporal networks: a non-negative tensor factorization
approach. PLOS ONE, 9(1):e86028, 2014.

[5] F. Guo, S. Hanneke, W. Fu, and E. P. Xing.
Recovering temporally rewiring networks: A
model-based approach. In Proceedings of the 24th
International Conference on Machine Learning, pages
321–328. ACM, 2007.

[6] J.-D. J. Han, N. Bertin, T. Hao, D. S. Goldberg, G. F.

Berriz, L. V. Zhang, D. Dupuy, A. J. Walhout, M. E.
Cusick, F. P. Roth, et al. Evidence for dynamically
organized modularity in the yeast protein–protein
interaction network. Nature, 430(6995):88–93, 2004.

[7] S. Hanneke, W. Fu, E. P. Xing, et al. Discrete

temporal models of social networks. Electronic Journal
of Statistics, 4:585–605, 2010.

[8] B. Klimt and Y. Yang. The enron corpus: A new

dataset for email classiﬁcation research. In Machine
Learning: ECML 2004, pages 217–226. Springer, 2004.

[9] M. Kolar, L. Song, A. Ahmed, E. P. Xing, et al.

Estimating time-varying networks. The Annals of
Applied Statistics, 4(1):94–123, 2010.

[10] T. G. Kolda and B. W. Bader. Tensor decompositions

and applications. SIAM review, 51(3):455–500, 2009.
[11] A. Lakhina, K. Papagiannaki, M. Crovella, C. Diot,
E. D. Kolaczyk, and N. Taft. Structural analysis of
network traﬃc ﬂows, volume 32. ACM, 2004.

[12] S. Lattanzi and D. Sivakumar. Aﬃliation networks. In

Proceedings of the 41st Annual ACM Symposium on
Theory of Computing, pages 427–434. ACM, 2009.

[13] M. Ley. The dblp computer science bibliography:
Evolution, research issues, perspectives. In String
Processing and Information Retrieval, pages 1–10.
Springer, 2002.

[14] C.-J. Lin. Projected gradient methods for nonnegative

matrix factorization. Neural computation,
19(10):2756–2779, 2007.

[15] E. Loper and S. Bird. Nltk: The natural language

toolkit. In Proceedings of the ACL-02 Workshop on
Eﬀective Tools and Methodologies for Teaching
Natural Language Processing and Computational
Linguistics - Volume 1, ETMTNLP ’02, pages 63–70,
Stroudsburg, PA, USA, 2002. Association for
Computational Linguistics.

[16] R. K. Pan and J. Saram¨aki. Path lengths, correlations,

and centrality in temporal networks. Physical Review
E, 84(1):016105, 2011.

[17] E. Sandhaus. The new york times annotated corpus

ldc2008t19, 2008.

[18] C. Wang, D. Blei, and D. Heckerman. Continuous

time dynamic topic models. arXiv preprint
arXiv:1206.3298, 2012.

[19] C. Wang, M. Danilevsky, N. Desai, Y. Zhang,

P. Nguyen, T. Taula, and J. Han. A phrase mining
framework for recursive construction of a topical
hierarchy. In Proceedings of the 19th ACM SIGKDD
International Conference on Knowledge Discovery and
Data Mining, pages 437–445. ACM, 2013.

[20] X. Wang and A. McCallum. Topics over time: a

non-markov continuous-time model of topical trends.
In Proceedings of the 12th ACM SIGKDD
International Conference on Knowledge Discovery and

