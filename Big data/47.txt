C O V E R   F E A T U R E

E-Business Process 
Modeling: The 
Next Big Step 

The authors propose a Process Coordination Framework for Web services
and outline the building blocks required for e-business automation. Their
framework helps in understanding the roles of various standards and in
identifying overlaps, gaps, and opportunities for convergence.

business so far. Businesses realize that the cost of
automating transactions with trading partners is very
high. Standards and technologies for modeling e-busi-
ness processes that use Web services could drive the
costs down by achieving automated code generation,
reuse, and interoperability—facilitating communica-
tion between business analysts and implementers.

Our proposed Process Coordination Framework
outlines the building blocks required for Web ser-
vices-enabled e-business automation. PCF helps in
understanding the roles of the various proposed
standards with respect to these building blocks and
in identifying both overlaps and gaps. 

PROCESS COORDINATION FRAMEWORK 

As Figure 1 shows, PCF groups the features that
e-business automation requires into a multilayered
stack. 

• Service  description  and  transport  binding.
Service description provides metalevel data for
services and their operations; transport bind-
ings tie abstract service descriptions to speciﬁc
physical addresses such as HTTP or SMTP sta-
tically at design time or dynamically at run-
time.

• End point description. This layer describes
aspects such as quality of service (QoS), service
location, provider information, and service cost
that can inﬂuence a customer’s decision to use
the Web service.

• Public  collaborative  process.  This  process
describes the sequence or choreography of the

Selim Aissi
Pallavi Malu
Krishnamurthy
Srinivasan

Intel Labs T he Internet is emerging as the platform for

automating both the provider and con-
sumer ends of e-business transactions. In
this new model, businesses offer Web ser-
vices that applications running in other
businesses could invoke automatically, building
bridges  between  systems  that  otherwise  would
require  extensive  integration  and  development
efforts. Web services are software components that
use standard Internet technologies to interact with
one another dynamically. 

In spite of the signiﬁcant potential beneﬁts, only a
few large businesses have implemented automated e-

Contracts/
agreement

Private
process

y
t
i
r
u
c
e
S

Public

collaborative

process

End point
description

Service

description and
transport binding

ebXML
CPA

XLANG

BPML

WSFL

WSEL

WSDL

WSCL

ebXML
BPSS

ebXML
CPP

Figure 1. Process Coordination Framework. PCF groups features required for e-
business automation along with relevant speciﬁcations into a multilayered stack.

0018-9162/02/$17.00 © 2002 IEEE

May 2002

55

C O V E R   F E A T U R E

E-Business Process 
Modeling: The 
Next Big Step 

The authors propose a Process Coordination Framework for Web services
and outline the building blocks required for e-business automation. Their
framework helps in understanding the roles of various standards and in
identifying overlaps, gaps, and opportunities for convergence.

business so far. Businesses realize that the cost of
automating transactions with trading partners is very
high. Standards and technologies for modeling e-busi-
ness processes that use Web services could drive the
costs down by achieving automated code generation,
reuse, and interoperability—facilitating communica-
tion between business analysts and implementers.

Our proposed Process Coordination Framework
outlines the building blocks required for Web ser-
vices-enabled e-business automation. PCF helps in
understanding the roles of the various proposed
standards with respect to these building blocks and
in identifying both overlaps and gaps. 

PROCESS COORDINATION FRAMEWORK 

As Figure 1 shows, PCF groups the features that
e-business automation requires into a multilayered
stack. 

• Service  description  and  transport  binding.
Service description provides metalevel data for
services and their operations; transport bind-
ings tie abstract service descriptions to speciﬁc
physical addresses such as HTTP or SMTP sta-
tically at design time or dynamically at run-
time.

• End point description. This layer describes
aspects such as quality of service (QoS), service
location, provider information, and service cost
that can inﬂuence a customer’s decision to use
the Web service.

• Public  collaborative  process.  This  process
describes the sequence or choreography of the

Selim Aissi
Pallavi Malu
Krishnamurthy
Srinivasan

Intel Labs T he Internet is emerging as the platform for

automating both the provider and con-
sumer ends of e-business transactions. In
this new model, businesses offer Web ser-
vices that applications running in other
businesses could invoke automatically, building
bridges  between  systems  that  otherwise  would
require  extensive  integration  and  development
efforts. Web services are software components that
use standard Internet technologies to interact with
one another dynamically. 

In spite of the signiﬁcant potential beneﬁts, only a
few large businesses have implemented automated e-

Contracts/
agreement

Private
process

y
t
i
r
u
c
e
S

Public

collaborative

process

End point
description

Service

description and
transport binding

ebXML
CPA

XLANG

BPML

WSFL

WSEL

WSDL

WSCL

ebXML
BPSS

ebXML
CPP

Figure 1. Process Coordination Framework. PCF groups features required for e-
business automation along with relevant speciﬁcations into a multilayered stack.

0018-9162/02/$17.00 © 2002 IEEE

May 2002

55

<message name="purchaseOrder"> <part name="body" type="xsd1:orderBody"/> </message>
<message name="shipmentNotiﬁcation"> --------- </message>
<message name="payment"> --------- </message>
<message name="error"> --------- </message>
(a)

<portType name="TotalSupplyPortType">

<operation name="processPO">

<input message="tns:purchaseOrder"/>
<output message="tns:shipmentNotiﬁcation"/>
<fault message="tns:error"/>

</operation>
<operation name="processPayment"> --------- </operation>

</portType>
(b)

<binding name="TotalSupplySoapBinding" type="tns:TotalSupplyPortType">
<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http/">
<operation name="processPO">

<soap:operation soapAction="http://example.com/processPO"/>

<input> <soap:body use="literal"/> </input>
<output> --------- </output>
<fault> <soap:fault use="literal"/> </fault>

</operation>
</binding>
(c)

<service name="TotalSupplyService">

<documentation> TotalSupply service</documentation>
<port name="TotalSupplyPort" binding="tns: TotalSupplySoapBinding">

<soap:address location="http://example.com/TotalSupply"/>

</port>
</service>
(d)

Figure 2. WSDL deﬁ-
nition of TotalSup-
ply: (a) schema ﬁle
TotalSupply.xsd
deﬁning a class of
XML documents; (b)
portType element
grouping the opera-
tion and related
messages together;
(c) binding element
deﬁning the network
protocol details for
the operation; (d)
service element
grouping related
ports together.

operations  the  Web  service  supports.  For
example, if the service supports operations
including Login and Check Balance, the pub-
lic collaborative process speciﬁes that the user
needs to log in before checking the balance to
avoid errors.

• Private process. This layer describes internal
executable business processes that support the
Web service’s public collaborative process.

• Contracts/agreement. The actual technical and
legal agreements under which entities conduct
business reside in this layer. The technical con-
tract between the entities includes the exact
details of how the parties use their informa-
tion technology (IT) infrastructure to transact
the  business  at  hand.  The  legal  contract
includes agreements on the terms and condi-
tions  of  the  business  exchange.  Having  an
XML-based syntax to specify contracts helps
applications automatically interact without
human intervention. However, XML does not
currently incorporate many of these defini-
tions.

• Security. Security requirements include a com-
bination of the following features: authoriza-
tion,  authentication,  confidentiality,  non-
repudiation, and auditing. Various PCF layers
may require different aspects of security. Any
exchange of business information may require
all, some, or no security features.

SPECIFICATIONS IN THE PCF SPACE

A simple example of a composite Web service
provided in IBM’s Web Services Flow Language
(http://www-4.ibm.com/software/solutions/web
services/pdf/WSFL.pdf) helps to understand the
speciﬁcations and the features they support. In this
example, TotalSupply service leverages two other
Web services: mySupplier as a source for products
and myShipper to distribute them. These two Web
services use the Web Services Description Language.

Web Services Description Language 

WSDL  is  an  XML-based  speciﬁcation  that
describes Web services as collections of message-
enabled operations and was submitted to the World

56

Computer

C O V E R   F E A T U R E

E-Business Process 
Modeling: The 
Next Big Step 

The authors propose a Process Coordination Framework for Web services
and outline the building blocks required for e-business automation. Their
framework helps in understanding the roles of various standards and in
identifying overlaps, gaps, and opportunities for convergence.

business so far. Businesses realize that the cost of
automating transactions with trading partners is very
high. Standards and technologies for modeling e-busi-
ness processes that use Web services could drive the
costs down by achieving automated code generation,
reuse, and interoperability—facilitating communica-
tion between business analysts and implementers.

Our proposed Process Coordination Framework
outlines the building blocks required for Web ser-
vices-enabled e-business automation. PCF helps in
understanding the roles of the various proposed
standards with respect to these building blocks and
in identifying both overlaps and gaps. 

PROCESS COORDINATION FRAMEWORK 

As Figure 1 shows, PCF groups the features that
e-business automation requires into a multilayered
stack. 

• Service  description  and  transport  binding.
Service description provides metalevel data for
services and their operations; transport bind-
ings tie abstract service descriptions to speciﬁc
physical addresses such as HTTP or SMTP sta-
tically at design time or dynamically at run-
time.

• End point description. This layer describes
aspects such as quality of service (QoS), service
location, provider information, and service cost
that can inﬂuence a customer’s decision to use
the Web service.

• Public  collaborative  process.  This  process
describes the sequence or choreography of the

Selim Aissi
Pallavi Malu
Krishnamurthy
Srinivasan

Intel Labs T he Internet is emerging as the platform for

automating both the provider and con-
sumer ends of e-business transactions. In
this new model, businesses offer Web ser-
vices that applications running in other
businesses could invoke automatically, building
bridges  between  systems  that  otherwise  would
require  extensive  integration  and  development
efforts. Web services are software components that
use standard Internet technologies to interact with
one another dynamically. 

In spite of the signiﬁcant potential beneﬁts, only a
few large businesses have implemented automated e-

Contracts/
agreement

Private
process

y
t
i
r
u
c
e
S

Public

collaborative

process

End point
description

Service

description and
transport binding

ebXML
CPA

XLANG

BPML

WSFL

WSEL

WSDL

WSCL

ebXML
BPSS

ebXML
CPP

Figure 1. Process Coordination Framework. PCF groups features required for e-
business automation along with relevant speciﬁcations into a multilayered stack.

0018-9162/02/$17.00 © 2002 IEEE

May 2002

55

<message name="purchaseOrder"> <part name="body" type="xsd1:orderBody"/> </message>
<message name="shipmentNotiﬁcation"> --------- </message>
<message name="payment"> --------- </message>
<message name="error"> --------- </message>
(a)

<portType name="TotalSupplyPortType">

<operation name="processPO">

<input message="tns:purchaseOrder"/>
<output message="tns:shipmentNotiﬁcation"/>
<fault message="tns:error"/>

</operation>
<operation name="processPayment"> --------- </operation>

</portType>
(b)

<binding name="TotalSupplySoapBinding" type="tns:TotalSupplyPortType">
<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http/">
<operation name="processPO">

<soap:operation soapAction="http://example.com/processPO"/>

<input> <soap:body use="literal"/> </input>
<output> --------- </output>
<fault> <soap:fault use="literal"/> </fault>

</operation>
</binding>
(c)

<service name="TotalSupplyService">

<documentation> TotalSupply service</documentation>
<port name="TotalSupplyPort" binding="tns: TotalSupplySoapBinding">

<soap:address location="http://example.com/TotalSupply"/>

</port>
</service>
(d)

Figure 2. WSDL deﬁ-
nition of TotalSup-
ply: (a) schema ﬁle
TotalSupply.xsd
deﬁning a class of
XML documents; (b)
portType element
grouping the opera-
tion and related
messages together;
(c) binding element
deﬁning the network
protocol details for
the operation; (d)
service element
grouping related
ports together.

operations  the  Web  service  supports.  For
example, if the service supports operations
including Login and Check Balance, the pub-
lic collaborative process speciﬁes that the user
needs to log in before checking the balance to
avoid errors.

• Private process. This layer describes internal
executable business processes that support the
Web service’s public collaborative process.

• Contracts/agreement. The actual technical and
legal agreements under which entities conduct
business reside in this layer. The technical con-
tract between the entities includes the exact
details of how the parties use their informa-
tion technology (IT) infrastructure to transact
the  business  at  hand.  The  legal  contract
includes agreements on the terms and condi-
tions  of  the  business  exchange.  Having  an
XML-based syntax to specify contracts helps
applications automatically interact without
human intervention. However, XML does not
currently incorporate many of these defini-
tions.

• Security. Security requirements include a com-
bination of the following features: authoriza-
tion,  authentication,  confidentiality,  non-
repudiation, and auditing. Various PCF layers
may require different aspects of security. Any
exchange of business information may require
all, some, or no security features.

SPECIFICATIONS IN THE PCF SPACE

A simple example of a composite Web service
provided in IBM’s Web Services Flow Language
(http://www-4.ibm.com/software/solutions/web
services/pdf/WSFL.pdf) helps to understand the
speciﬁcations and the features they support. In this
example, TotalSupply service leverages two other
Web services: mySupplier as a source for products
and myShipper to distribute them. These two Web
services use the Web Services Description Language.

Web Services Description Language 

WSDL  is  an  XML-based  speciﬁcation  that
describes Web services as collections of message-
enabled operations and was submitted to the World

56

Computer

<ConversationInteractions>

<Interaction StepType="ReceiveSend" id="ProcessPO">

<InboundXMLDocuments>

<InboundXMLDocument id="PurchaseOrder"

hrefSchema="PO.xsd"/>

</InboundXMLDocuments>

<OutboundXMLDocuments>

<OutboundXMLDocument id="Shipment"

hrefSchema="Shipment.xsd"/>

</OutboundXMLDocuments>

</Interaction>
<Interaction StepType="Receive" id="ProcessPayment"> --------- </Interaction>
</ConversationInteractions>

<ConversationTransitions>

<Transition>

<SourceInteration href="#ProcessPO"/>
<DestinationInteraction href="#ProcessPayment"/>

<TriggeringDocument href="#Shipment"/>

</Transition>
</ConversationTransitions>

Figure 3. Web Ser-
vices Conversation
Language deﬁning
conversations
between service
providers and con-
sumers. The Transi-
tion attribute
deﬁnes the ordering
between the
processPO and
processPayment
interactions.

Wide Web consortium (W3C) by Ariba, IBM, and
Microsoft (http://www.w3.org/TR/wsdl). WSDL
provides the information needed to invoke an oper-
ation in an application running in a third-party loca-
tion on the Internet, including the operation name,
input/output parameters and their data types, the
network protocol, and the network address. 

Dissecting the deﬁnition of TotalSupply helps to
understand the details of WSDL. The service sup-
ports  two  operations:  processPO  and  process-
Payment. This example assumes that the service is
deployed using the SOAP protocol (http://www.
w3.org/TR/SOAP/) over HTTP. The WSDL file
begins with an element having attributes that deﬁne
the  TotalSupply  service,  the  target  namespace
(http://example.com/TotalSupply.wsdl), and other
namespaces. The types element defines the data
type  of  the  input/output  messages  that  are
exchanged during the operation. You can use stan-
dard XML data types such as string, integer, and
ﬂoat, or you can create complex data types.

TotalSupply supports four data types: orderBody,
notiﬁcationBody, paymentBody, and errorBody. It
also supports four types of single-part messages:
two input messages, purchaseOrder and payment;
one output message, shipmentNotiﬁcation; and an
error message. To keep the example simple, we
deﬁne a class of XML documents within a separate
schema ﬁle, TotalSupply.xsd, as Figure 2a shows.
The references to the user-deﬁned types use xsd1
as a namespace preﬁx to qualify their use. The mes-
sage element deﬁnes the exchanged data. Messages
can consist of one or more logical parts, each with
an associated data type. 

The portType element in Figure 2b groups the
operation and related messages together. This ele-
ment currently supports four types of operation:

one-way, request-response, solicit response, and
notiﬁcation. TotalSupply Web service supports two
request-response  operations:  processPO  and
processPayment. The binding element in Figure 2c
deﬁnes the network protocol details for the opera-
tion, SOAP over an HTTP transport in this exam-
ple. Where the port element deﬁnes a single network
address (http://example.com/TotalSupply), the ser-
vice  element  in  Figure  2d  groups  related  ports
together in our example Web service. 

Web Services Conversation Language 

Hewlett-Packard developed the Web Services
Conversation Language (WSCL), an XML-based
speciﬁcation layered on top of WSDL, for use in
deﬁning conversations between service providers
and consumers. WSCL was submitted to the W3C
(http://www.w3.org/TR/wscl10/). 

Figure 3 shows a WSCL conversation for our
TotalSupply  Web  service.  The  initialInteraction
attribute speciﬁes the ﬁrst interaction—equivalent to
operation in WSDL—in the sequence. The Transition
attribute deﬁnes the ordering between the processPO
and processPayment interactions. The conversation
proceeds from one interaction to another according
to the legally deﬁned transitions. Transition is unique
to  WSCL,  whereas  Interaction  and  Inbound/
Outbound XML documents overlap with WSDL. 

ebXML

The United Nations (UN/CEFACT) and OASIS
sponsored the ebXML specifications for use in 
e-business frameworks. 

ebXML  Business  Process  Specification  Schema.
ebXML BPSS (http://www.ebxml.org/specs/ebBPSS.
doc) is a proposed standard for specifying collab-
orations for use in exchanging business documents

May 2002

57

C O V E R   F E A T U R E

E-Business Process 
Modeling: The 
Next Big Step 

The authors propose a Process Coordination Framework for Web services
and outline the building blocks required for e-business automation. Their
framework helps in understanding the roles of various standards and in
identifying overlaps, gaps, and opportunities for convergence.

business so far. Businesses realize that the cost of
automating transactions with trading partners is very
high. Standards and technologies for modeling e-busi-
ness processes that use Web services could drive the
costs down by achieving automated code generation,
reuse, and interoperability—facilitating communica-
tion between business analysts and implementers.

Our proposed Process Coordination Framework
outlines the building blocks required for Web ser-
vices-enabled e-business automation. PCF helps in
understanding the roles of the various proposed
standards with respect to these building blocks and
in identifying both overlaps and gaps. 

PROCESS COORDINATION FRAMEWORK 

As Figure 1 shows, PCF groups the features that
e-business automation requires into a multilayered
stack. 

• Service  description  and  transport  binding.
Service description provides metalevel data for
services and their operations; transport bind-
ings tie abstract service descriptions to speciﬁc
physical addresses such as HTTP or SMTP sta-
tically at design time or dynamically at run-
time.

• End point description. This layer describes
aspects such as quality of service (QoS), service
location, provider information, and service cost
that can inﬂuence a customer’s decision to use
the Web service.

• Public  collaborative  process.  This  process
describes the sequence or choreography of the

Selim Aissi
Pallavi Malu
Krishnamurthy
Srinivasan

Intel Labs T he Internet is emerging as the platform for

automating both the provider and con-
sumer ends of e-business transactions. In
this new model, businesses offer Web ser-
vices that applications running in other
businesses could invoke automatically, building
bridges  between  systems  that  otherwise  would
require  extensive  integration  and  development
efforts. Web services are software components that
use standard Internet technologies to interact with
one another dynamically. 

In spite of the signiﬁcant potential beneﬁts, only a
few large businesses have implemented automated e-

Contracts/
agreement

Private
process

y
t
i
r
u
c
e
S

Public

collaborative

process

End point
description

Service

description and
transport binding

ebXML
CPA

XLANG

BPML

WSFL

WSEL

WSDL

WSCL

ebXML
BPSS

ebXML
CPP

Figure 1. Process Coordination Framework. PCF groups features required for e-
business automation along with relevant speciﬁcations into a multilayered stack.

0018-9162/02/$17.00 © 2002 IEEE

May 2002

55

<message name="purchaseOrder"> <part name="body" type="xsd1:orderBody"/> </message>
<message name="shipmentNotiﬁcation"> --------- </message>
<message name="payment"> --------- </message>
<message name="error"> --------- </message>
(a)

<portType name="TotalSupplyPortType">

<operation name="processPO">

<input message="tns:purchaseOrder"/>
<output message="tns:shipmentNotiﬁcation"/>
<fault message="tns:error"/>

</operation>
<operation name="processPayment"> --------- </operation>

</portType>
(b)

<binding name="TotalSupplySoapBinding" type="tns:TotalSupplyPortType">
<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http/">
<operation name="processPO">

<soap:operation soapAction="http://example.com/processPO"/>

<input> <soap:body use="literal"/> </input>
<output> --------- </output>
<fault> <soap:fault use="literal"/> </fault>

</operation>
</binding>
(c)

<service name="TotalSupplyService">

<documentation> TotalSupply service</documentation>
<port name="TotalSupplyPort" binding="tns: TotalSupplySoapBinding">

<soap:address location="http://example.com/TotalSupply"/>

</port>
</service>
(d)

Figure 2. WSDL deﬁ-
nition of TotalSup-
ply: (a) schema ﬁle
TotalSupply.xsd
deﬁning a class of
XML documents; (b)
portType element
grouping the opera-
tion and related
messages together;
(c) binding element
deﬁning the network
protocol details for
the operation; (d)
service element
grouping related
ports together.

operations  the  Web  service  supports.  For
example, if the service supports operations
including Login and Check Balance, the pub-
lic collaborative process speciﬁes that the user
needs to log in before checking the balance to
avoid errors.

• Private process. This layer describes internal
executable business processes that support the
Web service’s public collaborative process.

• Contracts/agreement. The actual technical and
legal agreements under which entities conduct
business reside in this layer. The technical con-
tract between the entities includes the exact
details of how the parties use their informa-
tion technology (IT) infrastructure to transact
the  business  at  hand.  The  legal  contract
includes agreements on the terms and condi-
tions  of  the  business  exchange.  Having  an
XML-based syntax to specify contracts helps
applications automatically interact without
human intervention. However, XML does not
currently incorporate many of these defini-
tions.

• Security. Security requirements include a com-
bination of the following features: authoriza-
tion,  authentication,  confidentiality,  non-
repudiation, and auditing. Various PCF layers
may require different aspects of security. Any
exchange of business information may require
all, some, or no security features.

SPECIFICATIONS IN THE PCF SPACE

A simple example of a composite Web service
provided in IBM’s Web Services Flow Language
(http://www-4.ibm.com/software/solutions/web
services/pdf/WSFL.pdf) helps to understand the
speciﬁcations and the features they support. In this
example, TotalSupply service leverages two other
Web services: mySupplier as a source for products
and myShipper to distribute them. These two Web
services use the Web Services Description Language.

Web Services Description Language 

WSDL  is  an  XML-based  speciﬁcation  that
describes Web services as collections of message-
enabled operations and was submitted to the World

56

Computer

<ConversationInteractions>

<Interaction StepType="ReceiveSend" id="ProcessPO">

<InboundXMLDocuments>

<InboundXMLDocument id="PurchaseOrder"

hrefSchema="PO.xsd"/>

</InboundXMLDocuments>

<OutboundXMLDocuments>

<OutboundXMLDocument id="Shipment"

hrefSchema="Shipment.xsd"/>

</OutboundXMLDocuments>

</Interaction>
<Interaction StepType="Receive" id="ProcessPayment"> --------- </Interaction>
</ConversationInteractions>

<ConversationTransitions>

<Transition>

<SourceInteration href="#ProcessPO"/>
<DestinationInteraction href="#ProcessPayment"/>

<TriggeringDocument href="#Shipment"/>

</Transition>
</ConversationTransitions>

Figure 3. Web Ser-
vices Conversation
Language deﬁning
conversations
between service
providers and con-
sumers. The Transi-
tion attribute
deﬁnes the ordering
between the
processPO and
processPayment
interactions.

Wide Web consortium (W3C) by Ariba, IBM, and
Microsoft (http://www.w3.org/TR/wsdl). WSDL
provides the information needed to invoke an oper-
ation in an application running in a third-party loca-
tion on the Internet, including the operation name,
input/output parameters and their data types, the
network protocol, and the network address. 

Dissecting the deﬁnition of TotalSupply helps to
understand the details of WSDL. The service sup-
ports  two  operations:  processPO  and  process-
Payment. This example assumes that the service is
deployed using the SOAP protocol (http://www.
w3.org/TR/SOAP/) over HTTP. The WSDL file
begins with an element having attributes that deﬁne
the  TotalSupply  service,  the  target  namespace
(http://example.com/TotalSupply.wsdl), and other
namespaces. The types element defines the data
type  of  the  input/output  messages  that  are
exchanged during the operation. You can use stan-
dard XML data types such as string, integer, and
ﬂoat, or you can create complex data types.

TotalSupply supports four data types: orderBody,
notiﬁcationBody, paymentBody, and errorBody. It
also supports four types of single-part messages:
two input messages, purchaseOrder and payment;
one output message, shipmentNotiﬁcation; and an
error message. To keep the example simple, we
deﬁne a class of XML documents within a separate
schema ﬁle, TotalSupply.xsd, as Figure 2a shows.
The references to the user-deﬁned types use xsd1
as a namespace preﬁx to qualify their use. The mes-
sage element deﬁnes the exchanged data. Messages
can consist of one or more logical parts, each with
an associated data type. 

The portType element in Figure 2b groups the
operation and related messages together. This ele-
ment currently supports four types of operation:

one-way, request-response, solicit response, and
notiﬁcation. TotalSupply Web service supports two
request-response  operations:  processPO  and
processPayment. The binding element in Figure 2c
deﬁnes the network protocol details for the opera-
tion, SOAP over an HTTP transport in this exam-
ple. Where the port element deﬁnes a single network
address (http://example.com/TotalSupply), the ser-
vice  element  in  Figure  2d  groups  related  ports
together in our example Web service. 

Web Services Conversation Language 

Hewlett-Packard developed the Web Services
Conversation Language (WSCL), an XML-based
speciﬁcation layered on top of WSDL, for use in
deﬁning conversations between service providers
and consumers. WSCL was submitted to the W3C
(http://www.w3.org/TR/wscl10/). 

Figure 3 shows a WSCL conversation for our
TotalSupply  Web  service.  The  initialInteraction
attribute speciﬁes the ﬁrst interaction—equivalent to
operation in WSDL—in the sequence. The Transition
attribute deﬁnes the ordering between the processPO
and processPayment interactions. The conversation
proceeds from one interaction to another according
to the legally deﬁned transitions. Transition is unique
to  WSCL,  whereas  Interaction  and  Inbound/
Outbound XML documents overlap with WSDL. 

ebXML

The United Nations (UN/CEFACT) and OASIS
sponsored the ebXML specifications for use in 
e-business frameworks. 

ebXML  Business  Process  Specification  Schema.
ebXML BPSS (http://www.ebxml.org/specs/ebBPSS.
doc) is a proposed standard for specifying collab-
orations for use in exchanging business documents

May 2002

57

Figure 4. ebXML
Business Process
Speciﬁcation
Schema specifying
business collabora-
tions. In business
collaborations, a set
of roles exchange
business documents
in a set of
choreographed
transactions.

<!--Business Transactions-->
<BusinessTransaction name="Process PO">
<RequestingBusinessActivity name="PurchaseActivity">

<DocumentEnvelope businessDocument="Purchase Order"
isAuthenticated="true"/>

</RequestingBusinessActivity>
<RespondingBusinessActivity name="NotiﬁcationActivity">
<DocumentEnvelope businessDocument="Shipment Notiﬁcation"
isTamperProof="true"/>

</RespondingBusinessActivity>
</BusinessTransaction>
<BusinessTransaction name="Process Payment">
<RequestingBusinessActivity name="PaymentActivity">

<DocumentEnvelope businessDocument="Payment"
isAuthenticated="true"/>

</RequestingBusinessActivity>
</BusinessTransaction>

through a set of choreographed transactions. Our
TotalSupplySpec example uses three business doc-
uments: purchase order, shipment notiﬁcation, and
payment. 

A business transaction is an atomic unit of work
between trading partners. Each business transac-
tion has one requesting (incoming) document and
an optional responding (outgoing) document. BPSS
also supports business signals, or application-level
documents that signal a business transaction’s cur-
rent state—for example, an acknowledgment doc-
ument. 

As Figure 4 shows, TotalSupplySpec supports
two business transactions: processPO and process-
Payment.  TotalSupply  workflow  supports  the
notion  of  business  collaboration,  or  Binary-
Collaboration, which establishes roles and autho-
rizes actors to participate in the collaboration. For
example, a Buyer role can initiate the business
transaction and the Seller has a responding role. A
BinaryCollaboration also speciﬁes the choreogra-
phy—or ordering of business transactions—and
subcollaborations  within  larger  collaborations.
WSCL  overlaps  with  BPSS  and  WSFL  because
Transition is the same as choreography.

BPSS uses a top-down approach that provides a
notation to describe a business process from both
the service provider and service consumer view-
points, whereas WSDL and WSCL use a bottom-up
approach that provides a notation describing only
the service provider interface. 

ebXML Collaboration Protocol Profile. ebXML CPP
(http://www.ebxml.org/specs/ebCCP.doc) describes
the IT capabilities of an individual party partici-
pating in the collaborative business process. These
capabilities include details of transport, messaging,
security constraints, and bindings to a business
process—for example, ebXML BPSS.

A CollaborationProtocolProﬁle, the root element
of a CPP document, includes a PartyInfo element

that identiﬁes the party described in the CPP and
includes a reference to the ProcessSpecification
(BPSS) documents it supports. The Collaboration-
Role element identiﬁes the roles that the party can
play in the referenced business process. Service-
Binding  binds  all  of  the  BusinessTransactions
deﬁned in BPSS to the sending or receiving com-
munication  protocol—for  example,  HTTP  or
SMTP—and also provides the end point associated
with the receiving protocol. 

In the current CPP speciﬁcation, the end point
attribute is static, but the ebXML Messaging Service
speciﬁcation may provide the capability to dynam-
ically  override  that  end  point  information  by
exchanging a speciﬁc URI in a business document. 
The Collaboration Protocol Agreement (CPA)
describes the capabilities that two parties have
agreed to use to perform a business collaboration.
A CPA can be generated by calculating the inter-
section of the information found in the CPPs of the
two  parties  participating  in  the  collaboration.
Generating the CPA may involve some level of
negotiation between the two parties. 

CPA is part of the CPP speciﬁcations. Although
there is no speciﬁcation for how to accomplish the
negotiation, the CPPA technical committee has ini-
tiated some work in this area.

Web Services Flow Language

IBM’s Web Services Flow Language is an XML-
based speciﬁcation for describing a public collab-
orative  process  and  its  compositions.  WSFL  is
layered on top of WSDL, which describes the ser-
vice interfaces and their protocol bindings.

WSFL deﬁnes two types of Web services composi-
tions: A ﬂow model speciﬁes the execution sequence
of a business process’s functions. A global model com-
bines ﬂow models and provides a description of how
the composed Web services interact with each other. 

WSFL’s major features include

58

Computer

C O V E R   F E A T U R E

E-Business Process 
Modeling: The 
Next Big Step 

The authors propose a Process Coordination Framework for Web services
and outline the building blocks required for e-business automation. Their
framework helps in understanding the roles of various standards and in
identifying overlaps, gaps, and opportunities for convergence.

business so far. Businesses realize that the cost of
automating transactions with trading partners is very
high. Standards and technologies for modeling e-busi-
ness processes that use Web services could drive the
costs down by achieving automated code generation,
reuse, and interoperability—facilitating communica-
tion between business analysts and implementers.

Our proposed Process Coordination Framework
outlines the building blocks required for Web ser-
vices-enabled e-business automation. PCF helps in
understanding the roles of the various proposed
standards with respect to these building blocks and
in identifying both overlaps and gaps. 

PROCESS COORDINATION FRAMEWORK 

As Figure 1 shows, PCF groups the features that
e-business automation requires into a multilayered
stack. 

• Service  description  and  transport  binding.
Service description provides metalevel data for
services and their operations; transport bind-
ings tie abstract service descriptions to speciﬁc
physical addresses such as HTTP or SMTP sta-
tically at design time or dynamically at run-
time.

• End point description. This layer describes
aspects such as quality of service (QoS), service
location, provider information, and service cost
that can inﬂuence a customer’s decision to use
the Web service.

• Public  collaborative  process.  This  process
describes the sequence or choreography of the

Selim Aissi
Pallavi Malu
Krishnamurthy
Srinivasan

Intel Labs T he Internet is emerging as the platform for

automating both the provider and con-
sumer ends of e-business transactions. In
this new model, businesses offer Web ser-
vices that applications running in other
businesses could invoke automatically, building
bridges  between  systems  that  otherwise  would
require  extensive  integration  and  development
efforts. Web services are software components that
use standard Internet technologies to interact with
one another dynamically. 

In spite of the signiﬁcant potential beneﬁts, only a
few large businesses have implemented automated e-

Contracts/
agreement

Private
process

y
t
i
r
u
c
e
S

Public

collaborative

process

End point
description

Service

description and
transport binding

ebXML
CPA

XLANG

BPML

WSFL

WSEL

WSDL

WSCL

ebXML
BPSS

ebXML
CPP

Figure 1. Process Coordination Framework. PCF groups features required for e-
business automation along with relevant speciﬁcations into a multilayered stack.

0018-9162/02/$17.00 © 2002 IEEE

May 2002

55

<message name="purchaseOrder"> <part name="body" type="xsd1:orderBody"/> </message>
<message name="shipmentNotiﬁcation"> --------- </message>
<message name="payment"> --------- </message>
<message name="error"> --------- </message>
(a)

<portType name="TotalSupplyPortType">

<operation name="processPO">

<input message="tns:purchaseOrder"/>
<output message="tns:shipmentNotiﬁcation"/>
<fault message="tns:error"/>

</operation>
<operation name="processPayment"> --------- </operation>

</portType>
(b)

<binding name="TotalSupplySoapBinding" type="tns:TotalSupplyPortType">
<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http/">
<operation name="processPO">

<soap:operation soapAction="http://example.com/processPO"/>

<input> <soap:body use="literal"/> </input>
<output> --------- </output>
<fault> <soap:fault use="literal"/> </fault>

</operation>
</binding>
(c)

<service name="TotalSupplyService">

<documentation> TotalSupply service</documentation>
<port name="TotalSupplyPort" binding="tns: TotalSupplySoapBinding">

<soap:address location="http://example.com/TotalSupply"/>

</port>
</service>
(d)

Figure 2. WSDL deﬁ-
nition of TotalSup-
ply: (a) schema ﬁle
TotalSupply.xsd
deﬁning a class of
XML documents; (b)
portType element
grouping the opera-
tion and related
messages together;
(c) binding element
deﬁning the network
protocol details for
the operation; (d)
service element
grouping related
ports together.

operations  the  Web  service  supports.  For
example, if the service supports operations
including Login and Check Balance, the pub-
lic collaborative process speciﬁes that the user
needs to log in before checking the balance to
avoid errors.

• Private process. This layer describes internal
executable business processes that support the
Web service’s public collaborative process.

• Contracts/agreement. The actual technical and
legal agreements under which entities conduct
business reside in this layer. The technical con-
tract between the entities includes the exact
details of how the parties use their informa-
tion technology (IT) infrastructure to transact
the  business  at  hand.  The  legal  contract
includes agreements on the terms and condi-
tions  of  the  business  exchange.  Having  an
XML-based syntax to specify contracts helps
applications automatically interact without
human intervention. However, XML does not
currently incorporate many of these defini-
tions.

• Security. Security requirements include a com-
bination of the following features: authoriza-
tion,  authentication,  confidentiality,  non-
repudiation, and auditing. Various PCF layers
may require different aspects of security. Any
exchange of business information may require
all, some, or no security features.

SPECIFICATIONS IN THE PCF SPACE

A simple example of a composite Web service
provided in IBM’s Web Services Flow Language
(http://www-4.ibm.com/software/solutions/web
services/pdf/WSFL.pdf) helps to understand the
speciﬁcations and the features they support. In this
example, TotalSupply service leverages two other
Web services: mySupplier as a source for products
and myShipper to distribute them. These two Web
services use the Web Services Description Language.

Web Services Description Language 

WSDL  is  an  XML-based  speciﬁcation  that
describes Web services as collections of message-
enabled operations and was submitted to the World

56

Computer

<ConversationInteractions>

<Interaction StepType="ReceiveSend" id="ProcessPO">

<InboundXMLDocuments>

<InboundXMLDocument id="PurchaseOrder"

hrefSchema="PO.xsd"/>

</InboundXMLDocuments>

<OutboundXMLDocuments>

<OutboundXMLDocument id="Shipment"

hrefSchema="Shipment.xsd"/>

</OutboundXMLDocuments>

</Interaction>
<Interaction StepType="Receive" id="ProcessPayment"> --------- </Interaction>
</ConversationInteractions>

<ConversationTransitions>

<Transition>

<SourceInteration href="#ProcessPO"/>
<DestinationInteraction href="#ProcessPayment"/>

<TriggeringDocument href="#Shipment"/>

</Transition>
</ConversationTransitions>

Figure 3. Web Ser-
vices Conversation
Language deﬁning
conversations
between service
providers and con-
sumers. The Transi-
tion attribute
deﬁnes the ordering
between the
processPO and
processPayment
interactions.

Wide Web consortium (W3C) by Ariba, IBM, and
Microsoft (http://www.w3.org/TR/wsdl). WSDL
provides the information needed to invoke an oper-
ation in an application running in a third-party loca-
tion on the Internet, including the operation name,
input/output parameters and their data types, the
network protocol, and the network address. 

Dissecting the deﬁnition of TotalSupply helps to
understand the details of WSDL. The service sup-
ports  two  operations:  processPO  and  process-
Payment. This example assumes that the service is
deployed using the SOAP protocol (http://www.
w3.org/TR/SOAP/) over HTTP. The WSDL file
begins with an element having attributes that deﬁne
the  TotalSupply  service,  the  target  namespace
(http://example.com/TotalSupply.wsdl), and other
namespaces. The types element defines the data
type  of  the  input/output  messages  that  are
exchanged during the operation. You can use stan-
dard XML data types such as string, integer, and
ﬂoat, or you can create complex data types.

TotalSupply supports four data types: orderBody,
notiﬁcationBody, paymentBody, and errorBody. It
also supports four types of single-part messages:
two input messages, purchaseOrder and payment;
one output message, shipmentNotiﬁcation; and an
error message. To keep the example simple, we
deﬁne a class of XML documents within a separate
schema ﬁle, TotalSupply.xsd, as Figure 2a shows.
The references to the user-deﬁned types use xsd1
as a namespace preﬁx to qualify their use. The mes-
sage element deﬁnes the exchanged data. Messages
can consist of one or more logical parts, each with
an associated data type. 

The portType element in Figure 2b groups the
operation and related messages together. This ele-
ment currently supports four types of operation:

one-way, request-response, solicit response, and
notiﬁcation. TotalSupply Web service supports two
request-response  operations:  processPO  and
processPayment. The binding element in Figure 2c
deﬁnes the network protocol details for the opera-
tion, SOAP over an HTTP transport in this exam-
ple. Where the port element deﬁnes a single network
address (http://example.com/TotalSupply), the ser-
vice  element  in  Figure  2d  groups  related  ports
together in our example Web service. 

Web Services Conversation Language 

Hewlett-Packard developed the Web Services
Conversation Language (WSCL), an XML-based
speciﬁcation layered on top of WSDL, for use in
deﬁning conversations between service providers
and consumers. WSCL was submitted to the W3C
(http://www.w3.org/TR/wscl10/). 

Figure 3 shows a WSCL conversation for our
TotalSupply  Web  service.  The  initialInteraction
attribute speciﬁes the ﬁrst interaction—equivalent to
operation in WSDL—in the sequence. The Transition
attribute deﬁnes the ordering between the processPO
and processPayment interactions. The conversation
proceeds from one interaction to another according
to the legally deﬁned transitions. Transition is unique
to  WSCL,  whereas  Interaction  and  Inbound/
Outbound XML documents overlap with WSDL. 

ebXML

The United Nations (UN/CEFACT) and OASIS
sponsored the ebXML specifications for use in 
e-business frameworks. 

ebXML  Business  Process  Specification  Schema.
ebXML BPSS (http://www.ebxml.org/specs/ebBPSS.
doc) is a proposed standard for specifying collab-
orations for use in exchanging business documents

May 2002

57

Figure 4. ebXML
Business Process
Speciﬁcation
Schema specifying
business collabora-
tions. In business
collaborations, a set
of roles exchange
business documents
in a set of
choreographed
transactions.

<!--Business Transactions-->
<BusinessTransaction name="Process PO">
<RequestingBusinessActivity name="PurchaseActivity">

<DocumentEnvelope businessDocument="Purchase Order"
isAuthenticated="true"/>

</RequestingBusinessActivity>
<RespondingBusinessActivity name="NotiﬁcationActivity">
<DocumentEnvelope businessDocument="Shipment Notiﬁcation"
isTamperProof="true"/>

</RespondingBusinessActivity>
</BusinessTransaction>
<BusinessTransaction name="Process Payment">
<RequestingBusinessActivity name="PaymentActivity">

<DocumentEnvelope businessDocument="Payment"
isAuthenticated="true"/>

</RequestingBusinessActivity>
</BusinessTransaction>

through a set of choreographed transactions. Our
TotalSupplySpec example uses three business doc-
uments: purchase order, shipment notiﬁcation, and
payment. 

A business transaction is an atomic unit of work
between trading partners. Each business transac-
tion has one requesting (incoming) document and
an optional responding (outgoing) document. BPSS
also supports business signals, or application-level
documents that signal a business transaction’s cur-
rent state—for example, an acknowledgment doc-
ument. 

As Figure 4 shows, TotalSupplySpec supports
two business transactions: processPO and process-
Payment.  TotalSupply  workflow  supports  the
notion  of  business  collaboration,  or  Binary-
Collaboration, which establishes roles and autho-
rizes actors to participate in the collaboration. For
example, a Buyer role can initiate the business
transaction and the Seller has a responding role. A
BinaryCollaboration also speciﬁes the choreogra-
phy—or ordering of business transactions—and
subcollaborations  within  larger  collaborations.
WSCL  overlaps  with  BPSS  and  WSFL  because
Transition is the same as choreography.

BPSS uses a top-down approach that provides a
notation to describe a business process from both
the service provider and service consumer view-
points, whereas WSDL and WSCL use a bottom-up
approach that provides a notation describing only
the service provider interface. 

ebXML Collaboration Protocol Profile. ebXML CPP
(http://www.ebxml.org/specs/ebCCP.doc) describes
the IT capabilities of an individual party partici-
pating in the collaborative business process. These
capabilities include details of transport, messaging,
security constraints, and bindings to a business
process—for example, ebXML BPSS.

A CollaborationProtocolProﬁle, the root element
of a CPP document, includes a PartyInfo element

that identiﬁes the party described in the CPP and
includes a reference to the ProcessSpecification
(BPSS) documents it supports. The Collaboration-
Role element identiﬁes the roles that the party can
play in the referenced business process. Service-
Binding  binds  all  of  the  BusinessTransactions
deﬁned in BPSS to the sending or receiving com-
munication  protocol—for  example,  HTTP  or
SMTP—and also provides the end point associated
with the receiving protocol. 

In the current CPP speciﬁcation, the end point
attribute is static, but the ebXML Messaging Service
speciﬁcation may provide the capability to dynam-
ically  override  that  end  point  information  by
exchanging a speciﬁc URI in a business document. 
The Collaboration Protocol Agreement (CPA)
describes the capabilities that two parties have
agreed to use to perform a business collaboration.
A CPA can be generated by calculating the inter-
section of the information found in the CPPs of the
two  parties  participating  in  the  collaboration.
Generating the CPA may involve some level of
negotiation between the two parties. 

CPA is part of the CPP speciﬁcations. Although
there is no speciﬁcation for how to accomplish the
negotiation, the CPPA technical committee has ini-
tiated some work in this area.

Web Services Flow Language

IBM’s Web Services Flow Language is an XML-
based speciﬁcation for describing a public collab-
orative  process  and  its  compositions.  WSFL  is
layered on top of WSDL, which describes the ser-
vice interfaces and their protocol bindings.

WSFL deﬁnes two types of Web services composi-
tions: A ﬂow model speciﬁes the execution sequence
of a business process’s functions. A global model com-
bines ﬂow models and provides a description of how
the composed Web services interact with each other. 

WSFL’s major features include

58

Computer

• activity, a processing step in a business process;
• control link, sequencing rules in a business
process that model the control ﬂow from one
activity to the next;

• data  link,  information  flow  in  a  business
process, wherein data flow can be separate
from control ﬂow;

• data  mapping,  specifying  information  that
needs to be transferred between two linked
activities; and

• pluglink and export element, describing the
relation between activities in the ﬂow model
and the WSDL operations the service provider
offers.

Figure 5 shows a graphical representation of the
TotalSupply Web service WSFL model, with three
ﬂow models comprising the global model: one for
our enterprise and two representing the support-
ing services. 

Prior to constructing a WSFL global model, the
individual ﬂow models must be speciﬁed accord-
ing  to  IBM’s  WSFL  specification (http://www-
4.ibm.com/software/solutions/webservices/pdf/
WSFL.pdf). The WSFL ﬂow model for TotalSupply
consists of a ﬂowModel name, TotalSupplyFlow;
a service ProviderType; and a listing of service

TotalSupplyFlow

processPO

Process
payment

Accept
shipment
request

Supplier
FlowModel

Shipper
FlowModel

FlowModel

GlobalModel

providers, activity speciﬁcations, and control and
data links. Our TotalSupply ﬂow model includes
two separate serviceProvider elements in the ser-
vice ProviderType—mySupplier and myShipper.
Figure 6a shows the XML code for mySupplier.

The TotalSupply ﬂow model must perform three
activities  to  successfully  complete  the  business
process: processing a purchase order, accepting a
shipment request, and receiving a payment. Separate
activity elements specify each of these activities,
which must perform in a speciﬁc order: Purchase-
order processing must precede the shipper’s accep-
tance of the shipping request, whereas the payment
can be received at any time—WSFL allows an activ-
ity to exist outside the control links connecting other
activities. Figure 6b provides an example of the
processPO  activity,  which  is  provided  by  my-

<serviceProvider name="mySupplier" type="supplier">

<locator type="static" service="qualitySupply.com"/>

</serviceProvider>
(a)

<activity name="processPO">

<performedBy serviceProvider="mySupplier"/>
<implement>
<export>

<target portType="totalSupplyPT"
operation="sendProcOrder"/>

</export>
</implement>

</activity>
(b)

Figure 5. TotalSup-
ply Web service
global model repre-
sentation. Activities
such as processPO
are represented as
shaded circles, con-
trol links are solid
arrows connecting
activities, data links
are dashed arrows,
and the callouts
connecting the
TotalSupply activi-
ties to the external
services represent
pluglinks.

Figure 6. WSFL
TotalSupply ﬂow
model: (a) service-
Provider element 
for mySupplier; (b)
processPO activity
provided by mySup-
plier; (c) controlLink
and dataLink
elements. 

<controlLink source="processPO"

target="acceptShipmentRequest"/>

<dataLink source="processPO"

target="acceptShipmentRequest">

<map sourceMessage="anINVandSR" targetMessage="anSR"/>

</dataLink>
(c)

May 2002

59

C O V E R   F E A T U R E

E-Business Process 
Modeling: The 
Next Big Step 

The authors propose a Process Coordination Framework for Web services
and outline the building blocks required for e-business automation. Their
framework helps in understanding the roles of various standards and in
identifying overlaps, gaps, and opportunities for convergence.

business so far. Businesses realize that the cost of
automating transactions with trading partners is very
high. Standards and technologies for modeling e-busi-
ness processes that use Web services could drive the
costs down by achieving automated code generation,
reuse, and interoperability—facilitating communica-
tion between business analysts and implementers.

Our proposed Process Coordination Framework
outlines the building blocks required for Web ser-
vices-enabled e-business automation. PCF helps in
understanding the roles of the various proposed
standards with respect to these building blocks and
in identifying both overlaps and gaps. 

PROCESS COORDINATION FRAMEWORK 

As Figure 1 shows, PCF groups the features that
e-business automation requires into a multilayered
stack. 

• Service  description  and  transport  binding.
Service description provides metalevel data for
services and their operations; transport bind-
ings tie abstract service descriptions to speciﬁc
physical addresses such as HTTP or SMTP sta-
tically at design time or dynamically at run-
time.

• End point description. This layer describes
aspects such as quality of service (QoS), service
location, provider information, and service cost
that can inﬂuence a customer’s decision to use
the Web service.

• Public  collaborative  process.  This  process
describes the sequence or choreography of the

Selim Aissi
Pallavi Malu
Krishnamurthy
Srinivasan

Intel Labs T he Internet is emerging as the platform for

automating both the provider and con-
sumer ends of e-business transactions. In
this new model, businesses offer Web ser-
vices that applications running in other
businesses could invoke automatically, building
bridges  between  systems  that  otherwise  would
require  extensive  integration  and  development
efforts. Web services are software components that
use standard Internet technologies to interact with
one another dynamically. 

In spite of the signiﬁcant potential beneﬁts, only a
few large businesses have implemented automated e-

Contracts/
agreement

Private
process

y
t
i
r
u
c
e
S

Public

collaborative

process

End point
description

Service

description and
transport binding

ebXML
CPA

XLANG

BPML

WSFL

WSEL

WSDL

WSCL

ebXML
BPSS

ebXML
CPP

Figure 1. Process Coordination Framework. PCF groups features required for e-
business automation along with relevant speciﬁcations into a multilayered stack.

0018-9162/02/$17.00 © 2002 IEEE

May 2002

55

<message name="purchaseOrder"> <part name="body" type="xsd1:orderBody"/> </message>
<message name="shipmentNotiﬁcation"> --------- </message>
<message name="payment"> --------- </message>
<message name="error"> --------- </message>
(a)

<portType name="TotalSupplyPortType">

<operation name="processPO">

<input message="tns:purchaseOrder"/>
<output message="tns:shipmentNotiﬁcation"/>
<fault message="tns:error"/>

</operation>
<operation name="processPayment"> --------- </operation>

</portType>
(b)

<binding name="TotalSupplySoapBinding" type="tns:TotalSupplyPortType">
<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http/">
<operation name="processPO">

<soap:operation soapAction="http://example.com/processPO"/>

<input> <soap:body use="literal"/> </input>
<output> --------- </output>
<fault> <soap:fault use="literal"/> </fault>

</operation>
</binding>
(c)

<service name="TotalSupplyService">

<documentation> TotalSupply service</documentation>
<port name="TotalSupplyPort" binding="tns: TotalSupplySoapBinding">

<soap:address location="http://example.com/TotalSupply"/>

</port>
</service>
(d)

Figure 2. WSDL deﬁ-
nition of TotalSup-
ply: (a) schema ﬁle
TotalSupply.xsd
deﬁning a class of
XML documents; (b)
portType element
grouping the opera-
tion and related
messages together;
(c) binding element
deﬁning the network
protocol details for
the operation; (d)
service element
grouping related
ports together.

operations  the  Web  service  supports.  For
example, if the service supports operations
including Login and Check Balance, the pub-
lic collaborative process speciﬁes that the user
needs to log in before checking the balance to
avoid errors.

• Private process. This layer describes internal
executable business processes that support the
Web service’s public collaborative process.

• Contracts/agreement. The actual technical and
legal agreements under which entities conduct
business reside in this layer. The technical con-
tract between the entities includes the exact
details of how the parties use their informa-
tion technology (IT) infrastructure to transact
the  business  at  hand.  The  legal  contract
includes agreements on the terms and condi-
tions  of  the  business  exchange.  Having  an
XML-based syntax to specify contracts helps
applications automatically interact without
human intervention. However, XML does not
currently incorporate many of these defini-
tions.

• Security. Security requirements include a com-
bination of the following features: authoriza-
tion,  authentication,  confidentiality,  non-
repudiation, and auditing. Various PCF layers
may require different aspects of security. Any
exchange of business information may require
all, some, or no security features.

SPECIFICATIONS IN THE PCF SPACE

A simple example of a composite Web service
provided in IBM’s Web Services Flow Language
(http://www-4.ibm.com/software/solutions/web
services/pdf/WSFL.pdf) helps to understand the
speciﬁcations and the features they support. In this
example, TotalSupply service leverages two other
Web services: mySupplier as a source for products
and myShipper to distribute them. These two Web
services use the Web Services Description Language.

Web Services Description Language 

WSDL  is  an  XML-based  speciﬁcation  that
describes Web services as collections of message-
enabled operations and was submitted to the World

56

Computer

<ConversationInteractions>

<Interaction StepType="ReceiveSend" id="ProcessPO">

<InboundXMLDocuments>

<InboundXMLDocument id="PurchaseOrder"

hrefSchema="PO.xsd"/>

</InboundXMLDocuments>

<OutboundXMLDocuments>

<OutboundXMLDocument id="Shipment"

hrefSchema="Shipment.xsd"/>

</OutboundXMLDocuments>

</Interaction>
<Interaction StepType="Receive" id="ProcessPayment"> --------- </Interaction>
</ConversationInteractions>

<ConversationTransitions>

<Transition>

<SourceInteration href="#ProcessPO"/>
<DestinationInteraction href="#ProcessPayment"/>

<TriggeringDocument href="#Shipment"/>

</Transition>
</ConversationTransitions>

Figure 3. Web Ser-
vices Conversation
Language deﬁning
conversations
between service
providers and con-
sumers. The Transi-
tion attribute
deﬁnes the ordering
between the
processPO and
processPayment
interactions.

Wide Web consortium (W3C) by Ariba, IBM, and
Microsoft (http://www.w3.org/TR/wsdl). WSDL
provides the information needed to invoke an oper-
ation in an application running in a third-party loca-
tion on the Internet, including the operation name,
input/output parameters and their data types, the
network protocol, and the network address. 

Dissecting the deﬁnition of TotalSupply helps to
understand the details of WSDL. The service sup-
ports  two  operations:  processPO  and  process-
Payment. This example assumes that the service is
deployed using the SOAP protocol (http://www.
w3.org/TR/SOAP/) over HTTP. The WSDL file
begins with an element having attributes that deﬁne
the  TotalSupply  service,  the  target  namespace
(http://example.com/TotalSupply.wsdl), and other
namespaces. The types element defines the data
type  of  the  input/output  messages  that  are
exchanged during the operation. You can use stan-
dard XML data types such as string, integer, and
ﬂoat, or you can create complex data types.

TotalSupply supports four data types: orderBody,
notiﬁcationBody, paymentBody, and errorBody. It
also supports four types of single-part messages:
two input messages, purchaseOrder and payment;
one output message, shipmentNotiﬁcation; and an
error message. To keep the example simple, we
deﬁne a class of XML documents within a separate
schema ﬁle, TotalSupply.xsd, as Figure 2a shows.
The references to the user-deﬁned types use xsd1
as a namespace preﬁx to qualify their use. The mes-
sage element deﬁnes the exchanged data. Messages
can consist of one or more logical parts, each with
an associated data type. 

The portType element in Figure 2b groups the
operation and related messages together. This ele-
ment currently supports four types of operation:

one-way, request-response, solicit response, and
notiﬁcation. TotalSupply Web service supports two
request-response  operations:  processPO  and
processPayment. The binding element in Figure 2c
deﬁnes the network protocol details for the opera-
tion, SOAP over an HTTP transport in this exam-
ple. Where the port element deﬁnes a single network
address (http://example.com/TotalSupply), the ser-
vice  element  in  Figure  2d  groups  related  ports
together in our example Web service. 

Web Services Conversation Language 

Hewlett-Packard developed the Web Services
Conversation Language (WSCL), an XML-based
speciﬁcation layered on top of WSDL, for use in
deﬁning conversations between service providers
and consumers. WSCL was submitted to the W3C
(http://www.w3.org/TR/wscl10/). 

Figure 3 shows a WSCL conversation for our
TotalSupply  Web  service.  The  initialInteraction
attribute speciﬁes the ﬁrst interaction—equivalent to
operation in WSDL—in the sequence. The Transition
attribute deﬁnes the ordering between the processPO
and processPayment interactions. The conversation
proceeds from one interaction to another according
to the legally deﬁned transitions. Transition is unique
to  WSCL,  whereas  Interaction  and  Inbound/
Outbound XML documents overlap with WSDL. 

ebXML

The United Nations (UN/CEFACT) and OASIS
sponsored the ebXML specifications for use in 
e-business frameworks. 

ebXML  Business  Process  Specification  Schema.
ebXML BPSS (http://www.ebxml.org/specs/ebBPSS.
doc) is a proposed standard for specifying collab-
orations for use in exchanging business documents

May 2002

57

Figure 4. ebXML
Business Process
Speciﬁcation
Schema specifying
business collabora-
tions. In business
collaborations, a set
of roles exchange
business documents
in a set of
choreographed
transactions.

<!--Business Transactions-->
<BusinessTransaction name="Process PO">
<RequestingBusinessActivity name="PurchaseActivity">

<DocumentEnvelope businessDocument="Purchase Order"
isAuthenticated="true"/>

</RequestingBusinessActivity>
<RespondingBusinessActivity name="NotiﬁcationActivity">
<DocumentEnvelope businessDocument="Shipment Notiﬁcation"
isTamperProof="true"/>

</RespondingBusinessActivity>
</BusinessTransaction>
<BusinessTransaction name="Process Payment">
<RequestingBusinessActivity name="PaymentActivity">

<DocumentEnvelope businessDocument="Payment"
isAuthenticated="true"/>

</RequestingBusinessActivity>
</BusinessTransaction>

through a set of choreographed transactions. Our
TotalSupplySpec example uses three business doc-
uments: purchase order, shipment notiﬁcation, and
payment. 

A business transaction is an atomic unit of work
between trading partners. Each business transac-
tion has one requesting (incoming) document and
an optional responding (outgoing) document. BPSS
also supports business signals, or application-level
documents that signal a business transaction’s cur-
rent state—for example, an acknowledgment doc-
ument. 

As Figure 4 shows, TotalSupplySpec supports
two business transactions: processPO and process-
Payment.  TotalSupply  workflow  supports  the
notion  of  business  collaboration,  or  Binary-
Collaboration, which establishes roles and autho-
rizes actors to participate in the collaboration. For
example, a Buyer role can initiate the business
transaction and the Seller has a responding role. A
BinaryCollaboration also speciﬁes the choreogra-
phy—or ordering of business transactions—and
subcollaborations  within  larger  collaborations.
WSCL  overlaps  with  BPSS  and  WSFL  because
Transition is the same as choreography.

BPSS uses a top-down approach that provides a
notation to describe a business process from both
the service provider and service consumer view-
points, whereas WSDL and WSCL use a bottom-up
approach that provides a notation describing only
the service provider interface. 

ebXML Collaboration Protocol Profile. ebXML CPP
(http://www.ebxml.org/specs/ebCCP.doc) describes
the IT capabilities of an individual party partici-
pating in the collaborative business process. These
capabilities include details of transport, messaging,
security constraints, and bindings to a business
process—for example, ebXML BPSS.

A CollaborationProtocolProﬁle, the root element
of a CPP document, includes a PartyInfo element

that identiﬁes the party described in the CPP and
includes a reference to the ProcessSpecification
(BPSS) documents it supports. The Collaboration-
Role element identiﬁes the roles that the party can
play in the referenced business process. Service-
Binding  binds  all  of  the  BusinessTransactions
deﬁned in BPSS to the sending or receiving com-
munication  protocol—for  example,  HTTP  or
SMTP—and also provides the end point associated
with the receiving protocol. 

In the current CPP speciﬁcation, the end point
attribute is static, but the ebXML Messaging Service
speciﬁcation may provide the capability to dynam-
ically  override  that  end  point  information  by
exchanging a speciﬁc URI in a business document. 
The Collaboration Protocol Agreement (CPA)
describes the capabilities that two parties have
agreed to use to perform a business collaboration.
A CPA can be generated by calculating the inter-
section of the information found in the CPPs of the
two  parties  participating  in  the  collaboration.
Generating the CPA may involve some level of
negotiation between the two parties. 

CPA is part of the CPP speciﬁcations. Although
there is no speciﬁcation for how to accomplish the
negotiation, the CPPA technical committee has ini-
tiated some work in this area.

Web Services Flow Language

IBM’s Web Services Flow Language is an XML-
based speciﬁcation for describing a public collab-
orative  process  and  its  compositions.  WSFL  is
layered on top of WSDL, which describes the ser-
vice interfaces and their protocol bindings.

WSFL deﬁnes two types of Web services composi-
tions: A ﬂow model speciﬁes the execution sequence
of a business process’s functions. A global model com-
bines ﬂow models and provides a description of how
the composed Web services interact with each other. 

WSFL’s major features include

58

Computer

• activity, a processing step in a business process;
• control link, sequencing rules in a business
process that model the control ﬂow from one
activity to the next;

• data  link,  information  flow  in  a  business
process, wherein data flow can be separate
from control ﬂow;

• data  mapping,  specifying  information  that
needs to be transferred between two linked
activities; and

• pluglink and export element, describing the
relation between activities in the ﬂow model
and the WSDL operations the service provider
offers.

Figure 5 shows a graphical representation of the
TotalSupply Web service WSFL model, with three
ﬂow models comprising the global model: one for
our enterprise and two representing the support-
ing services. 

Prior to constructing a WSFL global model, the
individual ﬂow models must be speciﬁed accord-
ing  to  IBM’s  WSFL  specification (http://www-
4.ibm.com/software/solutions/webservices/pdf/
WSFL.pdf). The WSFL ﬂow model for TotalSupply
consists of a ﬂowModel name, TotalSupplyFlow;
a service ProviderType; and a listing of service

TotalSupplyFlow

processPO

Process
payment

Accept
shipment
request

Supplier
FlowModel

Shipper
FlowModel

FlowModel

GlobalModel

providers, activity speciﬁcations, and control and
data links. Our TotalSupply ﬂow model includes
two separate serviceProvider elements in the ser-
vice ProviderType—mySupplier and myShipper.
Figure 6a shows the XML code for mySupplier.

The TotalSupply ﬂow model must perform three
activities  to  successfully  complete  the  business
process: processing a purchase order, accepting a
shipment request, and receiving a payment. Separate
activity elements specify each of these activities,
which must perform in a speciﬁc order: Purchase-
order processing must precede the shipper’s accep-
tance of the shipping request, whereas the payment
can be received at any time—WSFL allows an activ-
ity to exist outside the control links connecting other
activities. Figure 6b provides an example of the
processPO  activity,  which  is  provided  by  my-

<serviceProvider name="mySupplier" type="supplier">

<locator type="static" service="qualitySupply.com"/>

</serviceProvider>
(a)

<activity name="processPO">

<performedBy serviceProvider="mySupplier"/>
<implement>
<export>

<target portType="totalSupplyPT"
operation="sendProcOrder"/>

</export>
</implement>

</activity>
(b)

Figure 5. TotalSup-
ply Web service
global model repre-
sentation. Activities
such as processPO
are represented as
shaded circles, con-
trol links are solid
arrows connecting
activities, data links
are dashed arrows,
and the callouts
connecting the
TotalSupply activi-
ties to the external
services represent
pluglinks.

Figure 6. WSFL
TotalSupply ﬂow
model: (a) service-
Provider element 
for mySupplier; (b)
processPO activity
provided by mySup-
plier; (c) controlLink
and dataLink
elements. 

<controlLink source="processPO"

target="acceptShipmentRequest"/>

<dataLink source="processPO"

target="acceptShipmentRequest">

<map sourceMessage="anINVandSR" targetMessage="anSR"/>

</dataLink>
(c)

May 2002

59

Figure 7. Simpliﬁed
global model my-
SupplyChain cap-
tures the inter-
actions between 
the supplier, the
shipper, and the
TotalSupply Web
service.

<globalModel name="mySupplyChain"

serviceProviderType="supplyChain">

<serviceProvider name="mySupplier" type="supplier"/>
<serviceProvider name="myShipper" type="shipper"/>
<serviceProvider name="myTotalSupply" type="totalSupply"/>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT" 
operation="sendProcOrder"/>

<target serviceProvider="mySupplier"

portType="suppSvr"
operation="procPO"/>

</plugLink>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT"
operation="sendPayment"/>

<target serviceProvider="mySupplier"

portType="suppSvr"
operation="recPay"/>

</plugLink>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT"
operation="sendSR"/>

<target serviceProvider="myShipper"

portType="shipSvr"
operation="recSR"/>

</plugLink>
</globalModel>

Supplier, and exposes the sendProcOrder operation;
the TotalSupply ﬂow includes this activity deﬁni-
tion  as  well  as  deﬁnitions  for  acceptShipment-
Request and processPayment.

Figure 6c provides an example of the controlLink
and dataLink elements. The map element nested
inside the dataLink speciﬁes the information the
two linked activities need to transfer.

All of this is brought together in Figure 7 in
which the simpliﬁed mySupplyChain global model
captures the interactions between the supplier, the
shipper, and the TotalSupply Web service. The rela-
tionship between a flow model public interface
operation and a service provider operation is estab-
lished through a plugLink element, which WSFL
typically speciﬁes within a global model.

XLANG

Microsoft’s  XLANG  (http://www.gotdotnet.
com/team/xml_wsspecs/xlang-c/default.htm), an
XML-based speciﬁcation for describing executable
business processes internal to a business, is layered
on top of WSDL.

The XLANG speciﬁcation builds on the XML
code for process description that Microsoft’s Visio-
based BizTalk Server Orchestration graphical mod-
eling tool generates. 

XLANG’s major features include

• behavior, a container for the description of the
service’s behavioral aspects, including support
for looping, concurrency, and exception han-
dling;

• action, atoms of behavior referencing WSDL

operations on the available ports;

• control flow, sequence in which the service

performs actions;

• correlation, structure the service uses to route

messages to correct workﬂow instances;

• context, a context for long-running transac-

tions;

• service  management,  features  of  service

instance management; and

• port mapping, method for plugging in the ser-

vice user and the service provider.

Figure 8a shows an XLANG deﬁnition for our
WSFL-based TotalSupply example. The </all> tag
indicates that acceptShipmentRequest and process-
Payment actions can occur concurrently. WSDL
deﬁnes the sendSRPort and sendPaymentPort ref-
erence ports. Figure 8b captures the relationship
between the supplier, the shipper, and the Total-
Supply Web service. A connect element establishes

60

Computer

C O V E R   F E A T U R E

E-Business Process 
Modeling: The 
Next Big Step 

The authors propose a Process Coordination Framework for Web services
and outline the building blocks required for e-business automation. Their
framework helps in understanding the roles of various standards and in
identifying overlaps, gaps, and opportunities for convergence.

business so far. Businesses realize that the cost of
automating transactions with trading partners is very
high. Standards and technologies for modeling e-busi-
ness processes that use Web services could drive the
costs down by achieving automated code generation,
reuse, and interoperability—facilitating communica-
tion between business analysts and implementers.

Our proposed Process Coordination Framework
outlines the building blocks required for Web ser-
vices-enabled e-business automation. PCF helps in
understanding the roles of the various proposed
standards with respect to these building blocks and
in identifying both overlaps and gaps. 

PROCESS COORDINATION FRAMEWORK 

As Figure 1 shows, PCF groups the features that
e-business automation requires into a multilayered
stack. 

• Service  description  and  transport  binding.
Service description provides metalevel data for
services and their operations; transport bind-
ings tie abstract service descriptions to speciﬁc
physical addresses such as HTTP or SMTP sta-
tically at design time or dynamically at run-
time.

• End point description. This layer describes
aspects such as quality of service (QoS), service
location, provider information, and service cost
that can inﬂuence a customer’s decision to use
the Web service.

• Public  collaborative  process.  This  process
describes the sequence or choreography of the

Selim Aissi
Pallavi Malu
Krishnamurthy
Srinivasan

Intel Labs T he Internet is emerging as the platform for

automating both the provider and con-
sumer ends of e-business transactions. In
this new model, businesses offer Web ser-
vices that applications running in other
businesses could invoke automatically, building
bridges  between  systems  that  otherwise  would
require  extensive  integration  and  development
efforts. Web services are software components that
use standard Internet technologies to interact with
one another dynamically. 

In spite of the signiﬁcant potential beneﬁts, only a
few large businesses have implemented automated e-

Contracts/
agreement

Private
process

y
t
i
r
u
c
e
S

Public

collaborative

process

End point
description

Service

description and
transport binding

ebXML
CPA

XLANG

BPML

WSFL

WSEL

WSDL

WSCL

ebXML
BPSS

ebXML
CPP

Figure 1. Process Coordination Framework. PCF groups features required for e-
business automation along with relevant speciﬁcations into a multilayered stack.

0018-9162/02/$17.00 © 2002 IEEE

May 2002

55

<message name="purchaseOrder"> <part name="body" type="xsd1:orderBody"/> </message>
<message name="shipmentNotiﬁcation"> --------- </message>
<message name="payment"> --------- </message>
<message name="error"> --------- </message>
(a)

<portType name="TotalSupplyPortType">

<operation name="processPO">

<input message="tns:purchaseOrder"/>
<output message="tns:shipmentNotiﬁcation"/>
<fault message="tns:error"/>

</operation>
<operation name="processPayment"> --------- </operation>

</portType>
(b)

<binding name="TotalSupplySoapBinding" type="tns:TotalSupplyPortType">
<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http/">
<operation name="processPO">

<soap:operation soapAction="http://example.com/processPO"/>

<input> <soap:body use="literal"/> </input>
<output> --------- </output>
<fault> <soap:fault use="literal"/> </fault>

</operation>
</binding>
(c)

<service name="TotalSupplyService">

<documentation> TotalSupply service</documentation>
<port name="TotalSupplyPort" binding="tns: TotalSupplySoapBinding">

<soap:address location="http://example.com/TotalSupply"/>

</port>
</service>
(d)

Figure 2. WSDL deﬁ-
nition of TotalSup-
ply: (a) schema ﬁle
TotalSupply.xsd
deﬁning a class of
XML documents; (b)
portType element
grouping the opera-
tion and related
messages together;
(c) binding element
deﬁning the network
protocol details for
the operation; (d)
service element
grouping related
ports together.

operations  the  Web  service  supports.  For
example, if the service supports operations
including Login and Check Balance, the pub-
lic collaborative process speciﬁes that the user
needs to log in before checking the balance to
avoid errors.

• Private process. This layer describes internal
executable business processes that support the
Web service’s public collaborative process.

• Contracts/agreement. The actual technical and
legal agreements under which entities conduct
business reside in this layer. The technical con-
tract between the entities includes the exact
details of how the parties use their informa-
tion technology (IT) infrastructure to transact
the  business  at  hand.  The  legal  contract
includes agreements on the terms and condi-
tions  of  the  business  exchange.  Having  an
XML-based syntax to specify contracts helps
applications automatically interact without
human intervention. However, XML does not
currently incorporate many of these defini-
tions.

• Security. Security requirements include a com-
bination of the following features: authoriza-
tion,  authentication,  confidentiality,  non-
repudiation, and auditing. Various PCF layers
may require different aspects of security. Any
exchange of business information may require
all, some, or no security features.

SPECIFICATIONS IN THE PCF SPACE

A simple example of a composite Web service
provided in IBM’s Web Services Flow Language
(http://www-4.ibm.com/software/solutions/web
services/pdf/WSFL.pdf) helps to understand the
speciﬁcations and the features they support. In this
example, TotalSupply service leverages two other
Web services: mySupplier as a source for products
and myShipper to distribute them. These two Web
services use the Web Services Description Language.

Web Services Description Language 

WSDL  is  an  XML-based  speciﬁcation  that
describes Web services as collections of message-
enabled operations and was submitted to the World

56

Computer

<ConversationInteractions>

<Interaction StepType="ReceiveSend" id="ProcessPO">

<InboundXMLDocuments>

<InboundXMLDocument id="PurchaseOrder"

hrefSchema="PO.xsd"/>

</InboundXMLDocuments>

<OutboundXMLDocuments>

<OutboundXMLDocument id="Shipment"

hrefSchema="Shipment.xsd"/>

</OutboundXMLDocuments>

</Interaction>
<Interaction StepType="Receive" id="ProcessPayment"> --------- </Interaction>
</ConversationInteractions>

<ConversationTransitions>

<Transition>

<SourceInteration href="#ProcessPO"/>
<DestinationInteraction href="#ProcessPayment"/>

<TriggeringDocument href="#Shipment"/>

</Transition>
</ConversationTransitions>

Figure 3. Web Ser-
vices Conversation
Language deﬁning
conversations
between service
providers and con-
sumers. The Transi-
tion attribute
deﬁnes the ordering
between the
processPO and
processPayment
interactions.

Wide Web consortium (W3C) by Ariba, IBM, and
Microsoft (http://www.w3.org/TR/wsdl). WSDL
provides the information needed to invoke an oper-
ation in an application running in a third-party loca-
tion on the Internet, including the operation name,
input/output parameters and their data types, the
network protocol, and the network address. 

Dissecting the deﬁnition of TotalSupply helps to
understand the details of WSDL. The service sup-
ports  two  operations:  processPO  and  process-
Payment. This example assumes that the service is
deployed using the SOAP protocol (http://www.
w3.org/TR/SOAP/) over HTTP. The WSDL file
begins with an element having attributes that deﬁne
the  TotalSupply  service,  the  target  namespace
(http://example.com/TotalSupply.wsdl), and other
namespaces. The types element defines the data
type  of  the  input/output  messages  that  are
exchanged during the operation. You can use stan-
dard XML data types such as string, integer, and
ﬂoat, or you can create complex data types.

TotalSupply supports four data types: orderBody,
notiﬁcationBody, paymentBody, and errorBody. It
also supports four types of single-part messages:
two input messages, purchaseOrder and payment;
one output message, shipmentNotiﬁcation; and an
error message. To keep the example simple, we
deﬁne a class of XML documents within a separate
schema ﬁle, TotalSupply.xsd, as Figure 2a shows.
The references to the user-deﬁned types use xsd1
as a namespace preﬁx to qualify their use. The mes-
sage element deﬁnes the exchanged data. Messages
can consist of one or more logical parts, each with
an associated data type. 

The portType element in Figure 2b groups the
operation and related messages together. This ele-
ment currently supports four types of operation:

one-way, request-response, solicit response, and
notiﬁcation. TotalSupply Web service supports two
request-response  operations:  processPO  and
processPayment. The binding element in Figure 2c
deﬁnes the network protocol details for the opera-
tion, SOAP over an HTTP transport in this exam-
ple. Where the port element deﬁnes a single network
address (http://example.com/TotalSupply), the ser-
vice  element  in  Figure  2d  groups  related  ports
together in our example Web service. 

Web Services Conversation Language 

Hewlett-Packard developed the Web Services
Conversation Language (WSCL), an XML-based
speciﬁcation layered on top of WSDL, for use in
deﬁning conversations between service providers
and consumers. WSCL was submitted to the W3C
(http://www.w3.org/TR/wscl10/). 

Figure 3 shows a WSCL conversation for our
TotalSupply  Web  service.  The  initialInteraction
attribute speciﬁes the ﬁrst interaction—equivalent to
operation in WSDL—in the sequence. The Transition
attribute deﬁnes the ordering between the processPO
and processPayment interactions. The conversation
proceeds from one interaction to another according
to the legally deﬁned transitions. Transition is unique
to  WSCL,  whereas  Interaction  and  Inbound/
Outbound XML documents overlap with WSDL. 

ebXML

The United Nations (UN/CEFACT) and OASIS
sponsored the ebXML specifications for use in 
e-business frameworks. 

ebXML  Business  Process  Specification  Schema.
ebXML BPSS (http://www.ebxml.org/specs/ebBPSS.
doc) is a proposed standard for specifying collab-
orations for use in exchanging business documents

May 2002

57

Figure 4. ebXML
Business Process
Speciﬁcation
Schema specifying
business collabora-
tions. In business
collaborations, a set
of roles exchange
business documents
in a set of
choreographed
transactions.

<!--Business Transactions-->
<BusinessTransaction name="Process PO">
<RequestingBusinessActivity name="PurchaseActivity">

<DocumentEnvelope businessDocument="Purchase Order"
isAuthenticated="true"/>

</RequestingBusinessActivity>
<RespondingBusinessActivity name="NotiﬁcationActivity">
<DocumentEnvelope businessDocument="Shipment Notiﬁcation"
isTamperProof="true"/>

</RespondingBusinessActivity>
</BusinessTransaction>
<BusinessTransaction name="Process Payment">
<RequestingBusinessActivity name="PaymentActivity">

<DocumentEnvelope businessDocument="Payment"
isAuthenticated="true"/>

</RequestingBusinessActivity>
</BusinessTransaction>

through a set of choreographed transactions. Our
TotalSupplySpec example uses three business doc-
uments: purchase order, shipment notiﬁcation, and
payment. 

A business transaction is an atomic unit of work
between trading partners. Each business transac-
tion has one requesting (incoming) document and
an optional responding (outgoing) document. BPSS
also supports business signals, or application-level
documents that signal a business transaction’s cur-
rent state—for example, an acknowledgment doc-
ument. 

As Figure 4 shows, TotalSupplySpec supports
two business transactions: processPO and process-
Payment.  TotalSupply  workflow  supports  the
notion  of  business  collaboration,  or  Binary-
Collaboration, which establishes roles and autho-
rizes actors to participate in the collaboration. For
example, a Buyer role can initiate the business
transaction and the Seller has a responding role. A
BinaryCollaboration also speciﬁes the choreogra-
phy—or ordering of business transactions—and
subcollaborations  within  larger  collaborations.
WSCL  overlaps  with  BPSS  and  WSFL  because
Transition is the same as choreography.

BPSS uses a top-down approach that provides a
notation to describe a business process from both
the service provider and service consumer view-
points, whereas WSDL and WSCL use a bottom-up
approach that provides a notation describing only
the service provider interface. 

ebXML Collaboration Protocol Profile. ebXML CPP
(http://www.ebxml.org/specs/ebCCP.doc) describes
the IT capabilities of an individual party partici-
pating in the collaborative business process. These
capabilities include details of transport, messaging,
security constraints, and bindings to a business
process—for example, ebXML BPSS.

A CollaborationProtocolProﬁle, the root element
of a CPP document, includes a PartyInfo element

that identiﬁes the party described in the CPP and
includes a reference to the ProcessSpecification
(BPSS) documents it supports. The Collaboration-
Role element identiﬁes the roles that the party can
play in the referenced business process. Service-
Binding  binds  all  of  the  BusinessTransactions
deﬁned in BPSS to the sending or receiving com-
munication  protocol—for  example,  HTTP  or
SMTP—and also provides the end point associated
with the receiving protocol. 

In the current CPP speciﬁcation, the end point
attribute is static, but the ebXML Messaging Service
speciﬁcation may provide the capability to dynam-
ically  override  that  end  point  information  by
exchanging a speciﬁc URI in a business document. 
The Collaboration Protocol Agreement (CPA)
describes the capabilities that two parties have
agreed to use to perform a business collaboration.
A CPA can be generated by calculating the inter-
section of the information found in the CPPs of the
two  parties  participating  in  the  collaboration.
Generating the CPA may involve some level of
negotiation between the two parties. 

CPA is part of the CPP speciﬁcations. Although
there is no speciﬁcation for how to accomplish the
negotiation, the CPPA technical committee has ini-
tiated some work in this area.

Web Services Flow Language

IBM’s Web Services Flow Language is an XML-
based speciﬁcation for describing a public collab-
orative  process  and  its  compositions.  WSFL  is
layered on top of WSDL, which describes the ser-
vice interfaces and their protocol bindings.

WSFL deﬁnes two types of Web services composi-
tions: A ﬂow model speciﬁes the execution sequence
of a business process’s functions. A global model com-
bines ﬂow models and provides a description of how
the composed Web services interact with each other. 

WSFL’s major features include

58

Computer

• activity, a processing step in a business process;
• control link, sequencing rules in a business
process that model the control ﬂow from one
activity to the next;

• data  link,  information  flow  in  a  business
process, wherein data flow can be separate
from control ﬂow;

• data  mapping,  specifying  information  that
needs to be transferred between two linked
activities; and

• pluglink and export element, describing the
relation between activities in the ﬂow model
and the WSDL operations the service provider
offers.

Figure 5 shows a graphical representation of the
TotalSupply Web service WSFL model, with three
ﬂow models comprising the global model: one for
our enterprise and two representing the support-
ing services. 

Prior to constructing a WSFL global model, the
individual ﬂow models must be speciﬁed accord-
ing  to  IBM’s  WSFL  specification (http://www-
4.ibm.com/software/solutions/webservices/pdf/
WSFL.pdf). The WSFL ﬂow model for TotalSupply
consists of a ﬂowModel name, TotalSupplyFlow;
a service ProviderType; and a listing of service

TotalSupplyFlow

processPO

Process
payment

Accept
shipment
request

Supplier
FlowModel

Shipper
FlowModel

FlowModel

GlobalModel

providers, activity speciﬁcations, and control and
data links. Our TotalSupply ﬂow model includes
two separate serviceProvider elements in the ser-
vice ProviderType—mySupplier and myShipper.
Figure 6a shows the XML code for mySupplier.

The TotalSupply ﬂow model must perform three
activities  to  successfully  complete  the  business
process: processing a purchase order, accepting a
shipment request, and receiving a payment. Separate
activity elements specify each of these activities,
which must perform in a speciﬁc order: Purchase-
order processing must precede the shipper’s accep-
tance of the shipping request, whereas the payment
can be received at any time—WSFL allows an activ-
ity to exist outside the control links connecting other
activities. Figure 6b provides an example of the
processPO  activity,  which  is  provided  by  my-

<serviceProvider name="mySupplier" type="supplier">

<locator type="static" service="qualitySupply.com"/>

</serviceProvider>
(a)

<activity name="processPO">

<performedBy serviceProvider="mySupplier"/>
<implement>
<export>

<target portType="totalSupplyPT"
operation="sendProcOrder"/>

</export>
</implement>

</activity>
(b)

Figure 5. TotalSup-
ply Web service
global model repre-
sentation. Activities
such as processPO
are represented as
shaded circles, con-
trol links are solid
arrows connecting
activities, data links
are dashed arrows,
and the callouts
connecting the
TotalSupply activi-
ties to the external
services represent
pluglinks.

Figure 6. WSFL
TotalSupply ﬂow
model: (a) service-
Provider element 
for mySupplier; (b)
processPO activity
provided by mySup-
plier; (c) controlLink
and dataLink
elements. 

<controlLink source="processPO"

target="acceptShipmentRequest"/>

<dataLink source="processPO"

target="acceptShipmentRequest">

<map sourceMessage="anINVandSR" targetMessage="anSR"/>

</dataLink>
(c)

May 2002

59

Figure 7. Simpliﬁed
global model my-
SupplyChain cap-
tures the inter-
actions between 
the supplier, the
shipper, and the
TotalSupply Web
service.

<globalModel name="mySupplyChain"

serviceProviderType="supplyChain">

<serviceProvider name="mySupplier" type="supplier"/>
<serviceProvider name="myShipper" type="shipper"/>
<serviceProvider name="myTotalSupply" type="totalSupply"/>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT" 
operation="sendProcOrder"/>

<target serviceProvider="mySupplier"

portType="suppSvr"
operation="procPO"/>

</plugLink>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT"
operation="sendPayment"/>

<target serviceProvider="mySupplier"

portType="suppSvr"
operation="recPay"/>

</plugLink>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT"
operation="sendSR"/>

<target serviceProvider="myShipper"

portType="shipSvr"
operation="recSR"/>

</plugLink>
</globalModel>

Supplier, and exposes the sendProcOrder operation;
the TotalSupply ﬂow includes this activity deﬁni-
tion  as  well  as  deﬁnitions  for  acceptShipment-
Request and processPayment.

Figure 6c provides an example of the controlLink
and dataLink elements. The map element nested
inside the dataLink speciﬁes the information the
two linked activities need to transfer.

All of this is brought together in Figure 7 in
which the simpliﬁed mySupplyChain global model
captures the interactions between the supplier, the
shipper, and the TotalSupply Web service. The rela-
tionship between a flow model public interface
operation and a service provider operation is estab-
lished through a plugLink element, which WSFL
typically speciﬁes within a global model.

XLANG

Microsoft’s  XLANG  (http://www.gotdotnet.
com/team/xml_wsspecs/xlang-c/default.htm), an
XML-based speciﬁcation for describing executable
business processes internal to a business, is layered
on top of WSDL.

The XLANG speciﬁcation builds on the XML
code for process description that Microsoft’s Visio-
based BizTalk Server Orchestration graphical mod-
eling tool generates. 

XLANG’s major features include

• behavior, a container for the description of the
service’s behavioral aspects, including support
for looping, concurrency, and exception han-
dling;

• action, atoms of behavior referencing WSDL

operations on the available ports;

• control flow, sequence in which the service

performs actions;

• correlation, structure the service uses to route

messages to correct workﬂow instances;

• context, a context for long-running transac-

tions;

• service  management,  features  of  service

instance management; and

• port mapping, method for plugging in the ser-

vice user and the service provider.

Figure 8a shows an XLANG deﬁnition for our
WSFL-based TotalSupply example. The </all> tag
indicates that acceptShipmentRequest and process-
Payment actions can occur concurrently. WSDL
deﬁnes the sendSRPort and sendPaymentPort ref-
erence ports. Figure 8b captures the relationship
between the supplier, the shipper, and the Total-
Supply Web service. A connect element establishes

60

Computer

<xlang:action operation="processPO" 

port="sendProcOrderPort" activation="true"/>
<all>

<xlang:action operation="acceptShipmentRequest" 

port="sendSRPort"/>

<xlang:action operation="processPayment"
port="sendPaymentPort"/>

<xlang:behavior>

<xlang:body>

<xlang:sequence>

</all>

</xlang:action>
</xlang:sequence>

</xlang:body>

</xlang:behavior>
(a)

Figure 8. (a) XLANG
deﬁnition for Total-
Supply; (b) relation-
ship between the
supplier, the
shipper, and the
TotalSupply Web
service, established
through a connect
element.

<!--use the WSDL import for convenience-->
<import namespace="http://example.com/totalSupply/deﬁnitionsSupplier"
location="http://example.com/totalSupply/deﬁnitionsSupplier.wsdl"/>
<import namespace="http://example.com/totalSupply/deﬁnitionsShipper"
location="http://example.com/totalSupply/deﬁnitionsShipper.wsdl"/> 
<import namespace="http://example.com/totalSupply/deﬁnitionsTotalSupply"
location="http://example.com/totalSupply/deﬁnitionsTotalSupply.wsdl"/>
<!--deﬁne the way in which the services plugged in together-->
<xlang:contract>
<xlang:services refs="totalSupply:totalSupplyService
supplier:SupplierService
shipper:ShipperService"/>
<xlang:portMap>
<!--the total supply connects to the supplier for PO and Payment-->
<xlang:connect 
port="totalSupply:totalSupplyService/sendProcOrderPort"
port="supplier:SupplierService/suppSvr/procPOPort"/>
<xlang:connect 
port="totalSupply:totalSupplyService/sendPaymentPort"
port="supplier:SupplierService/suppSvr/recPayPort"/>
<!--the total supply connects to the shipper for the shipment request -->
<xlang:connect 
port="totalSupply:totalSupplyService/sendSRPort"
port="shipper:ShipperService/shipSvr/recSRPort"/>
</xlang:portMap>
</xlang:contract> 
(b)

the relationship between a TotalSupply operation
and an operation that a Supplier and a Shipper pro-
vide. 

Business Process Modeling Language 

The  Business  Process  Management  Initiative
developed the XML-based BPML metalanguage
for modeling executable private business processes
(http://www.bpmi.org/bpml.esp). BPML is com-
plementary to public collaborative process descrip-
tion languages, such as BPSS. It is based on the
concept of transactional ﬁnite-state machines and
has features that overlap XLANG. 

CHALLENGES

The abstract public description of our TotalSupply
Web service example needs to include a deﬁnition of
some additional attributes, including constraints the
B2B  environment’s  competitive  nature  imposes,
which requires differentiations based on QoS. 

End point description specification. We need to stan-
dardize and implement these attributes to allow an
optional layering of the deﬁnitions in WSDL. This
would allow an implementer to add the complex-
ity  of  this  layer  only  when  the  need  arises.
Currently, there is no standard form for these def-
initions. Although IBM’s WSFL documentation

May 2002

61

C O V E R   F E A T U R E

E-Business Process 
Modeling: The 
Next Big Step 

The authors propose a Process Coordination Framework for Web services
and outline the building blocks required for e-business automation. Their
framework helps in understanding the roles of various standards and in
identifying overlaps, gaps, and opportunities for convergence.

business so far. Businesses realize that the cost of
automating transactions with trading partners is very
high. Standards and technologies for modeling e-busi-
ness processes that use Web services could drive the
costs down by achieving automated code generation,
reuse, and interoperability—facilitating communica-
tion between business analysts and implementers.

Our proposed Process Coordination Framework
outlines the building blocks required for Web ser-
vices-enabled e-business automation. PCF helps in
understanding the roles of the various proposed
standards with respect to these building blocks and
in identifying both overlaps and gaps. 

PROCESS COORDINATION FRAMEWORK 

As Figure 1 shows, PCF groups the features that
e-business automation requires into a multilayered
stack. 

• Service  description  and  transport  binding.
Service description provides metalevel data for
services and their operations; transport bind-
ings tie abstract service descriptions to speciﬁc
physical addresses such as HTTP or SMTP sta-
tically at design time or dynamically at run-
time.

• End point description. This layer describes
aspects such as quality of service (QoS), service
location, provider information, and service cost
that can inﬂuence a customer’s decision to use
the Web service.

• Public  collaborative  process.  This  process
describes the sequence or choreography of the

Selim Aissi
Pallavi Malu
Krishnamurthy
Srinivasan

Intel Labs T he Internet is emerging as the platform for

automating both the provider and con-
sumer ends of e-business transactions. In
this new model, businesses offer Web ser-
vices that applications running in other
businesses could invoke automatically, building
bridges  between  systems  that  otherwise  would
require  extensive  integration  and  development
efforts. Web services are software components that
use standard Internet technologies to interact with
one another dynamically. 

In spite of the signiﬁcant potential beneﬁts, only a
few large businesses have implemented automated e-

Contracts/
agreement

Private
process

y
t
i
r
u
c
e
S

Public

collaborative

process

End point
description

Service

description and
transport binding

ebXML
CPA

XLANG

BPML

WSFL

WSEL

WSDL

WSCL

ebXML
BPSS

ebXML
CPP

Figure 1. Process Coordination Framework. PCF groups features required for e-
business automation along with relevant speciﬁcations into a multilayered stack.

0018-9162/02/$17.00 © 2002 IEEE

May 2002

55

<message name="purchaseOrder"> <part name="body" type="xsd1:orderBody"/> </message>
<message name="shipmentNotiﬁcation"> --------- </message>
<message name="payment"> --------- </message>
<message name="error"> --------- </message>
(a)

<portType name="TotalSupplyPortType">

<operation name="processPO">

<input message="tns:purchaseOrder"/>
<output message="tns:shipmentNotiﬁcation"/>
<fault message="tns:error"/>

</operation>
<operation name="processPayment"> --------- </operation>

</portType>
(b)

<binding name="TotalSupplySoapBinding" type="tns:TotalSupplyPortType">
<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http/">
<operation name="processPO">

<soap:operation soapAction="http://example.com/processPO"/>

<input> <soap:body use="literal"/> </input>
<output> --------- </output>
<fault> <soap:fault use="literal"/> </fault>

</operation>
</binding>
(c)

<service name="TotalSupplyService">

<documentation> TotalSupply service</documentation>
<port name="TotalSupplyPort" binding="tns: TotalSupplySoapBinding">

<soap:address location="http://example.com/TotalSupply"/>

</port>
</service>
(d)

Figure 2. WSDL deﬁ-
nition of TotalSup-
ply: (a) schema ﬁle
TotalSupply.xsd
deﬁning a class of
XML documents; (b)
portType element
grouping the opera-
tion and related
messages together;
(c) binding element
deﬁning the network
protocol details for
the operation; (d)
service element
grouping related
ports together.

operations  the  Web  service  supports.  For
example, if the service supports operations
including Login and Check Balance, the pub-
lic collaborative process speciﬁes that the user
needs to log in before checking the balance to
avoid errors.

• Private process. This layer describes internal
executable business processes that support the
Web service’s public collaborative process.

• Contracts/agreement. The actual technical and
legal agreements under which entities conduct
business reside in this layer. The technical con-
tract between the entities includes the exact
details of how the parties use their informa-
tion technology (IT) infrastructure to transact
the  business  at  hand.  The  legal  contract
includes agreements on the terms and condi-
tions  of  the  business  exchange.  Having  an
XML-based syntax to specify contracts helps
applications automatically interact without
human intervention. However, XML does not
currently incorporate many of these defini-
tions.

• Security. Security requirements include a com-
bination of the following features: authoriza-
tion,  authentication,  confidentiality,  non-
repudiation, and auditing. Various PCF layers
may require different aspects of security. Any
exchange of business information may require
all, some, or no security features.

SPECIFICATIONS IN THE PCF SPACE

A simple example of a composite Web service
provided in IBM’s Web Services Flow Language
(http://www-4.ibm.com/software/solutions/web
services/pdf/WSFL.pdf) helps to understand the
speciﬁcations and the features they support. In this
example, TotalSupply service leverages two other
Web services: mySupplier as a source for products
and myShipper to distribute them. These two Web
services use the Web Services Description Language.

Web Services Description Language 

WSDL  is  an  XML-based  speciﬁcation  that
describes Web services as collections of message-
enabled operations and was submitted to the World

56

Computer

<ConversationInteractions>

<Interaction StepType="ReceiveSend" id="ProcessPO">

<InboundXMLDocuments>

<InboundXMLDocument id="PurchaseOrder"

hrefSchema="PO.xsd"/>

</InboundXMLDocuments>

<OutboundXMLDocuments>

<OutboundXMLDocument id="Shipment"

hrefSchema="Shipment.xsd"/>

</OutboundXMLDocuments>

</Interaction>
<Interaction StepType="Receive" id="ProcessPayment"> --------- </Interaction>
</ConversationInteractions>

<ConversationTransitions>

<Transition>

<SourceInteration href="#ProcessPO"/>
<DestinationInteraction href="#ProcessPayment"/>

<TriggeringDocument href="#Shipment"/>

</Transition>
</ConversationTransitions>

Figure 3. Web Ser-
vices Conversation
Language deﬁning
conversations
between service
providers and con-
sumers. The Transi-
tion attribute
deﬁnes the ordering
between the
processPO and
processPayment
interactions.

Wide Web consortium (W3C) by Ariba, IBM, and
Microsoft (http://www.w3.org/TR/wsdl). WSDL
provides the information needed to invoke an oper-
ation in an application running in a third-party loca-
tion on the Internet, including the operation name,
input/output parameters and their data types, the
network protocol, and the network address. 

Dissecting the deﬁnition of TotalSupply helps to
understand the details of WSDL. The service sup-
ports  two  operations:  processPO  and  process-
Payment. This example assumes that the service is
deployed using the SOAP protocol (http://www.
w3.org/TR/SOAP/) over HTTP. The WSDL file
begins with an element having attributes that deﬁne
the  TotalSupply  service,  the  target  namespace
(http://example.com/TotalSupply.wsdl), and other
namespaces. The types element defines the data
type  of  the  input/output  messages  that  are
exchanged during the operation. You can use stan-
dard XML data types such as string, integer, and
ﬂoat, or you can create complex data types.

TotalSupply supports four data types: orderBody,
notiﬁcationBody, paymentBody, and errorBody. It
also supports four types of single-part messages:
two input messages, purchaseOrder and payment;
one output message, shipmentNotiﬁcation; and an
error message. To keep the example simple, we
deﬁne a class of XML documents within a separate
schema ﬁle, TotalSupply.xsd, as Figure 2a shows.
The references to the user-deﬁned types use xsd1
as a namespace preﬁx to qualify their use. The mes-
sage element deﬁnes the exchanged data. Messages
can consist of one or more logical parts, each with
an associated data type. 

The portType element in Figure 2b groups the
operation and related messages together. This ele-
ment currently supports four types of operation:

one-way, request-response, solicit response, and
notiﬁcation. TotalSupply Web service supports two
request-response  operations:  processPO  and
processPayment. The binding element in Figure 2c
deﬁnes the network protocol details for the opera-
tion, SOAP over an HTTP transport in this exam-
ple. Where the port element deﬁnes a single network
address (http://example.com/TotalSupply), the ser-
vice  element  in  Figure  2d  groups  related  ports
together in our example Web service. 

Web Services Conversation Language 

Hewlett-Packard developed the Web Services
Conversation Language (WSCL), an XML-based
speciﬁcation layered on top of WSDL, for use in
deﬁning conversations between service providers
and consumers. WSCL was submitted to the W3C
(http://www.w3.org/TR/wscl10/). 

Figure 3 shows a WSCL conversation for our
TotalSupply  Web  service.  The  initialInteraction
attribute speciﬁes the ﬁrst interaction—equivalent to
operation in WSDL—in the sequence. The Transition
attribute deﬁnes the ordering between the processPO
and processPayment interactions. The conversation
proceeds from one interaction to another according
to the legally deﬁned transitions. Transition is unique
to  WSCL,  whereas  Interaction  and  Inbound/
Outbound XML documents overlap with WSDL. 

ebXML

The United Nations (UN/CEFACT) and OASIS
sponsored the ebXML specifications for use in 
e-business frameworks. 

ebXML  Business  Process  Specification  Schema.
ebXML BPSS (http://www.ebxml.org/specs/ebBPSS.
doc) is a proposed standard for specifying collab-
orations for use in exchanging business documents

May 2002

57

Figure 4. ebXML
Business Process
Speciﬁcation
Schema specifying
business collabora-
tions. In business
collaborations, a set
of roles exchange
business documents
in a set of
choreographed
transactions.

<!--Business Transactions-->
<BusinessTransaction name="Process PO">
<RequestingBusinessActivity name="PurchaseActivity">

<DocumentEnvelope businessDocument="Purchase Order"
isAuthenticated="true"/>

</RequestingBusinessActivity>
<RespondingBusinessActivity name="NotiﬁcationActivity">
<DocumentEnvelope businessDocument="Shipment Notiﬁcation"
isTamperProof="true"/>

</RespondingBusinessActivity>
</BusinessTransaction>
<BusinessTransaction name="Process Payment">
<RequestingBusinessActivity name="PaymentActivity">

<DocumentEnvelope businessDocument="Payment"
isAuthenticated="true"/>

</RequestingBusinessActivity>
</BusinessTransaction>

through a set of choreographed transactions. Our
TotalSupplySpec example uses three business doc-
uments: purchase order, shipment notiﬁcation, and
payment. 

A business transaction is an atomic unit of work
between trading partners. Each business transac-
tion has one requesting (incoming) document and
an optional responding (outgoing) document. BPSS
also supports business signals, or application-level
documents that signal a business transaction’s cur-
rent state—for example, an acknowledgment doc-
ument. 

As Figure 4 shows, TotalSupplySpec supports
two business transactions: processPO and process-
Payment.  TotalSupply  workflow  supports  the
notion  of  business  collaboration,  or  Binary-
Collaboration, which establishes roles and autho-
rizes actors to participate in the collaboration. For
example, a Buyer role can initiate the business
transaction and the Seller has a responding role. A
BinaryCollaboration also speciﬁes the choreogra-
phy—or ordering of business transactions—and
subcollaborations  within  larger  collaborations.
WSCL  overlaps  with  BPSS  and  WSFL  because
Transition is the same as choreography.

BPSS uses a top-down approach that provides a
notation to describe a business process from both
the service provider and service consumer view-
points, whereas WSDL and WSCL use a bottom-up
approach that provides a notation describing only
the service provider interface. 

ebXML Collaboration Protocol Profile. ebXML CPP
(http://www.ebxml.org/specs/ebCCP.doc) describes
the IT capabilities of an individual party partici-
pating in the collaborative business process. These
capabilities include details of transport, messaging,
security constraints, and bindings to a business
process—for example, ebXML BPSS.

A CollaborationProtocolProﬁle, the root element
of a CPP document, includes a PartyInfo element

that identiﬁes the party described in the CPP and
includes a reference to the ProcessSpecification
(BPSS) documents it supports. The Collaboration-
Role element identiﬁes the roles that the party can
play in the referenced business process. Service-
Binding  binds  all  of  the  BusinessTransactions
deﬁned in BPSS to the sending or receiving com-
munication  protocol—for  example,  HTTP  or
SMTP—and also provides the end point associated
with the receiving protocol. 

In the current CPP speciﬁcation, the end point
attribute is static, but the ebXML Messaging Service
speciﬁcation may provide the capability to dynam-
ically  override  that  end  point  information  by
exchanging a speciﬁc URI in a business document. 
The Collaboration Protocol Agreement (CPA)
describes the capabilities that two parties have
agreed to use to perform a business collaboration.
A CPA can be generated by calculating the inter-
section of the information found in the CPPs of the
two  parties  participating  in  the  collaboration.
Generating the CPA may involve some level of
negotiation between the two parties. 

CPA is part of the CPP speciﬁcations. Although
there is no speciﬁcation for how to accomplish the
negotiation, the CPPA technical committee has ini-
tiated some work in this area.

Web Services Flow Language

IBM’s Web Services Flow Language is an XML-
based speciﬁcation for describing a public collab-
orative  process  and  its  compositions.  WSFL  is
layered on top of WSDL, which describes the ser-
vice interfaces and their protocol bindings.

WSFL deﬁnes two types of Web services composi-
tions: A ﬂow model speciﬁes the execution sequence
of a business process’s functions. A global model com-
bines ﬂow models and provides a description of how
the composed Web services interact with each other. 

WSFL’s major features include

58

Computer

• activity, a processing step in a business process;
• control link, sequencing rules in a business
process that model the control ﬂow from one
activity to the next;

• data  link,  information  flow  in  a  business
process, wherein data flow can be separate
from control ﬂow;

• data  mapping,  specifying  information  that
needs to be transferred between two linked
activities; and

• pluglink and export element, describing the
relation between activities in the ﬂow model
and the WSDL operations the service provider
offers.

Figure 5 shows a graphical representation of the
TotalSupply Web service WSFL model, with three
ﬂow models comprising the global model: one for
our enterprise and two representing the support-
ing services. 

Prior to constructing a WSFL global model, the
individual ﬂow models must be speciﬁed accord-
ing  to  IBM’s  WSFL  specification (http://www-
4.ibm.com/software/solutions/webservices/pdf/
WSFL.pdf). The WSFL ﬂow model for TotalSupply
consists of a ﬂowModel name, TotalSupplyFlow;
a service ProviderType; and a listing of service

TotalSupplyFlow

processPO

Process
payment

Accept
shipment
request

Supplier
FlowModel

Shipper
FlowModel

FlowModel

GlobalModel

providers, activity speciﬁcations, and control and
data links. Our TotalSupply ﬂow model includes
two separate serviceProvider elements in the ser-
vice ProviderType—mySupplier and myShipper.
Figure 6a shows the XML code for mySupplier.

The TotalSupply ﬂow model must perform three
activities  to  successfully  complete  the  business
process: processing a purchase order, accepting a
shipment request, and receiving a payment. Separate
activity elements specify each of these activities,
which must perform in a speciﬁc order: Purchase-
order processing must precede the shipper’s accep-
tance of the shipping request, whereas the payment
can be received at any time—WSFL allows an activ-
ity to exist outside the control links connecting other
activities. Figure 6b provides an example of the
processPO  activity,  which  is  provided  by  my-

<serviceProvider name="mySupplier" type="supplier">

<locator type="static" service="qualitySupply.com"/>

</serviceProvider>
(a)

<activity name="processPO">

<performedBy serviceProvider="mySupplier"/>
<implement>
<export>

<target portType="totalSupplyPT"
operation="sendProcOrder"/>

</export>
</implement>

</activity>
(b)

Figure 5. TotalSup-
ply Web service
global model repre-
sentation. Activities
such as processPO
are represented as
shaded circles, con-
trol links are solid
arrows connecting
activities, data links
are dashed arrows,
and the callouts
connecting the
TotalSupply activi-
ties to the external
services represent
pluglinks.

Figure 6. WSFL
TotalSupply ﬂow
model: (a) service-
Provider element 
for mySupplier; (b)
processPO activity
provided by mySup-
plier; (c) controlLink
and dataLink
elements. 

<controlLink source="processPO"

target="acceptShipmentRequest"/>

<dataLink source="processPO"

target="acceptShipmentRequest">

<map sourceMessage="anINVandSR" targetMessage="anSR"/>

</dataLink>
(c)

May 2002

59

Figure 7. Simpliﬁed
global model my-
SupplyChain cap-
tures the inter-
actions between 
the supplier, the
shipper, and the
TotalSupply Web
service.

<globalModel name="mySupplyChain"

serviceProviderType="supplyChain">

<serviceProvider name="mySupplier" type="supplier"/>
<serviceProvider name="myShipper" type="shipper"/>
<serviceProvider name="myTotalSupply" type="totalSupply"/>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT" 
operation="sendProcOrder"/>

<target serviceProvider="mySupplier"

portType="suppSvr"
operation="procPO"/>

</plugLink>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT"
operation="sendPayment"/>

<target serviceProvider="mySupplier"

portType="suppSvr"
operation="recPay"/>

</plugLink>
<plugLink>

<source serviceProvider="myTotalSupply"

portType="totalSupplyPT"
operation="sendSR"/>

<target serviceProvider="myShipper"

portType="shipSvr"
operation="recSR"/>

</plugLink>
</globalModel>

Supplier, and exposes the sendProcOrder operation;
the TotalSupply ﬂow includes this activity deﬁni-
tion  as  well  as  deﬁnitions  for  acceptShipment-
Request and processPayment.

Figure 6c provides an example of the controlLink
and dataLink elements. The map element nested
inside the dataLink speciﬁes the information the
two linked activities need to transfer.

All of this is brought together in Figure 7 in
which the simpliﬁed mySupplyChain global model
captures the interactions between the supplier, the
shipper, and the TotalSupply Web service. The rela-
tionship between a flow model public interface
operation and a service provider operation is estab-
lished through a plugLink element, which WSFL
typically speciﬁes within a global model.

XLANG

Microsoft’s  XLANG  (http://www.gotdotnet.
com/team/xml_wsspecs/xlang-c/default.htm), an
XML-based speciﬁcation for describing executable
business processes internal to a business, is layered
on top of WSDL.

The XLANG speciﬁcation builds on the XML
code for process description that Microsoft’s Visio-
based BizTalk Server Orchestration graphical mod-
eling tool generates. 

XLANG’s major features include

• behavior, a container for the description of the
service’s behavioral aspects, including support
for looping, concurrency, and exception han-
dling;

• action, atoms of behavior referencing WSDL

operations on the available ports;

• control flow, sequence in which the service

performs actions;

• correlation, structure the service uses to route

messages to correct workﬂow instances;

• context, a context for long-running transac-

tions;

• service  management,  features  of  service

instance management; and

• port mapping, method for plugging in the ser-

vice user and the service provider.

Figure 8a shows an XLANG deﬁnition for our
WSFL-based TotalSupply example. The </all> tag
indicates that acceptShipmentRequest and process-
Payment actions can occur concurrently. WSDL
deﬁnes the sendSRPort and sendPaymentPort ref-
erence ports. Figure 8b captures the relationship
between the supplier, the shipper, and the Total-
Supply Web service. A connect element establishes

60

Computer

<xlang:action operation="processPO" 

port="sendProcOrderPort" activation="true"/>
<all>

<xlang:action operation="acceptShipmentRequest" 

port="sendSRPort"/>

<xlang:action operation="processPayment"
port="sendPaymentPort"/>

<xlang:behavior>

<xlang:body>

<xlang:sequence>

</all>

</xlang:action>
</xlang:sequence>

</xlang:body>

</xlang:behavior>
(a)

Figure 8. (a) XLANG
deﬁnition for Total-
Supply; (b) relation-
ship between the
supplier, the
shipper, and the
TotalSupply Web
service, established
through a connect
element.

<!--use the WSDL import for convenience-->
<import namespace="http://example.com/totalSupply/deﬁnitionsSupplier"
location="http://example.com/totalSupply/deﬁnitionsSupplier.wsdl"/>
<import namespace="http://example.com/totalSupply/deﬁnitionsShipper"
location="http://example.com/totalSupply/deﬁnitionsShipper.wsdl"/> 
<import namespace="http://example.com/totalSupply/deﬁnitionsTotalSupply"
location="http://example.com/totalSupply/deﬁnitionsTotalSupply.wsdl"/>
<!--deﬁne the way in which the services plugged in together-->
<xlang:contract>
<xlang:services refs="totalSupply:totalSupplyService
supplier:SupplierService
shipper:ShipperService"/>
<xlang:portMap>
<!--the total supply connects to the supplier for PO and Payment-->
<xlang:connect 
port="totalSupply:totalSupplyService/sendProcOrderPort"
port="supplier:SupplierService/suppSvr/procPOPort"/>
<xlang:connect 
port="totalSupply:totalSupplyService/sendPaymentPort"
port="supplier:SupplierService/suppSvr/recPayPort"/>
<!--the total supply connects to the shipper for the shipment request -->
<xlang:connect 
port="totalSupply:totalSupplyService/sendSRPort"
port="shipper:ShipperService/shipSvr/recSRPort"/>
</xlang:portMap>
</xlang:contract> 
(b)

the relationship between a TotalSupply operation
and an operation that a Supplier and a Shipper pro-
vide. 

Business Process Modeling Language 

The  Business  Process  Management  Initiative
developed the XML-based BPML metalanguage
for modeling executable private business processes
(http://www.bpmi.org/bpml.esp). BPML is com-
plementary to public collaborative process descrip-
tion languages, such as BPSS. It is based on the
concept of transactional ﬁnite-state machines and
has features that overlap XLANG. 

CHALLENGES

The abstract public description of our TotalSupply
Web service example needs to include a deﬁnition of
some additional attributes, including constraints the
B2B  environment’s  competitive  nature  imposes,
which requires differentiations based on QoS. 

End point description specification. We need to stan-
dardize and implement these attributes to allow an
optional layering of the deﬁnitions in WSDL. This
would allow an implementer to add the complex-
ity  of  this  layer  only  when  the  need  arises.
Currently, there is no standard form for these def-
initions. Although IBM’s WSFL documentation

May 2002

61

hints at work in this area, for example, WSEL, no
standards body has pursued these efforts. 

Security considerations. The biggest challenge for
Web services is the fragmentation of the security
requirements. The inability to describe where and
how to apply security measures is a large gap in the
description of Web services. The only initiative that
indicates how to use XML’s security features in a
CPPA context is ebXML. The main security chal-
lenges include the lack of specificity for how to
apply security standards (for example, digital cer-
tificates); the cost or difficulty in implementing
some security solutions (for example, a digital sig-
nature for authentication); and the lack of key secu-
rity  countermeasures  in  the  specification  (for
example, security policy maintenance). 

Another challenge is that ebXML CPPA’s secu-
rity features are intermingled with other trading
partner speciﬁc details like business process deﬁn-
itions and implementation protocol bindings. This
approach  works  well  when  every  layer  of  the
ebXML  protocol  stack  is  used.  However,  with
ebXML, the implementer cannot use widely sup-
ported standards from other organizations. 

Opportunities  for  convergence.  Having  multiple
speciﬁcations that overlap and describe similar fea-
tures can cause interoperability problems. Instead
of describing its own transport bindings, CPPA
could use WSDL’s transport bindings. 

Both XLANG and BPML focus on an XML-
based description of private business processes.
Because they both are built on WSDL and have rel-
ative gaps and strengths, convergence would capi-
talize  on  their  strengths.  WSCL  describes  the
sequence in which operations can be invoked. 

WSFL speciﬁes public choreography and com-
bining multiple Web services into a composite Web
service. BPSS describes public choreography and
multiparty collaboration. WSCL, WSFL, and BPSS
all describe the public choreography of a business
process, and they should converge on that feature. 

B ased on its B2B focus, security and end point

descriptions, and complete business-scenario
approach, ebXML (BPSS, CPPA) tends to be
the  richest  of  all  the  specifications  discussed.
However, to reach full automation, in addition to
security descriptions, Web services need a richer
and more complete end point. Web services also
need faster, less expensive, and more modular busi-
ness process modeling and code generation tools,
such as graphical tools. 

In a perfect world, the analyst draws the model,
the tools generate the WSDL and WSCL or BPSS,
and the implementer uses the graphical model to
derive the workflow implementation and auto-
matically generate the CPP, which the trading part-
ners then use to do business. While XML allows
interoperability, the proposed automation process
will facilitate reuse of the workﬂows.

Web services are advancing platform and lan-
guage-independent interoperability. However, their
standardized  definitions  are  still  evolving.
Describing the Web services business process is a
key area in the future of software engineering. In
addition to discovery and management, a Web ser-
vices description will lead to solutions that are more
ﬂexible, faster to implement, and cheaper to deploy
and maintain. I

Selim Aissi is a senior architect in Intel’s Corpo-
rate Technology Group in Hillsboro, Oregon. His
research interests include the development of secu-
rity reliability, and trustworthiness technologies
for  distributed  systems  and  Web  services.  He
received a PhD in aerospace engineering from the
University of Michigan. Contact him at selim.
aissi@intel.com.

Pallavi Malu is a senior software engineer in Intel’s
Corporate Technology Group in Chandler, Ari-
zona. She received an MS in computer science from
Wright State University. Contact her at pallavi.
g.malu@intel.com.

Krishnamurthy Srinivasan is a manager in the Web
Services  Technologies  Lab  at  Intel’s  Corporate
Technology Group. He received a PhD in textile
engineering from the Georgia Institute of Tech-
nology. Contact him at krishnamurthy.srinivasan@
intel.com.

62

Computer

